@inject IApplicationService applicationService
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject IUserProfileService UserProfileService 
@using System.Net
@using MRA.Identity.Application.Contract.Profile.Responses
@using MRA.Jobs.Application.Contracts.Applications.Commands.AddNote
@using MRA.Jobs.Application.Contracts.TimeLineDTO
@using MRA.Jobs.Client.Services.Profile


<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h5">
            Cover letter
        </MudText>
        @CoverLetter

        <MudList>
            @if (VacancyResponses.Count() > 0)
            {
                <MudListSubheader>
                    Questions
                </MudListSubheader>


                @foreach (var response in VacancyResponses)
                {
                    <MudListItem Icon="@Icons.Material.Filled.QuestionMark" IconColor="Color.Info" Text="@response.VacancyQuestion.Question">
                    </MudListItem>
                    <MudListItem Icon="@Icons.Material.Filled.QuestionAnswer" IconColor="Color.Info">
                        @response.Response
                    </MudListItem>
                }
            }
        </MudList>
        @if (!isApplicant)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Surface" style="margin-bottom: 10px" Href="@cvURL">
                <MudIcon Icon="@Icons.Material.Filled.Download"></MudIcon>@ContentService["Dashboard:Appilcations:More:CVButton"]
            </MudButton>

            <MudSelect T="string" Label="Select status" AnchorOrigin="Origin.BottomCenter" @bind-Value="@selectedStatus">
                @foreach (var status in Enum.GetValues(typeof(ApplicationStatusDto.ApplicationStatus)))
                {
                    <MudSelectItem Value="@status.ToString()"/>
                }
            </MudSelect>
            <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="@ChangeStatus">Change status</MudButton>
            <br/>
            <br/>
            <br/>
            <MudText Style="color: grey" Typo="Typo.h6">
                <b>Notes</b>
            </MudText>

            @if (_timelienes == null)
            {
                <div style="text-align: center;">
                    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"/>
                </div>
            }
            else
            {
                <div style="align-content: center; align-items: center;">
                    <MudTimeline>
                        @foreach (var item in _timelienes)
                        {
                            <MudTimelineItem Color="Color.Primary">
                                <ItemContent>
                                    <MudAlert>
                                        @* <MudText Color="Color.Info" Typo="Typo.h6" GutterBottom="true">Create At</MudText> *@
                                        <MudText Color="Color.Info" GutterBottom="true">@item.Time</MudText>
                                        <MudText>@item.Note</MudText>
                                    </MudAlert>
                                </ItemContent>
                            </MudTimelineItem>
                        }
                    </MudTimeline>
                </div>
            }

            <MudCard>
                <EditForm Model="@_addNote">
                    <MudCardHeader>
                        <MudText>Add Note</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <FluentValidationValidator/>
                        <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="@_addNote.Note" Lines="2"
                                      For="@(() => _addNote.Note)"/>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnAddNoteAsync">
                            <MudText>Add</MudText>
                        </MudButton>
                    </MudCardActions>
                </EditForm>
            </MudCard>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {

    private AddNoteToApplicationCommand _addNote = new();
    private string selectedStatus { get; set; } = string.Empty;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public string CoverLetter { get; set; }
    [Parameter] public IEnumerable<VacancyResponseDto> VacancyResponses { get; set; }
    [Parameter] public string Slug { get; set; }
    [Parameter] public string StatusName { get; set; }
    [Parameter] public bool isApplicant { get; set; }
    [Parameter] public string ApplicationUserName { get; set; }
    public string cvURL;

    private UpdateApplicationStatus applicationStatus;
    private List<TimeLineDetailsDto> _timelienes;
    private UserProfileResponse _applicant;


    protected override async Task OnInitializedAsync()
    {
        _applicant = await UserProfileService.Get(ApplicationUserName);
        var app = await applicationService.GetApplicationDetails(Slug);
        cvURL = $"{httpClient.BaseAddress}applications/downloadCv/{WebUtility.UrlEncode(app.CV)}";
        if (!isApplicant)
            _timelienes = (await applicationService.GetApplicationTimeLineEvents(Slug))
                .OrderBy(t => t.Time).ToList();
        selectedStatus = StatusName;
        StateHasChanged();
    }

    private async Task OnAddNoteAsync()
    {
        _addNote.Slug = Slug;
        var response = await applicationService.AddNote(_addNote);
        _timelienes.Add(response);
        _addNote = new AddNoteToApplicationCommand();
        StateHasChanged();
    }

    private async Task ChangeStatus()
    {
        if (Enum.TryParse(selectedStatus, out ApplicationStatusDto.ApplicationStatus selectedEnumStatus))
        {
            applicationStatus = new UpdateApplicationStatus
            {
                ApplicantUserName = _applicant.UserName,
                Slug = Slug,
                StatusId = (int)selectedEnumStatus
            };
            var response = await applicationService.UpdateStatus(applicationStatus);
            if (response)
            {
                Snackbar.Add("Status updated successfully.", Severity.Success);
                Cancel();
            }
        }
        else
        {
            // Handle case where selectedStatus cannot be parsed to enum
            Snackbar.Add("Invalid status selected.", Severity.Error);
        }
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
}