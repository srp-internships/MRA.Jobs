@using MRA.Jobs.Client.Components.Under_Construction
@using Microsoft.FeatureManagement
@using MRA.Identity.Application.Contract.User.Responses
@using Microsoft.AspNetCore.WebUtilities
@using AltairCA.Blazor.WebAssembly.Cookie
@inherits LayoutComponentBase
@inject LayoutService LayoutService
@inject IFeatureManager FeatureManager 
@inject NavigationManager NavigationManager
@inject IAltairCABlazorCookieUtil CookieUtil
@inject AuthenticationStateProvider AuthenticationStateProvider
<MudThemeProvider @ref="@_mudThemeProvider" Theme="@LayoutService.CurrentTheme" IsDarkMode="@LayoutService.IsDarkMode" IsDarkModeChanged="LayoutService.SetDarkMode"/>
@if (!_IsUnderConstruction)
{
<MudLayout>
    <Header></Header>
    <MudDialogProvider/>
    <MudSnackbarProvider/>
    <MudMainContent>
        <main id="main" style="min-height: 100vh">
            <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                @Body
            </MudContainer>
        </main>
    </MudMainContent>

    <MudText Style="text-align: center; padding-top: 3%">
        © @(DateTime.Now.Year) Silk Road Professionals
    </MudText>

    <MudScrollToTop>
        <MudFab StartIcon="@Icons.Material.Filled.KeyboardArrowUp" Color="Color.Primary"/>
    </MudScrollToTop>

	</MudLayout>
}
else
{
	<UnderConstruction/>
}
@code
{
	private bool _IsUnderConstruction;
	private bool _themeSwitcher;
    private MudThemeProvider _mudThemeProvider;

    protected override void OnInitialized()
    {
        LayoutService.MajorUpdateOccured += UpdateState;
    }

    private void UpdateState(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        LayoutService.MajorUpdateOccured -= UpdateState;
    }

    private async Task ApplyUserPreferences()
    {
		_IsUnderConstruction = await FeatureManager.IsEnabledAsync(FeatureFlags.IsUnderConstruction);
        _themeSwitcher = await FeatureManager.IsEnabledAsync(FeatureFlags.ThemeSwitcher);
        if (!_themeSwitcher)
        {
            LayoutService.SetNoTheme();
            return;
        }
        var defaultDarkMode = await _mudThemeProvider.GetSystemPreference();
        await LayoutService.ApplyUserPreferences(defaultDarkMode);
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        await LayoutService.OnSystemPreferenceChanged(newValue);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ApplyUserPreferences();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }


}