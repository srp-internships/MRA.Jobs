@using Microsoft.FeatureManagement
@inherits LayoutComponentBase
@inject LayoutService LayoutService
@inject IFeatureManager FeatureManager 

<MudThemeProvider @ref="@_mudThemeProvider" Theme="@LayoutService.CurrentTheme" IsDarkMode="@LayoutService.IsDarkMode" IsDarkModeChanged="LayoutService.SetDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<MudMainContent>
    <main id="main" style="min-height: 100vh">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
            @Body
        </MudContainer>
    </main>
</MudMainContent>

@code
{
    private MudThemeProvider _mudThemeProvider;
    private bool _themeSwitcher;

    protected override void OnInitialized()
    {
        LayoutService.MajorUpdateOccured += UpdateState;
    }

    private void UpdateState(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        LayoutService.MajorUpdateOccured -= UpdateState;
    }
    
    private async Task ApplyUserPreferences()
    {
        _themeSwitcher = await FeatureManager.IsEnabledAsync(FeatureFlags.ThemeSwitcher);
        if (!_themeSwitcher)
        {
            LayoutService.SetNoTheme();
            return;
        }
        var defaultDarkMode = await _mudThemeProvider.GetSystemPreference();
        await LayoutService.ApplyUserPreferences(defaultDarkMode);
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        await LayoutService.OnSystemPreferenceChanged(newValue);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ApplyUserPreferences();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }
}