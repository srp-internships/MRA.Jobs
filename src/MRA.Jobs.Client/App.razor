@page "/{page}"
@using MRA.Jobs.Client.Identity
@using MRA.Jobs.Client.Components.Extra
@using System.Globalization
@using FluentValidation
@using Microsoft.IdentityModel.Tokens
@inject NavigationManager NavManager

<Router AppAssembly="typeof(Program).Assembly" Context="routeData">
    <Found>
        @if (NonLayout())
        {
            <RouteView RouteData="routeData" DefaultLayout="typeof(EmptyLayout)"/>
        }
        else
        {
            <CascadingAuthenticationState>
                <AuthorizeView Policy="@ApplicationPolicies.Reviewer" Context="_">
                    <Authorized>
                        <RouteView RouteData="routeData" DefaultLayout="typeof(Dashboard)"/>
                    </Authorized>

                    <NotAuthorized>
                        <RouteView RouteData="routeData" DefaultLayout="typeof(MainLayout)"/>
                    </NotAuthorized>
                </AuthorizeView>
            </CascadingAuthenticationState>
        }
    </Found>
    <NotFound>
        <CascadingAuthenticationState>
            <AuthorizeView Policy="@ApplicationPolicies.Reviewer" Context="_">
                <Authorized>
                    <LayoutView Layout="typeof(Dashboard)">
                        <NotFound/>
                    </LayoutView>
                </Authorized>

                <NotAuthorized>
                    <LayoutView Layout="typeof(MainLayout)">
                        <NotFound/>
                    </LayoutView>
                </NotAuthorized>
            </AuthorizeView>
        </CascadingAuthenticationState>
    </NotFound>
</Router>

@code
{

    [Inject] MRA.Jobs.Application.Contracts.ContentService.IContentService ContentServiceMraApplication { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ContentService.InitializeCultureAsync();
        var lang = await GetLanguageFromLocalStorageOrDefault();
        SetValidatorOptionsCulture(lang);
    }

    private async Task<string> GetLanguageFromLocalStorageOrDefault()
    {
        var lang = await LocalStorageService.GetItemAsStringAsync("ApplicationCulturesNames");
        return lang.IsNullOrEmpty() ? Configuration["FeatureManagement:DefaultLanguage"] : lang;
    }

    private void SetValidatorOptionsCulture(string lang)
    {
        ValidatorOptions.Global.LanguageManager.Culture = GetCultureInfo(lang);
        ValidatorOptions.Global.DisplayNameResolver = (type, member, expression) =>
            member is not null ? ContentServiceMraApplication[member.Name] : null;
    }

    private CultureInfo GetCultureInfo(string lang)
    {
        switch (lang)
        {
            case "Ru":
            case "ru-RU":
                return new CultureInfo(ApplicationCulturesNames.Ru);
            case "En":
            case "en-US":
                return new CultureInfo(ApplicationCulturesNames.En);
            case "Tj":
                return new CultureInfo(ApplicationCulturesNames.Tj);
            default:
                return ValidatorOptions.Global.LanguageManager.Culture;
        }
    }

    private bool NonLayout()
    {
        var uri = NavManager.ToBaseRelativePath(NavManager.Uri);
        return uri.Equals("sign-up", StringComparison.OrdinalIgnoreCase) ||
               uri.Equals("sign-in", StringComparison.OrdinalIgnoreCase);
    }
}