@page "/jobs"
@layout Main
@using MRA.Jobs.Application.Contracts.JobVacancies.Responses
@using MRA.Jobs.Application.Contracts.VacancyCategories.Responses;
@inject IVacancyService VacancyService
@inject ICategoryService CategoryService
@implements IDisposable

<!-- Vacancy page -->
<div class="container">
    <!-- Search -->
    <div class="w-100">
        <div class="p-1 d-flex bg-white shadow rounded mb-5">
            <div class="input-group">
                <input type="text"
                       class="form-control border-0"
                       placeholder="Input a vacancy title..."
                       aria-label="SearchText"
                @bind-value="_tempSearchTitle"
                @bind-value:event="oninput"
                       aria-describedby=""
                @onkeyup="HandleSearch">
                @if (_tempSearchTitle != "")
                {
                    <button @onclick="ResetInput">X</button>
                }
                <div class="input-group-append">
                    <button class="btn btn-outline-primary"
                    @onclick="(async () => { SetSearchTitle(); await BtnSearch(); })"
                            type="button">
                        Search
                    </button>
                </div>
            </div>
        </div>
    </div>
    <!-- End Search -->
    <!-- Categories -->
    <div class="w-100 d-flex flex-row justify-content-between">
        <div class="categories bg-white shadow-lg rounded p-4">
            <section id="category">
                <div class="w-100">
                    <h4 class="mb-2 text-dark">Category</h4>
                    @if (_categories is null || _categories.Count == 0)
                    {
                        <div>No categories at the moment.</div>
                    }
                    else
                    {
                        <div class="d-flex flex-column">
                            <div class="p-2 m-2 d-flex category @(_currentCategory == "All categories" ? "selectedCategory" : "")"
                            @onclick="(() => CategorySearch())">
                                All categories @VacanciesCountPerCategory("All categories")
                            </div>
                            @foreach (var c in _categories)
                            {
                                <div class="p-2 m-2 d-flex category @(_currentCategory == c.Name ? "selectedCategory" : "")"
                                @onclick="(() => CategorySearch(c.Name))">
                                    @c.Name @VacanciesCountPerCategory(c.Name)
                                </div>
                            }
                        </div>
                    }
                </div>
            </section>
        </div>
        <div class="vacancy">
            @if (_vacanciesOnPage is null || _vacanciesOnPage.Count == 0)
            {
                <div>No vacancies at the moment.</div>

                if (_searchTitle != "" || _currentCategory != "All categories")
                {
                    <a @onclick="OtherVacancies">See other vacancies</a>
                }
            }
            else
            {
                <div>
                    @foreach (var vacancy in _vacanciesOnPage)
                    {
                        <a href="/jobdetails/@vacancy.Slug">
                            <div class="card-vacancy w-100 bg-white shadow-lg rounded mb-4">
                                <div class="d-flex flex-column p-3">
                                    <h2 class="mb-2 text-black">@vacancy.Title</h2>
                                    <p class="mb-2 text-black">@vacancy.ShortDescription</p>
                                </div>
                            </div>
                        </a>
                    }
                </div>
                @if (_currentPage == VacancyService.PagesCount)
                {
                    <p>Results @((_currentPage - 1) * 10 + 1) - @VacancyService.FilteredVacanciesCount shown from @VacancyService.FilteredVacanciesCount</p>
                }
                else
                {
                    <p>Results @((_currentPage - 1) * 10 + 1) - @(_currentPage * 10) shown from @VacancyService.FilteredVacanciesCount</p>
                }
                @if (_currentPage == 1)
                {
                    <button class="btn btn-outline-info disabled page-selection oi oi-media-step-backward"></button>
                    <button class="btn btn-outline-info disabled page-selection oi oi-caret-left"></button>
                }
                else
                {
                    <button class="btn btn-outline-info page-selection oi oi-media-step-backward" @onclick="(() => GoToPage(1))"></button>
                    <button class="btn btn-outline-info page-selection oi oi-caret-left" @onclick="(() => GoToPage(_currentPage - 1))"></button>
                }
                if (VacancyService.PagesCount != 0)
                {
                    @for (int i = 1; i <= VacancyService.PagesCount; i++)
                    {
                        int pageNumber = i;
                        if (i == _currentPage)
                        {
                            <button class="btn btn-info page-selection">@i</button>
                        }
                        else
                        {
                            <button class="btn btn-outline-info page-selection" @onclick="(() => GoToPage(pageNumber))">@i</button>
                        }
                    }
                }
                @if (_currentPage == VacancyService.PagesCount)
                {
                    <button class="btn btn-outline-info disabled page-selection oi oi-caret-right"></button>
                    <button class="btn btn-outline-info disabled page-selection oi oi-media-step-forward"></button>
                }
                else
                {
                    <button class="btn btn-outline-info page-selection oi oi-caret-right" @onclick="(() => GoToPage(_currentPage + 1))"></button>
                    <button class="btn btn-outline-info page-selection oi oi-media-step-forward" @onclick="(() => GoToPage(VacancyService.PagesCount))"></button>
                }
            }
        </div>

    </div>

</div>
<!-- End Vacancy page -->
@code {
    List<CategoryResponse> _categories = new();
    string _currentCategory = "All categories";
    List<JobVacancyListDto> _vacanciesOnPage;
    List<JobVacancyListDto> _allVacancies;
    string _searchTitle = "";
    string _tempSearchTitle = "";
    int _currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        _vacanciesOnPage = await VacancyService.GetFilteredVacancies();
        _allVacancies = await VacancyService.GetAllVacancies();
        _categories = await CategoryService.GetAllCategory();
    }

    async Task BtnSearch(int pageNumber = 1)
    {
        _currentCategory = "All categories";
        _currentPage = pageNumber;
        _vacanciesOnPage = await VacancyService.GetFilteredVacancies(_searchTitle, page: pageNumber);
        VacancyService.OnChange += StateHasChanged;
    }

    void SetSearchTitle()
    {
        _searchTitle = _tempSearchTitle;
    }

    async Task ResetInput()
    {
        _tempSearchTitle = "";
        _searchTitle = "";
        _currentCategory = "All categories";
        _vacanciesOnPage = await VacancyService.GetFilteredVacancies(categoryName: "All categories");
    }

    async Task CategorySearch(string categoryName = "All categories", int pageNumber = 1)
    {
        _searchTitle = "";
        _currentCategory = categoryName;
        _currentPage = pageNumber;
        _vacanciesOnPage = await VacancyService.GetFilteredVacancies(categoryName: categoryName, page: pageNumber);
    }

    int VacanciesCountPerCategory(string categoryName)
    {
        return categoryName == "All categories" ? _allVacancies.Count : _allVacancies.Count(v => v.Category.Equals(categoryName));
    }

    async Task GoToPage(int pageNumber)
    {
        _currentPage = pageNumber;
        if (_searchTitle == "")
        {
            await CategorySearch(_currentCategory, pageNumber);
        }
        else
            await BtnSearch(pageNumber);
    }

    async Task OtherVacancies()
    {
        _currentCategory = "All categories";
        _searchTitle = "";
        await CategorySearch();
    }

    public async Task HandleSearch(KeyboardEventArgs args)
    {
        if (args.Key == null || args.Key.Equals("Enter"))
        {
            SetSearchTitle();
            await BtnSearch();
        }
    }

    public void Dispose()
    {
        VacancyService.OnChange -= StateHasChanged;
    }
}