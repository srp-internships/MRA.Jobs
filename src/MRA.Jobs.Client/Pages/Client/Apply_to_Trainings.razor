@page "/ApplytoTrainings/{Slug}"
@using Blazored.LocalStorage;
@using MRA.Jobs.Application.Contracts.Applications.Commands;
@using MRA.Jobs.Client.Services.ApplicationService;
@layout Main
@inject HttpClient httpClient
@inject ILocalStorageService LocalStorage;
@inject IApplicationService ApplicationService

<div class="container">

	<h1>Apply for training</h1>

	<p>Fill out the form below to apply for training:</p>

	<EditForm Model="@createApplication" OnValidSubmit="Apply"> 
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="form-group">
			<label for="CoverLetter">Tell us about yourself (minimum 20 words):</label>
			<InputTextArea id="CoverLetter" @bind-Value="createApplication.CoverLetter" class="form-control" rows="10"></InputTextArea>
			@if (createApplication.CoverLetter != null && createApplication.CoverLetter.Split(' ').Length < 20)
			{
				<p class="text-danger">Please write at least 20 words.</p>
			}
		</div>
		
		<button type="submit"  class="btn btn-primary">Send</button>
	</EditForm>

</div>
@code {
	[Parameter]
	public string Slug{ get; set;}

	private CreateApplicationCommand createApplication = new CreateApplicationCommand();
	private async Task Apply()
	{
	 createApplication.VacancyId=await LocalStorage.GetItemAsync<Guid>("trainingid");
     createApplication.ApplicantId = await LocalStorage.GetItemAsync<Guid>("Applicant");
	 await ApplicationService.CreateApplicate(createApplication);

	}
}