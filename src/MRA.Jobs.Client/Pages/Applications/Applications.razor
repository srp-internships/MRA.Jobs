@page "/Dashboard/Applications"
@using MRA.BlazorComponents.Dialogs
@using MRA.BlazorComponents.HttpClient.Services
@using MRA.BlazorComponents.Configuration
@using System.Web
@using Blazored.LocalStorage
@using MRA.Identity.Application.Contract.User.Responses
@inject IHttpClientService HttpClientService
@inject ILocalStorageService LocalStorageService
@inject IConfiguration Configuration
<MudHidden Breakpoint="Breakpoint.LgAndUp">
    <MudCard Class="rounded-lg mud-elevation-4">
        <MudCardContent>
            <MudText>
                <b>@ContentService["Applicateons:Filters"]</b>
            </MudText>
            <MudGrid>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField T="string" Value="_searchUsername" ValueChanged="@(OnSearchUsername)"
                                  Placeholder=@ContentService["SignIn:UserName"] Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                                  Class="mt-0" Immediate="true" Variant="Variant.Outlined"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField T="string" Value="_searchVacancyTitle" ValueChanged="@(OnSearchVacancyTitle)"
                                  Placeholder=@ContentService["Dashboard:Appilcations:Vacancy title"] Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                                  Class="mt-0" Immediate="true" Variant="Variant.Outlined"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect T="string" Value="_searchStatusName" Variant="Variant.Outlined"
                               Label=@ContentService["Dashboard:Appilcations:Status name"]
                               ValueChanged="@(value => OnSearchStatusName(value))"
                               Style="margin-top:-1px;">
                        <MudSelectItem Value="string.Empty"/>
                        @foreach (var status in Enum.GetValues(typeof(ApplicationStatusDto.ApplicationStatus)))
                        {
                            <MudSelectItem Value="@status.ToString()"/>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
    <br/>
</MudHidden>
<MudTable ServerData="@(new Func<TableState, Task<TableData<ApplicationListDto>>>(GetApplications))"
          @ref="_table" Hover="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">
            <b>@ContentService["UserButton:Applications"]</b>
        </MudText>
        <MudHidden Breakpoint="Breakpoint.MdAndDown">
            <MudSpacer/>
            <MudItem>
                <MudGrid Style="margin-top:5px;">
                    <MudItem>
                        <MudTextField T="string" Value="_searchUsername" ValueChanged="@(OnSearchUsername)"
                                      Label=@ContentService["SignIn:UserName"] Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                                      Class="mt-0" Immediate="true" Variant="Variant.Outlined"/>
                    </MudItem>
                    <MudItem>
                        <MudTextField T="string" Value="_searchVacancyTitle" ValueChanged="@(OnSearchVacancyTitle)"
                                      Label=@ContentService["Dashboard:Appilcations:Vacancy title"] Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                                      Class="mt-0" Immediate="true" Variant="Variant.Outlined"/>
                    </MudItem>
                    <MudItem>
                        <MudSelect T="string" Value="_searchStatusName" Variant="Variant.Outlined"
                                   Label=@ContentService["Dashboard:Appilcations:Status name"]
                                   ValueChanged="@(value => OnSearchStatusName(value))"
                                   Style="margin-top:-1px;">
                            <MudSelectItem Value="string.Empty"/>
                            @foreach (var status in Enum.GetValues(typeof(ApplicationStatusDto.ApplicationStatus)))
                            {
                                <MudSelectItem Value="@status.ToString()"/>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudHidden>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            @ContentService["Dashboard:Appilcations:Applicant username"]
        </MudTh>
        <MudTh>
            @ContentService["UserManager:FullName"]
        </MudTh>
        <MudTh>
            @ContentService["Profile:DateOfBirth"]
        </MudTh>
        <MudTh>
            @ContentService["SignUp:Phone"]
        </MudTh>
        <MudTh>
            @ContentService["SignUp:Email"]
        </MudTh>
        <MudTh>
            @ContentService["Dashboard:Appilcations:Vacancy title"]
        </MudTh>
        <MudTh>
            @ContentService["Dashboard:Appilcations:Applied at"]
        </MudTh>
        <MudTh>
            @ContentService["Dashboard:Appilcations:Status name"]
        </MudTh>
		<MudTh>
			@ContentService["Header:SendMessage"]
		</MudTh>
        <MudTh>
            @ContentService["Dashboard:Appilcations:Action"]
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=@ContentService["SignUp:UserName"]>@context.ApplicantUsername</MudTd>
        @if (context.User == null)
        {
            <MudTd>
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small"/>
            </MudTd>
            <MudTd>
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small"/>
            </MudTd>
            <MudTd>
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small"/>
            </MudTd>
            <MudTd>
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small"/>
            </MudTd>
        }
        else
        {
            <MudTd DataLabel=@ContentService["UserManager:FullName"]>@context.User.FullName</MudTd>
            <MudTd DataLabel=@ContentService["Profile:DateOfBirth"]>@context.User.DateOfBirth</MudTd>
            <MudTd DataLabel=@ContentService["SignUp:Phone"]>@context.User.PhoneNumber</MudTd>
            <MudTd DataLabel=@ContentService["SignUp:Email"]>@context.User.Email</MudTd>
        }
        <MudTd DataLabel=@ContentService["Internships:Title"]>@context.VacancyTitle</MudTd>
        <MudTd DataLabel=@ContentService["Dashboard:Appilcations:Applied at"]>@context.CreatedAt.ToString("D")</MudTd>
        <MudTd DataLabel=@ContentService["Dashboard:Appilcations:Status name"]>@context.StatusName</MudTd>
		<MudTd>
			@if (context.User.PhoneNumberConfirmed)
			{ 
				<ButtonMessageSender DefaultPhoneNumber=@context.User.PhoneNumber></ButtonMessageSender>
			} 
		</MudTd>
        <MudTd DataLabel=@ContentService["Dashboard:Appilcations:Name"]>
            <MudLink Color="Color.Primary" Href="@($"/ApplicationDetail/{context.Slug}/{context.ApplicantUsername}")">more</MudLink>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>@ContentService["UserManager:Nomatchingrecords"]</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@ContentService["UserManager:Loading"]</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager CurrentPage="CurrentPage" Count="Table.TotalItems" OnPageChanged="OnPageChanged" OnRowsPerPageChanged="OnRowsPerPageChanged"/>
    </PagerContent>
</MudTable>

@code {

    private MudTable<ApplicationListDto> _table;
    private string _searchUsername = "";
    private string _searchVacancyTitle = "";
    private string _searchStatusName = "";

    private async Task OnSearchUsername(string text)
    {
        _searchUsername = text;
        await _table.ReloadServerData();
    }

    private async Task OnSearchVacancyTitle(string text)
    {
        _searchVacancyTitle = text;
        await _table.ReloadServerData();
    }

    private async Task OnSearchStatusName(string text)
    {
        _searchStatusName = text;
        await _table.ReloadServerData();
    }

    protected override async Task OnInitializedAsync()
    {
        var query = await LocalStorageService.GetItemAsync<PagedListQuery<ApplicationListDto>>("applicationsFilterState");
        if (query != null)
        {
            if (query.Filters == null) return;
            var filters = HttpUtility.UrlDecode(query.Filters).Split(',');
            var filterDict = new Dictionary<string, string>();
            foreach (var filter in filters)
            {
                var parts = filter.Split('@', '=', ' ');
                if (parts.Length == 3)
                {
                    filterDict[parts[0]] = parts[2];
                }
            }

            _searchUsername = filterDict.GetValueOrDefault("ApplicantUsername");
            _searchVacancyTitle = filterDict.GetValueOrDefault("Vacancy.Title");
            _searchStatusName = filterDict.TryGetValue("Status",
                out _searchStatusName)
                ? Enum.GetName(typeof(ApplicationStatusDto.ApplicationStatus),
                    int.Parse(_searchStatusName))
                : "";

            await _table.ReloadServerData();
        }
    }

    private async Task<TableData<ApplicationListDto>> GetApplications(TableState state)
    {
        var query = new PagedListQuery<ApplicationListDto>()
        {
            Page = state.Page + 1,
            PageSize = state.PageSize,
            Filters = GetFilters()
        };

        var users = new List<UserResponse>();
        try
        {
            var response2 = await HttpClientService.GetFromJsonAsync<PagedList<UserResponse>>(Configuration.GetIdentityUrl("user"));
            if (response2.Success)
                users = response2.Result.Items;
        }   
        catch (Exception ex)
        {
           Console.WriteLine(@$"eroor: {ex}");
        }

        var response = await HttpClientService.GetFromJsonAsync<PagedList<ApplicationListDto>>(Configuration.GetJobsUrl("applications"), query);
        if (response.Success)
        {
            await LocalStorageService.SetItemAsync("applicationsFilterState", query);
            var items = response.Result.Items.Select(application =>
            {
                application.User = users.FirstOrDefault(u => u.UserName == application.ApplicantUsername);
                return application;
            }).ToList();
            return new TableData<ApplicationListDto>()
            {
                TotalItems = response.Result.TotalCount,
                Items = items
            };
        }

        await LocalStorageService.SetItemAsync("applicationsFilterState", query);
        return new TableData<ApplicationListDto>()
        {
            TotalItems = _table.TotalItems,
            Items = _table.Items
        };
    }

    private string GetFilters()
    {
        var filters = new List<string>();
        if (!string.IsNullOrEmpty(_searchUsername)) filters.Add($"ApplicantUsername@={_searchUsername}");
        if (!string.IsNullOrEmpty(_searchVacancyTitle)) filters.Add($"Vacancy.Title@={_searchVacancyTitle}");
        if (Enum.TryParse(typeof(ApplicationStatusDto.ApplicationStatus), _searchStatusName, out var statusValue))
            filters.Add($"Status=={(int)statusValue}");

        return filters.Any() ? HttpUtility.UrlEncode(string.Join(",", filters)) : null;
    }
}