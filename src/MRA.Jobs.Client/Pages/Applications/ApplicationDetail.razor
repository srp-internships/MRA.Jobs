@page "/ApplicationDetail/{Slug}/{ApplicationUserName}"
@page "/ApplicationDetail/{Slug}"
@using MRA.Jobs.Application.Contracts.Applications.Commands.AddNote
@using MRA.Identity.Application.Contract.Profile.Responses
@using MRA.Jobs.Client.Services.Profile
@using System.Net
@using Microsoft.IdentityModel.Tokens
@using MRA.BlazorComponents.Configuration
@using MRA.Jobs.Client.Identity

@inject IApplicationService ApplicationService
@inject IUserProfileService UserProfileService
@inject IConfiguration configuration

<MudGrid>
    <MudItem xs="12">
        <MudCard>
            @if (_application == null)
            {
                <div style="text-align: center;">
                    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"/>
                </div>
            }
            else
            {
                <MudCardContent>
                    <MudText Typo="Typo.h6" Style="color: grey">
                        <b>@ContentService["VacancyApplication:Cover Letter"]</b>
                    </MudText>
                    @_application.CoverLetter
                    <MudList>
                        @if (_application.VacancyResponses.Any())
                        {
                            <MudListSubheader>
                                @ContentService["VacancyApplication:Questions"]
                            </MudListSubheader>
                            @foreach (var response in _application.VacancyResponses)
                            {
                                <MudListItem Icon="@Icons.Material.Filled.QuestionMark" IconColor="Color.Info" Text="@response.VacancyQuestion.Question">
                                </MudListItem>
                                <MudListItem Icon="@Icons.Material.Filled.QuestionAnswer" IconColor="Color.Info">
                                    @response.Response
                                </MudListItem>
                            }
                        }
                    </MudList>
                    <MudGrid>
                        <MudItem xs="6">
                            <MudText> @ContentService["Applicateons:Status"]: <b>@(((ApplicationStatusDto.ApplicationStatus)_application.StatusId).ToString())</b></MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudButton Variant="Variant.Filled" Color="Color.Surface" style="margin-bottom: 10px" Href="@_cvUrl">
                                <MudIcon Icon="@Icons.Material.Filled.Download"></MudIcon>@ContentService["Dashboard:Appilcations:More:CVButton"]
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                    <CascadingAuthenticationState>
                        <AuthorizeView Policy="@ApplicationPolicies.Reviewer" Context="_">
                            <Authorized>
                                <MudSelect T="string" Label=@ContentService["Applicateons:Selectstatus"] AnchorOrigin="Origin.BottomCenter" @bind-Value="@SelectedStatus">
                                    @foreach (var status in Enum.GetValues(typeof(ApplicationStatusDto.ApplicationStatus)))
                                    {
                                        <MudSelectItem Value="@status.ToString()"/>
                                    }
                                </MudSelect>
                                <ProgressTaskButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" Function="@ChangeStatus">
                                    <MudText>
                                        @ContentService["Applicateons:Changestatus"]
                                    </MudText>
                                    }
                                </ProgressTaskButton>

                            </Authorized>
                        </AuthorizeView>
                    </CascadingAuthenticationState>
                </MudCardContent>
            }
        </MudCard>
    </MudItem>
    <CascadingAuthenticationState>
        <AuthorizeView Policy="@ApplicationPolicies.Reviewer">
            <Authorized>
                <MudItem xs="12" lg="6">

                    <MudCard>
                        <MudCardContent>
                            <MudText Style="color: grey" Typo="Typo.h6">
                                <b>@ContentService["Applicateons:Notes"]</b>
                            </MudText>
                            @if (_application == null)
                            {
                                <div style="text-align: center;">
                                    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"/>
                                </div>
                            }
                            else
                            {
                                <div style="align-content: center; align-items: center;">
                                    <MudTimeline TimelinePosition="TimelinePosition.Start">
                                        @foreach (var item in _application.History)
                                        {
                                            <MudTimelineItem Size="Size.Medium" Color="Color.Info" Elevation="25">
                                                <MudCard Elevation="25">
                                                    <MudCardContent>

                                                        <MudStack Row="true">
                                                            <MudLink Href="@($"user/{item.CreateBy}")">
                                                                <MudStack Row="true">
                                                                    <MudAvatar Size="Size.Small">
                                                                        @item.CreateBy[0].ToString().ToUpper()
                                                                    </MudAvatar>
                                                                    <MudText Color="Color.Primary">
                                                                        <b>@item.CreateBy</b>
                                                                    </MudText>
                                                                </MudStack>
                                                            </MudLink>
                                                            <MudSpacer/>
                                                            <MudText Typo="Typo.body2">@item.Time</MudText>
                                                        </MudStack>


                                                        <MudText>@item.Note</MudText>
                                                    </MudCardContent>
                                                </MudCard>
                                            </MudTimelineItem>
                                        }
                                    </MudTimeline>
                                </div>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" lg="6">
                    <MudCard>
                        <EditForm Model="@_addNote" Context="_" OnInvalidSubmit="@OnAddNoteAsync">
                            <MudCardHeader>
                                <MudText>@ContentService["Applicateons:AddNote"]</MudText>
                            </MudCardHeader>
                            <MudCardContent>
                                <FluentValidationValidator/>
                                <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="@_addNote.Note" Lines="5"
                                              For="@(() => _addNote.Note)"/>
                            </MudCardContent>
                            <MudCardActions>
                                <ProgressTaskButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary" Function="OnAddNoteAsync">
                                    <MudText>
                                        <MudText>@ContentService["Applicateons:Add"]</MudText>
                                    </MudText>
                                </ProgressTaskButton>
                            </MudCardActions>
                        </EditForm>
                    </MudCard>
                </MudItem>
            </Authorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
</MudGrid>

@code {

    private AddNoteToApplicationCommand _addNote = new();
    private string SelectedStatus { get; set; }


    [Parameter] public string Slug { get; set; }
    [Parameter] public string ApplicationUserName { get; set; }
    private string _cvUrl;

    private UpdateApplicationStatusCommand _applicationStatusCommand;
    private UserProfileResponse _applicant;
    private ApplicationDetailsDto _application;

    private async Task LoadApplication()
    {
        _application = await ApplicationService.GetApplicationDetails(Slug);
        StateHasChanged();
        if (_application.History.Any())
            _application.History = _application.History.OrderByDescending(h => h.Time).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        _applicant = await UserProfileService.Get(ApplicationUserName);
        await LoadApplication();
        _cvUrl = $"{configuration.GetJobsUrl()}applications/downloadCv/{WebUtility.UrlEncode(_application.CV)}";

        SelectedStatus = ((ApplicationStatusDto.ApplicationStatus)_application.StatusId).ToString();
        StateHasChanged();
    }

    private async Task OnAddNoteAsync()
    {
        if (_addNote.Note.IsNullOrEmpty()) return;

        try
        {
            _addNote.Slug = Slug;
            var response = await ApplicationService.AddNote(_addNote);
            _application.History.Add(response);
            _application.History = _application.History.OrderByDescending(h => h.Time).ToList();
            _addNote = new AddNoteToApplicationCommand();
        }
        catch (Exception)
        {
            // ignored
        }
    }

    private async Task ChangeStatus()
    {
        if (Enum.TryParse(SelectedStatus, out ApplicationStatusDto.ApplicationStatus selectedEnumStatus))
        {
            _applicationStatusCommand = new UpdateApplicationStatusCommand
            {
                ApplicantUserName = _applicant.UserName,
                Slug = Slug,
                StatusId = (int)selectedEnumStatus
            };
            var response = await ApplicationService.UpdateStatus(_applicationStatusCommand);
            if (response)
            {
                await LoadApplication();
                StateHasChanged();
                Snackbar.Add("Status updated successfully.", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to update status", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Invalid status selected.", Severity.Error);
        }
    }

}