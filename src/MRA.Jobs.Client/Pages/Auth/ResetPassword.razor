@page "/resetPassword"

@using MRA.Identity.Application.Contract.User.Commands.LoginUser;
@using MRA.Identity.Application.Contract.User.Commands.ResetPassword;
@using MRA.Identity.Application.Contract.User.Queries.GetUserNameByPhoneNymber;
@using MRA.Identity.Application.Contract.User.Queries;
@using MRA.Jobs.Client.Identity;
@using MRA.Jobs.Client.Services.Auth;
@using MRA.Jobs.Client.Services.Profile;
@using MudBlazor
@using System.ComponentModel.DataAnnotations;

@inject IUserProfileService UserProfileService
@inject IAuthService AuthService
@inject ISnackbar Snackbar


<div class="container">
	<div class="row" style="margin-top:20px;">
		<div Class="d-flex align-center justify-center mud-width-full py-8">

			<MudGrid>
				<MudItem xs="1" sm="3"></MudItem>
				<MudItem xs="12" sm="6">
					<h4>ResetPassword</h4>
					@if (!codeSent)
					{
						<EditForm Model="phoneNumberQuery" OnInvalidSubmit="SendCode">
							<FluentValidationValidator />
							<MudCard>
								<MudCardHeader></MudCardHeader>
								<MudCardContent>
									<MudTextField Label="Phone Number" @bind-Value="phoneNumberQuery.PhoneNumber" Variant="@Variant.Filled" Clearable
													  For="@(()=>phoneNumberQuery.PhoneNumber)" />
									</MudCardContent>
									<MudCardActions>
										<MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit"
												   OnClick="SendCode">
											@if (_processing)
										{
											<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
											<MudText Class="ms-2">Processing</MudText>
										}
										else
										{
											<MudText>Send confirmation code</MudText>
										}
									</MudButton>
								</MudCardActions>
							</MudCard>
						</EditForm>
					}

					@if (codeSent && !codeConfirm)
					{
						<MudCard>
							<MudCardHeader>
								<CardHeaderContent>
									<center>
										<MudText>UserName: <b>@userName</b></MudText>
									</center>
								</CardHeaderContent>
							</MudCardHeader>
							<MudCardContent>
								<MudTextField Label="Code" @bind-Value="code" Variant="@Variant.Filled" Clearable />

									<br />
									<br />
									<MudCardActions>

										<MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="ConfirmCode">
											@if (_processing)
										{
											<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
											<MudText Class="ms-2">Processing</MudText>
										}
										else
										{
											<MudText>Apply</MudText>
										}
									</MudButton>
									<MudButton Variant="Variant.Text" Color="Color.Info" FullWidth="true" OnClick="SendCode" Disabled="@isResendDisabled">
										@if (_processing)
										{
											<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
											<MudText Class="ms-2">Processing</MudText>
										}
										else
										{
											<MudText>Resend code</MudText>
										}
									</MudButton>

								</MudCardActions>
								<div>
									<MudText Typo="Typo.body2" Color="Color.Default">@timeLeft seconds left to resend the code.</MudText>

								</div>
								</MudCardContent>
								

						</MudCard>
					}
					@if (codeSent && codeConfirm)
					{
						<EditForm Model="model">
							<FluentValidationValidator />
							<MudCard>
								<MudCardHeader>
									<CardHeaderContent>
										<center>
											<MudText>UserName: <b>@userName</b></MudText>
										</center>
									</CardHeaderContent>
								</MudCardHeader>
								<MudCardContent>
									<MudTextField @bind-Value="@model.NewPassword" Label="New Password" Variant="Variant.Outlined"
												  InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
												  OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" For="@(()=>model.NewPassword)" />
									<MudTextField @bind-Value="@model.ConfirmPassword" Label="Confirm Password" Variant="Variant.Outlined"
												  InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
												  OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" For="@(()=>model.ConfirmPassword)" />
								</MudCardContent>
								<MudCardActions>
									<MudButton Color="Color.Primary" Variant="Variant.Filled"
											   ButtonType="ButtonType.Submit" OnClick="SubmitNewPassword">
										@if (_processing)
										{
											<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
											<MudText Class="ms-2">Processing</MudText>
										}
										else
										{
											<MudText> Change password</MudText>
										}
									</MudButton>
								</MudCardActions>
							</MudCard>
						</EditForm>
					}
				</MudItem>
			</MudGrid>
		</div>
	</div>
</div>


@code {
	private bool _processing = false;
	public class NewPass
	{
		[Required]
		[MinLength(8)]
		public string NewPassword { get; set; }

		[Required]
		[Compare(nameof(NewPassword))]
		public string ConfirmPassword { get; set; }
	}



	private IsAvailableUserPhoneNumberQuery phoneNumberQuery = new IsAvailableUserPhoneNumberQuery();
	private NewPass model = new NewPass();
	private bool codeSent = false;
	private bool codeConfirm = false;
	private bool isResendDisabled = true;
	private int timeLeft = 60;
	private int? code;
	bool isShow;
	InputType PasswordInput = InputType.Password;
	string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
	private string userName;

	void ButtonTestclick()
	{
		@if (isShow)
		{
			isShow = false;
			PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
			PasswordInput = InputType.Password;
		}
		else
		{
			isShow = true;
			PasswordInputIcon = Icons.Material.Filled.Visibility;
			PasswordInput = InputType.Text;
		}
	}

	private async Task SendCode()
	{
		_processing = true;
		StateHasChanged();
		try
		{
			var userNameResponse = await AuthService.IsAvailableUserPhoneNumber(phoneNumberQuery);
			if (!userNameResponse.IsSuccessStatusCode)
			{
				Snackbar.Add((await userNameResponse.Content
					.ReadFromJsonAsync<CustomProblemDetails>()).Detail,
					Severity.Error);
				return;
			}

			userName = await userNameResponse.Content.ReadAsStringAsync();

			bool response = await UserProfileService.SendConfirmationCode(phoneNumberQuery.PhoneNumber);
			if (response)
			{
				_processing = false;
				codeSent = true;
				isResendDisabled = true;
				timeLeft = 60;
				await StartCountdown();
			}
		}
		catch (Exception ex)
		{
			ServerNotResponding();
		}
		finally
		{
			_processing = false;
			StateHasChanged();
		}
	}

	private async Task ConfirmCode()
	{
		_processing = true;
		StateHasChanged();
		try
		{
			SmsVerificationCodeStatus response = await UserProfileService.CheckConfirmationCode(phoneNumberQuery.PhoneNumber, code);
			if (response==SmsVerificationCodeStatus.CodeVerifyFailure)
			{
				Snackbar.Add("Code is incorrect or expired", MudBlazor.Severity.Error);
			}
			else
			{
				_processing = false;
				codeConfirm = true;
			}
		}
		catch (Exception)
		{
			ServerNotResponding();
		}
		finally
		{
			_processing = false;
			StateHasChanged();
		}

	}

	private void ServerNotResponding()
	{
		Snackbar.Add("Server is not responding, please try later", MudBlazor.Severity.Error);
	}

	private async Task StartCountdown()
	{
		for (timeLeft = 60; timeLeft > 0; timeLeft--)
		{
			await Task.Delay(1000);
			StateHasChanged();
		}
		isResendDisabled = false;

	}



	private async Task SubmitNewPassword()
	{
		_processing = true;
		StateHasChanged();
		try
		{
			var response = await AuthService.ResetPassword(
				new ResetPasswordCommand()
					{
						Code = code.HasValue ? code.Value : 0,
						Password = model.NewPassword,
						PhoneNumber = phoneNumberQuery.PhoneNumber
					}
			);

			if (!response.IsSuccessStatusCode)
			{
				Snackbar.Add((await response.Content.ReadFromJsonAsync<CustomProblemDetails>()).Detail);
				return;
			}

			Snackbar.Add("Reset password successfully", Severity.Success);
			var loginMessage = await AuthService.LoginUserAsync(new LoginUserCommand
				{
					Username = userName,
					Password = model.NewPassword
				});
			if (loginMessage != "" || loginMessage != null)
			{
				Snackbar.Add(loginMessage, MudBlazor.Severity.Error);
				return;
			}
		}
		catch (Exception)
		{
			ServerNotResponding();
		}
		finally
		{
			_processing = false;
			StateHasChanged();
		}
	}
}
