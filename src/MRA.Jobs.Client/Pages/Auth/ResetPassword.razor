@page "/resetPassword"

@using MRA.Jobs.Client.Services.Profile;
@using MudBlazor
@using System.ComponentModel.DataAnnotations;
@inject IUserProfileService UserProfileService

<div class="container">
	<div class="row" style="margin-top:20px;">
		<div Class="d-flex align-center justify-center mud-width-full py-8">

			<MudGrid>
				<MudItem xs="1" sm="3"></MudItem>
				<MudItem xs="12" sm="6">
					<h4>ResetPassword</h4>
					@if (!codeSent)
					{
						<MudCard>
							<MudCardHeader></MudCardHeader>
							<MudCardContent>
								<MudTextField Label="Phone Number" @bind-Value="phoneNumber" Variant="@Variant.Filled" Clearable />
								</MudCardContent>
								<MudCardActions>
									<MudButton Variant="Variant.Text" Color="Color.Info" OnClick="SendCode">Send confirmation code</MudButton>
								</MudCardActions>
							</MudCard>
					}

					@if (codeSent)
					{
						<MudCard>
							<MudCardHeader></MudCardHeader>
							<MudCardContent>
								<MudTextField Label="Code" @bind-Value="Code" Variant="@Variant.Filled" Clearable />
									<p>@timeLeft seconds left to resend the code.</p>
								</MudCardContent>
								<MudCardActions>
									<MudButton Variant="Variant.Text" Color="Color.Info" OnClick="SendCode" Disabled="@isResendDisabled">Resend code</MudButton>
								</MudCardActions>
							</MudCard>
					}
					@if (codeSent && codeConfirm)
					{
						<EditForm Model="model" OnInvalidSubmit="SubmitNewPassword">
							<FluentValidationValidator />
							<MudCard>
								<MudCardHeader></MudCardHeader>
								<MudCardContent>
									<MudTextField @bind-Value="@model.NewPassword" Label="New Password" Variant="Variant.Outlined"
												  InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
												  OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" For="@(()=>model.NewPassword)" />
									<MudTextField @bind-Value="@model.ConfirmPassword" Label="Confirm Password" Variant="Variant.Outlined"
												  InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
												  OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" For="@(()=>model.ConfirmPassword)" />
								</MudCardContent>
								<MudCardActions>
									<MudButton Color="Color.Primary" Variant="Variant.Filled"
											   ButtonType="ButtonType.Submit">Change password</MudButton>
								</MudCardActions>
							</MudCard>
						</EditForm>
					}
				</MudItem>
			</MudGrid>
		</div>
	</div>
</div>
@code {

	public class NewPass
	{
		[Required]
		[MinLength(8)]
		public string NewPassword { get; set; }

		[Required]
		[Compare(nameof(NewPassword))]
		public string ConfirmPassword { get; set; }
	}


	private NewPass model = new NewPass();
	private string phoneNumber = "+992";
	private bool codeSent = false;
	private bool codeConfirm = false;
	private bool isResendDisabled = true;
	private int timeLeft = 60;
	private string Code;
	bool isShow;
	InputType PasswordInput = InputType.Password;
	string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

	void ButtonTestclick()
	{
		@if (isShow)
		{
			isShow = false;
			PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
			PasswordInput = InputType.Password;
		}
		else
		{
			isShow = true;
			PasswordInputIcon = Icons.Material.Filled.Visibility;
			PasswordInput = InputType.Text;
		}
	}

	private async Task SendCode()
	{
		bool response = await UserProfileService.SendConfirmationCode(phoneNumber);
		if (response)
		{
			codeSent = true;
			await StartCountdown();
		}
	}

	private async Task StartCountdown()
	{
		for (timeLeft = 60; timeLeft > 0; timeLeft--)
		{
			await Task.Delay(1000);
			StateHasChanged();
		}
		isResendDisabled = false;

	}



	private async Task SubmitNewPassword()
	{

	}
}
