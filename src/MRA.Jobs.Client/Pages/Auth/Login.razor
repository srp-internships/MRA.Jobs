@page "/sign-in"
@using MRA.Identity.Application.Contract.User.Commands.LoginUser
@using MRA.Jobs.Client.Services.Auth;
@using Microsoft.AspNetCore.WebUtilities;
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="container">
	<div class="row justify-content-center">
		<div class="col-md-4">
			<h2>Sign In</h2>
			<EditForm Model="user" OnValidSubmit="HandleValidSubmit">
				<FluentValidationValidator />

				<div class="form-group">
					<label for="username">User Name</label>
					<InputText id="username" class="form-control" @bind-Value="user.Username" />

					<small><ValidationMessage For="@(()=>user.Username)" class="text-danger" /></small>

				</div>

				<div class="form-group">
					<label for="password">Password</label>
					<InputText id="password" type="password" class="form-control" @bind-Value="user.Password" />

					<small><ValidationMessage For="@(()=>user.Password)" class="text-danger" /></small>

				</div>

				<button type="submit" class="btn btn-primary" style="width:100%">Sign In</button>

			</EditForm>
			@if (errorMassage != null)
			{
				<div class="alert alert-warning alert-dismissible fade show" role="alert">
					@errorMassage
					<button type="button" class="close" data-dismiss="alert" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
			}
		</div>

	</div>
</div>

@code {
    private string returnUrl = string.Empty;
    LoginUserCommand user = new LoginUserCommand();

    private string errorMassage = null;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            var routes = url.ToString().Split("|");
            returnUrl = $"{routes[0]}/{routes[1]}";
        }
    }

	private async Task HandleValidSubmit()
	{
		errorMassage = await AuthService.LoginUserAsync(user);
        NavigationManager.NavigateTo(returnUrl);
	}
}