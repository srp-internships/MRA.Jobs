@page "/sign-in"
@using MRA.Identity.Application.Contract.User.Commands;
@using MRA.Jobs.Client.Services.Auth;
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container">
	<div class="row justify-content-center">
		<div class="col-md-4">
			<h2>Sign In</h2>
			<EditForm Model="user" OnValidSubmit="HandleValidSubmit">
				<DataAnnotationsValidator />
				<ValidationSummary />

				<div class="form-group">
					<label for="username">User Name</label>
					<InputText id="username" class="form-control" @bind-Value="user.Username" />
				</div>

				<div class="form-group">
					<label for="password">Password</label>
					<InputText id="password" type="password" class="form-control" @bind-Value="user.Password" />
				</div>

				<button type="submit" class="btn btn-primary">Войти</button>
			</EditForm>
		</div>
	</div>
</div>

@code {

	LoginUserCommand user = new LoginUserCommand();

	private  async Task HandleValidSubmit()
	{
		var result = await AuthService.LoginUserAsync(user);
		if (result != null)
		{
			await LocalStorage.SetItemAsync("authToken", result.AccessToken);
			await AuthenticationStateProvider.GetAuthenticationStateAsync();
			NavigationManager.NavigateTo("/");
		}
	}

}