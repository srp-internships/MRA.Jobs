@page "/sign-up"
@using MRA.Identity.Application.Contract.User.Commands.RegisterUser
@using MRA.Identity.Application.Contract.User.Queries;
@using MRA.Identity.Application.Contract.User.Queries.CheckUserDetails
@using MRA.Identity.Application.Contract.User.Responses
@using MRA.Jobs.Client.Components.Auth
@using MRA.Jobs.Client.Services.Auth
@using MRA.Jobs.Client.Services.Profile;
@using System.Globalization;

@inject ISnackbar Snackbar
@inject IUserProfileService UserProfileService
@inject IAuthService AuthService

<div class="container">
	<div class="row">
		<div Class="d-flex align-center justify-center mud-width-full py-8">
			<div class="col-md-6 mb-3">
				@if (_step == 0)
				{
					<MudCard>
						<MudCardHeader>
							<CardHeaderContent>
								<MudText Typo="Typo.h4">
									<b>Sign Up</b>
								</MudText>
								<small>Do you have an account? Go to <a href="sign-in">Sign In</a></small>
							</CardHeaderContent>
						</MudCardHeader>
						<MudCardContent>
							<EditForm Model="@_registerUser" OnInvalidSubmit="SendCode" style="margin-top: 10%;margin-bottom: 0">
								<FluentValidationValidator @ref="_fluentValidationValidator" />
								<MudTextField Label="First name" HelperText="Enter your first name"
											  @bind-Value="_registerUser.FirstName" For="@(() => _registerUser.FirstName)" InputType="InputType.Text"
											  OnBlur="@(_ => _registerUser.FirstName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(_registerUser.FirstName))" />

								<MudTextField Label="Last name" HelperText="Enter your last name"
											  @bind-Value="_registerUser.LastName" For="@(() => _registerUser.LastName)" InputType="InputType.Text"
											  OnBlur="@(_ => _registerUser.LastName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(_registerUser.LastName))" />
								<MudTextField Label="Email" Class="mt-3"
											  @bind-Value="_registerUser.Email" For="@(() => _registerUser.Email)" InputType="InputType.Email"
											  OnBlur="CheckUserName" />
								@if (_registerUser.Email != "")
								{
									@if (!_userDetailsResponse.IsEmailTaken)
									{
										<MudText Typo="Typo.body2" Color="Color.Success">
											<MudIcon Icon="@Icons.Material.Filled.Check"></MudIcon>
											Email: <b>@_registerUser.Email</b> is available
										</MudText>
									}
									else
									{
										<MudText Typo="Typo.body2" Color="Color.Error">
											Email: <b>@_registerUser.Email</b> is not available
										</MudText>
									}
								}
								<MudTextField Label="Phone" HelperText="Enter your phone number" Class="mt-3"
											  @bind-Value="_registerUser.PhoneNumber" For="@(() => _registerUser.PhoneNumber)" InputType="InputType.Telephone"
											  OnBlur="CheckUserName" />
								@if (_registerUser.PhoneNumber != "")
								{
									@if (!_userDetailsResponse.IsPhoneNumberTaken)
									{
										<MudText Typo="Typo.body2" Color="Color.Success">
											<MudIcon Icon="@Icons.Material.Filled.Check"></MudIcon>
											PhoneNumber: <b>@_registerUser.PhoneNumber</b> is available
										</MudText>
									}
									else
									{
										<MudText Typo="Typo.body2" Color="Color.Error">
											PhoneNumber: <b>@_registerUser.PhoneNumber</b> is not available
										</MudText>
									}

								}
								<MudTextField Label="Username"
											  @bind-Value="_registerUser.Username" For="@(() => _registerUser.Username)"
											  OnBlur="CheckUserName" />
								@if (_processing2)
								{
									<MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
								}
								@if (_registerUser.Username != "")
								{
									@if (!_userDetailsResponse.IsUserNameTaken)
									{
										<MudText Typo="Typo.body2" Color="Color.Success">
											<MudIcon Icon="@Icons.Material.Filled.Check"></MudIcon>
											UserName: <b>@_registerUser.Username</b> is available
										</MudText>
									}
									else
									{
										<MudText Typo="Typo.body2" Color="Color.Error">
											UserName: <b>@_registerUser.Username</b> is not available
										</MudText>
									}

								}
								<MudTextField Label="Password" HelperText="Password" Class="mt-3" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" InputType="@PasswordInput" Adornment="Adornment.End"
											  @bind-Value="_registerUser.Password" For="@(() => _registerUser.Password)" />

							</EditForm>
						</MudCardContent>
						<MudCardActions>
							<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" OnClick="SendCode" Color="Color.Primary" Class="ml-auto">
								@if (_processing)
								{
									<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
									<MudText Class="ms-2">Processing</MudText>
								}
								else
								{
									<MudText>Next</MudText>
								}
							</MudButton>
						</MudCardActions>
						<ExternalLoginCard Title="Continue With" />
					</MudCard>
				}
				@if (_step == 1)
				{
					<MudCard>
						<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="Back"></MudIconButton>
						<MudCardHeader>
							<CardHeaderContent>
								<MudText>
									We have sent a confirmation code to this number: <b>@_registerUser.PhoneNumber</b>.
									Please confirm your identity
								</MudText>
							</CardHeaderContent>
						</MudCardHeader>
						<MudCardContent>
							<MudTextField Label="Code" @bind-Value="_code" Variant="@Variant.Filled" Clearable />
								<br />
								<br />
								<MudCardActions>
									<MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="ConfirmCode">
										@if (_processing)
									{
										<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
										<MudText Class="ms-2">Processing</MudText>
									}
									else
									{
										<MudText>Apply</MudText>
									}
								</MudButton>
								<MudButton Variant="Variant.Text" Color="Color.Info" FullWidth="true" OnClick="SendCode" Disabled="@_isResendDisabled">
									@if (_processing)
									{
										<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
										<MudText Class="ms-2">Processing</MudText>
									}
									else
									{
										<MudText>Resend code</MudText>
									}
								</MudButton>

							</MudCardActions>
							<div>
								<MudText Typo="Typo.body2" Color="Color.Default">@_timeLeft seconds left to resend the code.</MudText>
							</div>
						</MudCardContent>
					</MudCard>
				}
			</div>
		</div>
	</div>
</div>

@code {
	private readonly RegisterUserCommand _registerUser = new();
	private FluentValidationValidator _fluentValidationValidator;
	private int _step;
	private bool _processing;
	private bool _processing2;

	bool isShow;
	InputType PasswordInput = InputType.Password;
	string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

	void Back()
	{
		_step = 0;
		StateHasChanged();
	}

	void ButtonTestclick()
	{
		@if (isShow)
		{
			isShow = false;
			PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
			PasswordInput = InputType.Password;
		}
		else
		{
			isShow = true;
			PasswordInputIcon = Icons.Material.Filled.Visibility;
			PasswordInput = InputType.Text;
		}
	}

	private bool _isResendDisabled = true;
	private int _timeLeft = 60;
	private int? _code;

	private int _isAvailable = -1;


	private async Task SendCode()
	{
		_processing = true;
		StateHasChanged();
		if (!(await _fluentValidationValidator!.ValidateAsync()) || _isAvailable == 0)
		{
			_processing = false;
			return;
		}
		try
		{
			var response = await UserProfileService.SendConfirmationCode(_registerUser.PhoneNumber);

			if (response)
			{
				_processing = false;
				_step = 1;
				_isResendDisabled = true;
				_timeLeft = 60;
				await StartCountdown();
			}
		}
		catch (Exception)
		{
			ServerNotResponding();
		}
		finally
		{
			_processing = false;
			StateHasChanged();
		}
	}

	private void ServerNotResponding()
	{
		Snackbar.Add("Server is not responding, please try later", Severity.Error);
	}

	private async Task StartCountdown()
	{
		for (_timeLeft = 60; _timeLeft > 0; _timeLeft--)
		{
			await Task.Delay(1000);
			StateHasChanged();
		}
		_isResendDisabled = false;
	}

	private async Task ConfirmCode()
	{
		_processing = true;
		StateHasChanged();
		try
		{
			SmsVerificationCodeStatus response = await UserProfileService.CheckConfirmationCode(_registerUser.PhoneNumber, _code);
			if (response == SmsVerificationCodeStatus.CodeVerifyFailure)
			{
				Snackbar.Add("Code is incorrect or expired", Severity.Error);
			}
			else
			{
				_processing = false;
				_registerUser.PhoneNumberConfirmed = true;
				var error = await AuthService.RegisterUserAsync(_registerUser);
				Snackbar.Add(error, Severity.Error);
			}
		}
		catch (Exception)
		{
			ServerNotResponding();
		}
		finally
		{
			_processing = false;
			StateHasChanged();
		}
	}

	private UserDetailsResponse _userDetailsResponse = new();
	private async Task CheckUserName()
	{
		StateHasChanged();
		try
		{
			var query = new CheckUserDetailsQuery()
				{
					UserName = _registerUser.Username,
					PhoneNumber = _registerUser.PhoneNumber,
					Email = _registerUser.Email
				};
			var result = await AuthService.CheckUserDetails(query);
			if (result.IsSuccessStatusCode)
			{
				_userDetailsResponse = await result.Content.ReadFromJsonAsync<UserDetailsResponse>();
			}
		}
		catch (Exception)
		{
			_isAvailable = -1;
			ServerNotResponding();
		}
		_processing2 = false;
		StateHasChanged();
	}

}