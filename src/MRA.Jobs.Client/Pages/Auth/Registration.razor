@page "/sign-up"

@using System.ComponentModel.DataAnnotations
@using FluentValidation;
@using MRA.Identity.Application.Contract.User.Commands.RegisterUser
@using MRA.Identity.Application.Contract.User.Queries.CheckUserName;
@using MRA.Identity.Application.Contract.User.Queries.GetUserNameByPhoneNymber;
@using MRA.Identity.Application.Contract.User.Queries;
@using MRA.Jobs.Client.Components.Auth
@using MRA.Jobs.Client.Identity;
@using MRA.Jobs.Client.Services.Auth
@using MRA.Jobs.Client.Services.Profile;
@using System.Globalization;

@inject ISnackbar Snackbar
@inject IUserProfileService UserProfileService
@inject IAuthService AuthService

<div class="container">
    <div class="row">
        <div Class="d-flex align-center justify-center mud-width-full py-8">
            <div class="col-md-6 mb-3">
                @if (_step == 0)
                {

                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h4">
                                    <b>Sign Up</b>
                                </MudText>
                                <small>Do you have an account? Go to <a href="sign-in">Sign In</a></small>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <EditForm Model="@registerUser" OnInvalidSubmit="SendCode" style="margin-top: 10%;margin-bottom: 0%">
                                <FluentValidationValidator /> 
                                <MudTextField Label="First name" HelperText="Enter your first name"
                                @bind-Value="registerUser.FirstName" For="@(() => registerUser.FirstName)" InputType="InputType.Text"
                                              OnBlur="@(_ => registerUser.FirstName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(registerUser.FirstName))" />

                                <MudTextField Label="Last name" HelperText="Enter your last name"
                                @bind-Value="registerUser.LastName" For="@(() => registerUser.LastName)" InputType="InputType.Text"
                                              OnBlur="@(_ => registerUser.LastName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(registerUser.LastName))" />
                                <MudTextField Label="Email" Class="mt-3"
                                @bind-Value="registerUser.Email" For="@(() => registerUser.Email)" InputType="InputType.Email" />

                                <MudTextField Label="Phone" HelperText="Enter your phone number" Class="mt-3"
                                @bind-Value="registerUser.PhoneNumber" For="@(() => registerUser.PhoneNumber)" InputType="InputType.Telephone" />

                                <MudTextField Label="Username"
                                @bind-Value="registerUser.Username" For="@(()=>registerUser.Username)"
                                              OnBlur="CheckUserName" />
                                @if (_processing2)
                                {
                                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                                }
                                @if (_isAvailable == 1)
                                {
                                    <MudText Typo="Typo.body2" Color="Color.Success">
                                        <MudIcon Icon="@Icons.Material.Filled.Check"></MudIcon>
                                        UserName: <b>@registerUser.Username</b> is available
                                    </MudText>
                                }
                                @if (_isAvailable == 0)
                                {
                                    <MudText Typo="Typo.body2" Color="Color.Error">
                                        UserName: <b>@registerUser.Username</b> is not available
                                    </MudText>
                                }

                                <MudTextField Label="Password" HelperText="Password" Class="mt-3"
                                @bind-Value="registerUser.Password" For="@(() => registerUser.Password)" InputType="InputType.Password" />
                                
                            </EditForm>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" OnClick="SendCode" Color="Color.Primary" Class="ml-auto">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Processing</MudText>
                                }
                                else
                                {
                                    <MudText>Next</MudText>
                                }
                            </MudButton>
                        </MudCardActions>
                        <ExternalLoginCard Title="Continue With" />
                    </MudCard>

                }
                @if (_step == 1)
                {
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText>
                                    we have sent a confirmation code to this number: <b>@registerUser.PhoneNumber</b>.
                                    Please confirm your identity
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudTextField Label="Code" @bind-Value="_code" Variant="@Variant.Filled" Clearable />
                            <br />
                            <br />
                            <MudCardActions>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="ConfirmCode">
                                    @if (_processing)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                        <MudText Class="ms-2">Processing</MudText>
                                    }
                                    else
                                    {
                                        <MudText>Apply</MudText>
                                    }
                                </MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Info" FullWidth="true" OnClick="SendCode" Disabled="@_isResendDisabled">
                                    @if (_processing)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                        <MudText Class="ms-2">Processing</MudText>
                                    }
                                    else
                                    {
                                        <MudText>Resend code</MudText>
                                    }
                                </MudButton>

                            </MudCardActions>
                            <div>
                                <MudText Typo="Typo.body2" Color="Color.Default">@_timeLeft seconds left to resend the code.</MudText>

                            </div>
                        </MudCardContent>


                    </MudCard>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterUserCommand registerUser = new();
    private int _step;
    private bool _processing;
    private bool _processing2;

    private bool _isResendDisabled = true;
    private int _timeLeft = 60;
    private int? _code;

    private bool _isShow;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private readonly CheckUserNameQuery _checkUserName = new();
    private int _isAvailable = -1;

    private IsAvailableUserPhoneNumberQuery _phoneNumber = new IsAvailableUserPhoneNumberQuery();

    void ButtonTestClick()
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }


    private async Task SendCode()
    {
        _processing = true;
        StateHasChanged();
        try
        {
            var response = await UserProfileService.SendConfirmationCode(registerUser.PhoneNumber);

            if (response)
            {
                _processing = false;
                _step = 1;
                _isResendDisabled = true;
                _timeLeft = 60;
                await StartCountdown();
            }

        }
        catch (Exception)
        {
            ServerNotResponding();
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }

    private void ServerNotResponding()
    {
        Snackbar.Add("Server is not responding, please try later", MudBlazor.Severity.Error);
    }

    private async Task StartCountdown()
    {
        for (_timeLeft = 60; _timeLeft > 0; _timeLeft--)
        {
            await Task.Delay(1000);
            StateHasChanged();
        }
        _isResendDisabled = false;

    }

    private async Task ConfirmCode()
    {
        _processing = true;
        StateHasChanged();
        try
        {
            SmsVerificationCodeStatus response = await UserProfileService.CheckConfirmationCode(registerUser.PhoneNumber, _code);
            if (response == SmsVerificationCodeStatus.CodeVerifyFailure)
            {
                Snackbar.Add("Code is incorrect or expired", MudBlazor.Severity.Error);
            }
            else
            {
                _processing = false;
                registerUser.PhoneNumberConfirmed = true;
                await AuthService.RegisterUserAsync(registerUser);
            }
        }
        catch (Exception)
        {
            ServerNotResponding();
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }

    }

    private async Task CheckUserName()
    {
        StateHasChanged();
        try
        {
            var result = await AuthService.CheckUserName(registerUser.Username);
            if (result.IsSuccessStatusCode)
            {
                if ((await result.Content.ReadFromJsonAsync<bool>())) _isAvailable = 0;
                else _isAvailable = 1;
            }
        }
        catch (Exception)
        {
            _isAvailable = -1;
            ServerNotResponding();
        }
        _processing2 = false;
        StateHasChanged();

    }
}