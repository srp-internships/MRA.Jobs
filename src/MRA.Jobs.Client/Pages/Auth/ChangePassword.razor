@using MRA.Identity.Application.Contract.User.Commands.ChangePassword;
@using MRA.Jobs.Client.Identity;
@using MRA.Jobs.Client.Services.Auth;
@using Newtonsoft.Json;

@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Change Password</h3>
<br/>
<MudGrid>
    <MudItem xs="12" md="8" lg="6">
        <EditForm Model="command" OnInvalidSubmit="Submit">
            <FluentValidationValidator/>
            <MudCard>

                <MudCardContent>
                    <MudText>To change your password, enter your old password, and then create a new, strong password.</MudText>
                    <MudTextField @bind-Value="@command.OldPassword" Label="Old Password" Variant="Variant.Outlined"
                                  InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                                  OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" For="@(() => command.OldPassword)"/>
                    <MudTextField @bind-Value="@command.NewPassword" Label="New Password" Variant="Variant.Outlined"
                                  InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                                  OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" For="@(() => command.NewPassword)"/>
                    <MudTextField @bind-Value="@command.ConfirmPassword" Label="Confirm Password" Variant="Variant.Outlined"
                                  InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                                  OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" For="@(() => command.ConfirmPassword)"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled"
                               ButtonType="ButtonType.Submit" OnClick="Submit" FullWidth="true">
                        <MudText>Change password</MudText>
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudItem>
</MudGrid>

@code {

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("");
            return;
        }
    }

    ChangePasswordUserCommand command = new ChangePasswordUserCommand();
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task Submit()
    {
        var response = await AuthService.ChangePassword(command);
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add((await response.Content.ReadFromJsonAsync<CustomProblemDetails>()).Detail, Severity.Error);
        }
        else
        {
            Snackbar.Add("Change password successfully", Severity.Success);
            command = new ChangePasswordUserCommand();
        }

        StateHasChanged();
    }

}