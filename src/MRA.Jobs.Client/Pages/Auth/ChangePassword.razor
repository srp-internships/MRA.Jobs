@using MRA.Identity.Application.Contract.User.Commands.ChangePassword;
@using MRA.Jobs.Client.Identity;
@using MRA.Jobs.Client.Services.Auth;
@using Newtonsoft.Json;

@inject IAuthService AuthService
@inject ISnackbar Snackbar
<h3>Change Password</h3>
<br />
<MudGrid>
	<MudItem xs="4" sm="6" lg="8">
		<EditForm Model="command" OnInvalidSubmit="Submit">
			<FluentValidationValidator />
			<MudCard>
				<MudCardHeader></MudCardHeader>
				<MudCardContent>
					<MudTextField @bind-Value="@command.OldPassword" Label="Old Password" Variant="Variant.Outlined"
								  InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
								  OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" For="@(()=>command.OldPassword)" />
					<MudTextField @bind-Value="@command.NewPassword" Label="New Password" Variant="Variant.Outlined"
								  InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
								  OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" For="@(()=>command.NewPassword)" />
					<MudTextField @bind-Value="@command.ConfirmPassword" Label="Confirm Password" Variant="Variant.Outlined"
								  InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
								  OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" For="@(()=>command.ConfirmPassword)" />
				</MudCardContent>
				<MudCardActions>
					<MudButton Color="Color.Primary" Variant="Variant.Filled"
							   ButtonType="ButtonType.Submit">Change password</MudButton>
				</MudCardActions>
			</MudCard>
		</EditForm>
	</MudItem>
</MudGrid>

@code {
	ChangePasswordUserCommand command = new ChangePasswordUserCommand();
	bool isShow;
	InputType PasswordInput = InputType.Password;
	string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

	void ButtonTestclick()
	{
		@if (isShow)
		{
			isShow = false;
			PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
			PasswordInput = InputType.Password;
		}
		else
		{
			isShow = true;
			PasswordInputIcon = Icons.Material.Filled.Visibility;
			PasswordInput = InputType.Text;
		}
	}
	private async Task Submit()
	{

		var response = await AuthService.ChangePassword(command);
		if (!response.IsSuccessStatusCode)
		{
			Snackbar.Add((await response.Content.ReadFromJsonAsync<CustomProblemDetails>()).Detail, Severity.Error);
		}
		else
		{
			Snackbar.Add("Change password successfully", Severity.Success);
			command = new ChangePasswordUserCommand();
		}

		StateHasChanged();

	}


	private async Task BadRequestResponse(HttpResponseMessage response)
	{
		var errorResponseString = await response.Content.ReadAsStringAsync();
		var errorResponse = JsonConvert.DeserializeObject<ErrorResponse>(errorResponseString);
		foreach (var error in errorResponse.Errors)
		{
			var errorMessage = string.Join(", ", error.Value);
			Snackbar.Add(errorMessage, MudBlazor.Severity.Error);
		}
	}
}
