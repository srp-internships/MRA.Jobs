@page "/training/{searchInput}"

@using MRA.Jobs.Application.Contracts.TrainingVacancies.Responses;
@using Services.TrainingServices;
@inject ITrainingService _trainingService;

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Styled Aside Component with Controllers</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <div class="row">
            <aside class="col-md-3" style="margin-bottom:20px">
                <section class="mb-4">
                    <div>
                        <h2>Categories</h2>
                        @if (inAll)
                        {
                            <button class="selectedbtn rounded-2" @onclick="selectedAllCategories">
                                all @Count
                            </button>
                        }
                        else
                        {
                            <button class="categorybtn rounded-2" @onclick="selectedAllCategories">
                                all @Count
                            </button>
                        }
                        @if (!loading)
                        {
                            foreach (var category in TrainingsWithCategories)
                            {
                                if (category.Selected)
                                {
                                    <button class="selectedbtn rounded-2" @onclick="()=>CategoryButtonSelected(category.Category.Slug)">
                                        @category.Category.Name (@category.Trainings.Count)
                                    </button>
                                }
                                else
                                {
                                    <button class="categorybtn rounded-2" @onclick="()=>CategoryButtonSelected(category.Category.Slug)">
                                        @category.Category.Name (@category.Trainings.Count)
                                    </button>
                                }
                            }
                        }
                        else
                        {
                            <h1>Loading...</h1>
                        }
                    </div>
                </section>
            </aside>
            <div class="col-md-9">
                <section>
                    @if (Trainings != null)
                    {
                        @foreach (var category in Trainings)
                        {
                            foreach (var training in category.Trainings)
                            {
                                <div class="vacancy-card" style="margin-bottom:20px">
                                    <div class="vacancy-card-header">
                                        <a href="/trainings/@training.Slug" class="vacancy-title">
                                            @training.Title
                                        </a>
                                    </div>
                                    <div class="vacancy-description">
                                        <p>
                                            @training.ShortDescription
                                        </p>
                                    </div>
                                </div>
                            }
                        }
                    }
                </section>
            </div>
        </div>
    </div>
</body>

@code {
    [Parameter]
    public string searchInput { get; set; }
    public List<TrainingVacancyListDto> SearchTrainings { get; set; }

    public List<TrainingVacancyWithCategoryDto> TrainingsWithCategories { get; set; }
    public List<TrainingVacancyWithCategoryDto> Trainings { get; set; }
    bool loading = true;
    bool inAll = true;
    public int Count { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (searchInput == null)
        {
            TrainingsWithCategories = await _trainingService.GetAllWithCategories();
            Trainings = await _trainingService.GetAllWithCategories();
            CountTrainings();

            inAll = true;
        }
        else
        {

        }
        loading = false;
    }

    void CountTrainings()
    {
        foreach (var category in TrainingsWithCategories)
        {
            Count += category.Trainings.Count;
        }
    }

    private async void selectedAllCategories()
    {
        Trainings = await _trainingService.GetAllWithCategories();
        inAll = true;

        foreach (var item in TrainingsWithCategories)
        {
            item.Selected = false;
        }

        StateHasChanged();
    }

    async void CategoryButtonSelected(string slug)
    {
        var category = TrainingsWithCategories.FirstOrDefault(c => c.Category.Slug == slug);
        foreach (var item in TrainingsWithCategories)
        {
            item.Selected = false;
        }
        category.Selected = true;
        inAll = false;

        Trainings = new List<TrainingVacancyWithCategoryDto>();
        Trainings.Add(await _trainingService.GetCategoriesByName(slug));

        StateHasChanged();
    }

    async void GetSearchedTrainings()
    {
        
    }
}
