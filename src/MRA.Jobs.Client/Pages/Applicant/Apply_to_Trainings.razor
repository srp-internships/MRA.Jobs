@page "/trainings/ApplytoTrainings/{Slug}"
@using Blazored.LocalStorage;
@using MRA.Jobs.Application.Contracts.Applications.Commands;
@using MRA.Jobs.Application.Contracts.Dtos;
@using MRA.Jobs.Application.Contracts.TrainingVacancies.Responses;
@using MRA.Jobs.Client.Services.ApplicationService;
@inject HttpClient httpClient
@inject ILocalStorageService LocalStorage;
@inject IApplicationService ApplicationService;
@inject ITrainingService _trainingService

<div class="container">

	<h1>Apply for training</h1>

	<p>Fill out the form below to apply for training:</p>

	<EditForm Model="@createApplication" OnValidSubmit="Apply">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="form-group">
			<label for="CoverLetter">Tell us about yourself (minimum 10 words):</label>
			<InputTextArea id="CoverLetter" @bind-Value="createApplication.CoverLetter" class="form-control" rows="10"></InputTextArea>
			@if (createApplication.CoverLetter != null && createApplication.CoverLetter.Split(' ').Length < 10)
			{
				<p class="text-danger">Please write at least 10 words.</p>
			}
		</div>
		<div class="form-group">
			@foreach (var que in _training.VacancyQuestions)
			{
				<h2 class="mb-2 text-black">@que.Question</h2>
			}
		
		</div>

		<button type="submit" class="btn btn-primary">Send</button>
	</EditForm>

</div>
@code {
	[Parameter]
	public string Slug { get; set; }
	private TrainingVacancyDetailedResponse _training;
	protected override async Task OnInitializedAsync()
	{
		_training = await _trainingService.GetBySlug(Slug);
	}
	private CreateApplicationCommand createApplication = new CreateApplicationCommand();
	private async Task Apply()
	{
		createApplication.VacancyId = _training.Id;
		await ApplicationService.CreateApplication(createApplication);
	}
}