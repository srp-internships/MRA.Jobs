@using MRA.Jobs.Application.Contracts.Common;
@using Blazorise;
@using Blazorise.Bootstrap;
@using Blazorise.Icons.FontAwesome;
@inject IInternshipService _internshipService;
@inject ICategoryService _categoryService;
@inject NavigationManager _manager;

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Styled Aside Component with Controllers</title>
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/css/bootstrap.min.css">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
	
</head>
<body>
	<div class="container mt-5">
		<div class="row">
			<aside class="col-md-3">
				<section class="mb-4">
					<div>
						<h2>Categories</h2>
						@if (inAll)
						{
							<button class="selectedbtn rounded-2" @onclick="selectedAllCategories">
								all (@Count)
							</button>
						}
						else
						{
							<button class="categorybtn rounded-2" @onclick="selectedAllCategories">
								all @Count
							</button>
						}
						@if (!loading && Categories != null)
						{
							foreach (var category in Categories)
							{
								if (category.Selected)
								{
									<button class="selectedbtn rounded-2" @onclick="()=>CategoryButtonSelected(category.Category.Slug)">
										@category.Category.Name (@category.InternshipCount)
									</button>
								}
								else
								{
									<button class="categorybtn rounded-2" @onclick="()=>CategoryButtonSelected(category.Category.Slug)">
										@category.Category.Name (@category.InternshipCount)
									</button>
								}
							}
						}
						else
						{
							<h1>Loading...</h1>
						}
					</div>
				</section>
			</aside>
			<div class="col-md-9">
				<section>
					@if (DisplayedInternships != null)
					{
						@foreach (var training in DisplayedInternships)
						{
							<div class="vacancy-card" style="margin-bottom:20px">
								<div class="vacancy-card-header">
									<a href="/trainings/@training.Slug" class="vacancy-title">
										@training.Title
									</a>
								</div>
								<div class="vacancy-description">
									<p>
										@training.ShortDescription
									</p>
								</div>
							</div>
						}
					}
				</section>
			</div>
		</div>
	</div>
</body>
<div class="d-flex justify-content-center">
	@if (Internships != null)
	{
		<Pagination>
			<PaginationItem Disabled=@(!Internships.HasPreviousPage) @onclick="Previous">
				<PaginationLink>
					<span aria-hidden="true">«</span>
				</PaginationLink>
			</PaginationItem>
			@if (Internships != null)
			{
				for (int i = 1; i <= Internships.TotalPages; i++)
				{
					var pageNumberAsString = i.ToString();
					int currentPage = i;
					<PaginationItem @key="pageNumberAsString">
						<PaginationLink Page="@pageNumberAsString" Clicked="()=>SetActive(currentPage)">
							@pageNumberAsString
						</PaginationLink>
					</PaginationItem>
				}
			}
			<PaginationItem Disabled=@(!Internships.HasNextPage) @onclick="Next">
				<PaginationLink>
					<span aria-hidden="true">»</span>
				</PaginationLink>
			</PaginationItem>
		</Pagination>
	}
</div>
@code {
	[Parameter]
	public string searchInput { get; set; }

	public List<InternshipCategoriesResponce> Categories { get; set; }

	public PagedList<InternshipVacancyListDto> Internships { get; set; }
	public List<InternshipVacancyListDto> DisplayedInternships { get; set; }

	bool loading = true;
	bool inAll = true;
	public int Count { get; set; }


	protected async override Task OnParametersSetAsync()
	{
		Categories = await _categoryService.GetInternshipCategoriesSinceCheckDate();
		if (searchInput == null)
		{
			Internships = await _internshipService.GetAllSinceCheckDate();
			Console.Out.WriteLine($"{Internships.PageSize}, {Internships.TotalPages}");
			UpdateDisplayedTrainings();
			Count = Internships.TotalCount;

			inAll = true;
		}
		else
		{
			GetSearchedTrainings();
		}
		loading = false;
	}


	private async void selectedAllCategories()
	{
		Internships = await _internshipService.GetAllSinceCheckDate();
		UpdateDisplayedTrainings();
		Count = Internships.TotalCount;

		foreach (var item in Categories)
		{
			item.Selected = false;
		}

		inAll = true;
		searchInput = null;

		StateHasChanged();
	}

	async void CategoryButtonSelected(string slug)
	{
		var category = Categories.FirstOrDefault(c => c.Category.Slug == slug);
		foreach (var item in Categories)
		{
			item.Selected = false;
		}

		Internships = await _internshipService.GetByCategorySinceCheckDate(slug);
		UpdateDisplayedTrainings();

		category.Selected = true;
		inAll = false;
		searchInput = null;

		StateHasChanged();
	}


	async void GetSearchedTrainings()
	{
		Internships = await _internshipService.SearchInternshipSinceSearchDate(searchInput);
		UpdateDisplayedTrainings();
		StateHasChanged();
	}

	void UpdateDisplayedTrainings()
	{
		var startIndex = (Internships.CurrentPageNumber - 1) * Internships.PageSize;
		DisplayedInternships = Internships.Items.Skip(startIndex).Take(Internships.PageSize).ToList();
	}


	private void Previous()
	{
		if (Internships.HasPreviousPage)
		{
			Internships.CurrentPageNumber--;
			UpdateDisplayedTrainings();
			if (Internships.CurrentPageNumber == 1)
				Internships.HasPreviousPage = false;
			Internships.HasNextPage = true;
		}
	}

	private void Next()
	{
		if (Internships.HasNextPage)
		{
			Internships.CurrentPageNumber++;
			UpdateDisplayedTrainings();
			if (Internships.CurrentPageNumber == Internships.TotalPages)
				Internships.HasNextPage = false;
			Internships.HasPreviousPage = true;
		}
	}

	private void SetActive(int page)
	{
		Internships.CurrentPageNumber = page;

		if (page != Internships.TotalPages)
		{
			Internships.HasNextPage = true;
		}
		else if (page == Internships.TotalPages)
		{
			Internships.HasNextPage = false;
		}

		if (page != 1)
		{
			Internships.HasPreviousPage = true;
		}
		else if (page == 1)
		{
			Internships.HasPreviousPage = false;
		}

		UpdateDisplayedTrainings();
	}
}
