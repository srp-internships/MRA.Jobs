@page "/trainings"
@using MRA.Jobs.Application.Contracts.TrainingVacancies.Responses;
@inject ICategoryService categoryService
@inject IVacancyService vacancyService

<style>
	.job-card:hover {
		background-color: #F5F5F5; /* Change to desired hover color */
	}
</style>

@if (trainings is null)
{
	<MudText Typo="Typo.h5">@message</MudText>

}
else
{
	<MudContainer>
		<MudGrid>
			<MudItem xs="12" md="3" lg="2">
				<MudPaper Width="250px" Height="500px" Elevation="0" Class="py-0">
					<MudTabs Outlined="true" MinimumTabWidth="200px" Position="Position.Left" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
						<MudTabPanel Icon="@Icons.Material.Filled.Category" Text="All Trainings" />
						@foreach (var trainingCats in TrainingCategories)
						{
							<MudTabPanel Text="@trainingCats.Category.Name" BadgeData="@GetTrainingsCategoryCount(trainingCats.Category.Name)" />
						}
					</MudTabs>
				</MudPaper>
			</MudItem>
			@if (TrainingCategories.Count == 0)
			{
				<MudText Typo="Typo.h5" Style="margin:50px;">There are currently no trainings vacancies available. Please check back later :)</MudText>
			}
			else
			{
				<MudItem xs="12" md="9" lg="10">
					<MudGrid>
						@foreach (var training in filteredtrainings)
						{
							<MudItem xs="12" md="12" lg="12">
								<a href="/trainings/@training.Slug">
									<MudCard Class="job-card">
										<MudCardHeader>
											<MudText Color="Color.Primary" Typo="Typo.h5">@training.Title</MudText>
										</MudCardHeader>
										<MudCardContent>
											@training.ShortDescription
										</MudCardContent>
									</MudCard>
								</a>
							</MudItem>
						}
					</MudGrid>
				</MudItem>
			}
		</MudGrid>
	</MudContainer>

}

@code {
	private string message = "Loading...";
	private List<TrainingCategoriesResponce> TrainingCategories;
	private List<TrainingVacancyListDto> trainings;
	private List<TrainingVacancyListDto> filteredtrainings;
	private int activeIndex = 0;
	private string selectedCategoryText = "";

	protected override async Task OnInitializedAsync()
	{
		var result = await categoryService.GetTrainingCategoriesSinceCheckDate();
		var allTrainings = await vacancyService.GetTrainings();
		if (result is not null && allTrainings is not null)
		{
			TrainingCategories = result;
			trainings = allTrainings;
			filteredtrainings = allTrainings;
			message = string.Empty;
		}
	}

	private async Task HandleTabSelection(int index)
	{
		activeIndex = index;

		if (index == 0)
		{
			selectedCategoryText = "All Trainings";
			filteredtrainings = trainings;
		}
		else if (index > 0 && index <= TrainingCategories.Count)
		{
			selectedCategoryText = TrainingCategories[index - 1].Category.Name;
			filteredtrainings = trainings.Where(j => j.Category == selectedCategoryText).ToList();
		}
	}

	private int GetTrainingsCategoryCount(string category)
	{
		return trainings.Count(j => j.Category == category);
	}
}
