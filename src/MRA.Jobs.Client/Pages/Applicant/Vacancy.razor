@page "/vacancy"
@inject IVacancyService VacancyService
@using MRA.Jobs.Application.Contracts.JobVacancies.Queries.GetJobs
@using MRA.Jobs.Application.Contracts.JobVacancies.Responses
@implements IDisposable

<!-- Vacancy page -->
<div class="container">
	<!-- Search -->
	<div class="w-100">
		<div class="p-1 d-flex bg-white shadow rounded mb-5">
			<div class="input-group">
				<input type="text"
					   class="form-control border-0"
					   placeholder="Search"
					   aria-label="Search"
					   @bind-value="@Title"
					   aria-describedby="">
				<div class="input-group-append">
					<button class="btn btn-outline-primary"
							@onclick="() => BtnSearch(Title)"
							type="button">
						Search
					</button>
				</div>
			</div>
		</div>
	</div>
	<!-- End Search -->
	<div class="w-100 d-flex flex-row justify-content-between">
		<div class="category bg-white shadow-lg rounded p-4">
			<Category></Category>
		</div>
		<div class="vacancy">
			@if (_vacancies is null)
			{
				<div></div>
			}
			else
			{
				<div>
					@foreach (var vacancy in VacancyService.Vacancies)
					{
						<a href="">
							<div class="card-vacancy w-100 bg-white shadow-lg rounded mb-4">
								<div class="d-flex flex-column p-3">
									<h2 class="mb-2 text-black">@vacancy.Title</h2>
									<p class="mb-2 text-black">@vacancy.ShortDescription</p>
								</div>
							</div>
						</a>
					}
				</div>
			}
		</div>
	</div>
</div>
<!-- End Vacancy page -->
@code {

	private List<JobVacancyListDto> _vacancies;
	public string Title;
	private GetJobsQueryOptions getJobsQuery = new();
	protected override async Task OnInitializedAsync()
	{
		_vacancies = await VacancyService.GetAllVacancy(getJobsQuery);
	}


	void BtnSearch(string text)
	{
		VacancyService.OnChange += StateHasChanged;
	}

	public void Dispose()
	{
		VacancyService.OnChange -= StateHasChanged;
	}

}