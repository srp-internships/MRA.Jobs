@page "/internships/apply/{Slug}"
@using MRA.Jobs.Application.Contracts.Applications.Commands.CreateApplication;
@layout MainLayout
@inject IInternshipService InternshipService
@using MRA.Jobs.Application.Contracts.VacancyClient;
@using MRA.Jobs.Client.Components.Vacancies

@if (serverError)
{
	<ServerErrorComponent />
}
else
{
	<VacancyApplication vacancyType="internships" Slug="@Slug" application="@application" taskResponses="@tasksResponses" questionResponses="@questionResponses" vacancy="@internship" />
}


@code {
	private bool serverError;
	private VacancyApplicationResponse internship;
	private CreateApplicationCommand application;
	public Dictionary<string, string> questionResponses = new();
	public Dictionary<Guid, string> tasksResponses = new();


	[Parameter]
	public string Slug { get; set; }

	protected override async Task OnInitializedAsync()
	{
await base.OnInitializedAsync();
		await base.OnInitializedAsync();
		try
		{
			var response = await InternshipService.GetBySlug(Slug);

			if (response != null)
			{
				internship = new VacancyApplicationResponse
					{
						Id = response.Id,
						Title = response.Title,
						Description = response.Description,
						PublishDate = response.PublishDate,
						EndDate = response.EndDate,
						Duration = response.Duration,
						Stipend = response.Stipend,
						VacancyQuestions = response.VacancyQuestions,
						VacancyTasks = response.VacancyTasks
					};
				application = new CreateApplicationCommand
					{
						VacancySlug = Slug,
						VacancyResponses = internship.VacancyQuestions.Select(q => new VacancyResponseDto
						{
							VacancyQuestion = new VacancyQuestionDto { Question = q.Question }
						}),
						TaskResponses = internship.VacancyTasks.Select(t => new TaskResponseDto
						{
							TaskId = t.Id,
							Code = t.Template
						})

					};

				foreach (var question in internship.VacancyQuestions)
				{
					questionResponses[question.Question] = "";
				}
				foreach (var task in internship.VacancyTasks)
				{
					tasksResponses[task.Id] = task.Template;
				}
			}
		}
		catch (Exception)
		{
			serverError = true;
			StateHasChanged();
		}
	}
}
