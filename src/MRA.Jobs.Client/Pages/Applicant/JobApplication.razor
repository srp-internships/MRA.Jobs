@page "/jobs/apply/{Slug}"
@using MRA.Jobs.Application.Contracts.Applications.Commands.CreateApplication;
@using MRA.Jobs.Application.Contracts.VacancyClient;
@using MRA.Jobs.Client.Components.Extra
@using MRA.Jobs.Client.Components.Vacancies
@using MRA.Jobs.Client.Services.JobsServices

@inject IJobsService JobsService

@if (_serverError)
{
	<ServerErrorComponent />
}
else
{
	<CascadingAuthenticationState>
		<AuthorizeView>
			<Authorized>
				<VacancyApplication VacancyType="jobs" Slug="@Slug" Application="@_application" QuestionResponses="@QuestionResponses" TaskResponses="@TasksResponses" Vacancy="@_job" />
			</Authorized>
			<NotAuthorized>
				<NotFound></NotFound>
			</NotAuthorized>
		</AuthorizeView>
	</CascadingAuthenticationState>
}

@code {
	private bool _serverError;
	private VacancyApplicationResponse _job;
	private CreateApplicationCommand _application;
	public Dictionary<string, string> QuestionResponses = new();
	public Dictionary<Guid, string> TasksResponses = new();
	[Parameter] public string Slug { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		try
		{
			var response = await JobsService.GetBySlug(Slug);

			if (response != null)
			{
				_job = new VacancyApplicationResponse
					{
						Id = response.Id,
						Title = response.Title,
						EndDate = response.EndDate,
						PublishDate = response.PublishDate,
						RequiredYearOfExperience = response.RequiredYearOfExperience,
						Description = response.Description,
						VacancyQuestions = response.VacancyQuestions,
						VacancyTasks = response.VacancyTasks
					};
				_application = new CreateApplicationCommand
					{
						VacancySlug = Slug,
						VacancyResponses = _job.VacancyQuestions.Select(q => new VacancyResponseDto
						{
							VacancyQuestion = new VacancyQuestionDto { Question = q.Question, IsOptional = q.IsOptional }
						}),
						TaskResponses = _job.VacancyTasks.Select(t => new TaskResponseDto
						{
							TaskId = t.Id,
							Code = t.Template
						})
					};
				foreach (var question in _job.VacancyQuestions)
				{
					QuestionResponses[question.Question] = "";
				}

				foreach (var task in _job.VacancyTasks)
				{
					TasksResponses[task.Id] = task.Template;
				}
			}
		}
		catch (Exception)
		{
			_serverError = true;
			StateHasChanged();
		}
	}

}