@page "/trainings/{Slug}"
@using MRA.Jobs.Application.Contracts.TrainingVacancies.Responses;
@using MRA.Jobs.Application.Contracts.VacancyClient;
@using MRA.Jobs.Client.Identity;
@using Microsoft.AspNetCore.Components.Authorization;
@inject AuthenticationStateProvider provider
@inject ITrainingService _trainingService
@inject IApplicationService ApplicationService
@using MRA.Jobs.Client.Components.Vacancies
@using MRA.Jobs.Client.Services.VacanciesServices.Training

@if (serverError)
{
	<ServerErrorComponent />
}
else if (notFound)
{
    <MRA.Jobs.Client.Components.Extra.NotFound />
}
else
{
	<VacancyDetails Slug="@Slug" vacancyDetails="@details" Vacancy="trainings" />
}

@code {
    private bool serverError = false;
    bool notFound;
    [Parameter]
    public string Slug { get; set; }
    private VacancyDetailsResponse details;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await base.OnInitializedAsync();
        try
        {

            var response = await _trainingService.GetBySlug(Slug);
            if (response is not null)
            {
                details = new VacancyDetailsResponse
                    {
                        Title = response.Title,
                        Description = response.Description,
                        Duration = response.Duration,
                        EndDate = response.EndDate,
                        PublishDate = response.PublishDate,
                        Fees = response.Fees,
                        IsApplied = response.IsApplied
                    };
            }
            else notFound = true;
        }
		catch (Exception)
		{
			serverError = true;
			StateHasChanged();
		}
	}
}