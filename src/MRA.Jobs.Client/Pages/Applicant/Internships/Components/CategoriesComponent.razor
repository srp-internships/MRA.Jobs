@using MRA.Jobs.Application.Contracts.Common;
@using MRA.Jobs.Application.Contracts.InternshipVacancies.Responses;
@using Blazorise;
@using Blazorise.Bootstrap;
@using Blazorise.Icons.FontAwesome;
@inject IInternshipService _internshipService;
@inject ICategoryService _categoryService;
@inject NavigationManager _manager;

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Styled Aside Component with Controllers</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
        .vacancy-card {
            display: flex;
            flex-direction: column;
            padding: 1rem;
            transition: all 0.1s ease-in-out;
            background-color: white;
            border-radius: 8px;
            cursor: pointer;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

            .vacancy-card:hover {
                box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
            }


        .vacancy-card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .vacancy-title {
            width: 70%;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
            transition: color 0.1s ease-in-out;
            font-size: 1.5rem;
            font-weight: 600;
            color: black;
            text-decoration: none;
            font-size: 30px;
        }

        .vacancy-card:hover .vacancy-title {
            color: #007bff;
        }

        .location-icon {
            fill: #6c757d;
            width: 20px;
            height: 20px;
            margin-right: 0.5rem;
        }

        .vacancy-description {
            line-height: 1.6;
            font-size: 1.2rem;
            color: black;
        }

        aside {
            background-color: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        h2 {
            font-size: 1.5rem;
            margin-bottom: 15px;
        }

        .list-group-item {
            background-color: white;
            border: none;
        }

            .list-group-item:hover {
                background-color: #e9ecef;
            }

            .list-group-item.active {
                background-color: #007bff;
                color: #fff;
            }


        .selectedbtn {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            cursor: pointer;
            background-color: #007bff;
            color: white;
            width: 100%;
            display: flex;
            border-style: hidden;
            height: 45px;
            text-align: center;
        }

        .categorybtn {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            cursor: pointer;
            background-color: inherit;
            width: 100%;
            display: flex;
            border-style: hidden;
            height: 45px;
            text-align: center;
        }

            .categorybtn:hover {
                background-color: lightgray;
            }
    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="row">
            <aside class="col-md-3">
                <section class="mb-4">
                    <div>
                        <h2>Categories</h2>
                        @if (inAll)
                        {
                            <button class="selectedbtn rounded-2" @onclick="selectedAllCategories">
                                all (@Count)
                            </button>
                        }
                        else
                        {
                            <button class="categorybtn rounded-2" @onclick="selectedAllCategories">
                                all @Count
                            </button>
                        }
                        @if (!loading && Categories != null)
                        {
                            foreach (var category in Categories)
                            {
                                if (category.Selected)
                                {
                                    <button class="selectedbtn rounded-2" @onclick="()=>CategoryButtonSelected(category.Category.Slug)">
                                        @category.Category.Name (@category.InternshipsCount)
                                    </button>
                                }
                                else
                                {
                                    <button class="categorybtn rounded-2" @onclick="()=>CategoryButtonSelected(category.Category.Slug)">
                                        @category.Category.Name (@category.InternshipsCount)
                                    </button>
                                }
                            }
                        }
                        else
                        {
                            <h1>Loading...</h1>
                        }
                    </div>
                </section>
            </aside>
            <div class="col-md-9">
                <section>
                    @if (DisplayedInternships!= null)
                    {
                        @foreach (var internship in DisplayedInternships)
                        {
                            <div class="vacancy-card" style="margin-bottom:20px">
                                <div class="vacancy-card-header">
                                    <a href="/internships/@internship.Slug" class="vacancy-title">
                                        @internship.Title
                                    </a>
                                </div>
                                <div class="vacancy-description">
                                    <p>
                                        @internship.ShortDescription
                                    </p>
                                </div>
                            </div>
                        }
                    }
                </section>
            </div>
        </div>
    </div>
</body>
<div class="d-flex justify-content-center">
    @if (Internships != null)
        {
        <Pagination>
            <PaginationItem Disabled=@(!Internships.HasPreviousPage) @onclick="Previous">
                <PaginationLink>
                    <span aria-hidden="true">«</span>
                </PaginationLink>
            </PaginationItem>
            @if (Internships != null)
            {
                for (int i = 1; i <= Internships.TotalPages; i++)
                {
                    var pageNumberAsString = i.ToString();
                    int currentPage = i;
                    <PaginationItem @key="pageNumberAsString">
                        <PaginationLink Page="@pageNumberAsString" Clicked="()=>SetActive(currentPage)">
                            @pageNumberAsString
                        </PaginationLink>
                    </PaginationItem>
                }
            }
            <PaginationItem Disabled=@(!Internships.HasNextPage) @onclick="Next">
                <PaginationLink>
                    <span aria-hidden="true">»</span>
                </PaginationLink>
            </PaginationItem>
        </Pagination>
    }
</div>
@code {
    [Parameter]
    public string searchInput { get; set; }

    public List<InternshipCategoriesResponse> Categories { get; set; }

    public PagedList<InternshipVacancyListResponse> Internships { get; set; }
    public List<InternshipVacancyListResponse> DisplayedInternships { get; set; }

    bool loading = true;
    bool inAll = true;
    public int Count { get; set; }


    protected async override Task OnParametersSetAsync()
    {
        Categories = await _categoryService.GetInternshipCategoriesSinceCheckDate();
        if (searchInput == null)
        {
            Internships = await _internshipService.GetAllSinceCheckDate();
            Console.Out.WriteLine($"{Internships.PageSize}, {Internships.TotalPages}");
            UpdateDisplayedInternships();
            Count = Internships.TotalCount;

            inAll = true;
        }
        else
        {
            GetSearchedInternships();
        }
        loading = false;
    }


    private async void selectedAllCategories()
    {
        Internships = await _internshipService.GetAllSinceCheckDate();
        UpdateDisplayedInternships();
        Count = Internships.TotalCount;

        foreach (var item in Categories)
        {
            item.Selected = false;
        }

        inAll = true;
        searchInput = null;

        StateHasChanged();
    }

    async void CategoryButtonSelected(string slug)
    {
        var category = Categories.FirstOrDefault(c => c.Category.Slug == slug);
        foreach (var item in Categories)
        {
            item.Selected = false;
        }

        Internships = await _internshipService.GetByCategorySinceCheckDate(slug);
        UpdateDisplayedInternships();

        category.Selected = true;
        inAll = false;
        searchInput = null;

        StateHasChanged();
    }


    async void GetSearchedInternships()
    {
        Internships = await _internshipService.SearchInternshipsSinceSearchDate(searchInput);
        UpdateDisplayedInternships();
        StateHasChanged();
    }

    void UpdateDisplayedInternships()
    {
        var startIndex = (Internships.CurrentPageNumber - 1) * Internships.PageSize;
        DisplayedInternships = Internships.Items.Skip(startIndex).Take(Internships.PageSize).ToList();
    }


    private void Previous()
    {
        if (Internships.HasPreviousPage)
        {
            Internships.CurrentPageNumber--;
            UpdateDisplayedInternships();
            if (Internships.CurrentPageNumber == 1)
                Internships.HasPreviousPage = false;
            Internships.HasNextPage = true;
        }
    }

    private void Next()
    {
        if (Internships.HasNextPage)
        {
            Internships.CurrentPageNumber++;
            UpdateDisplayedInternships();
            if (Internships.CurrentPageNumber == Internships.TotalPages)
                Internships.HasNextPage = false;
            Internships.HasPreviousPage = true;
        }
    }

    private void SetActive(int page)
    {
        Internships.CurrentPageNumber = page;

        if (page != Internships.TotalPages)
        {
            Internships.HasNextPage = true;
        }
        else if (page == Internships.TotalPages)
        {
            Internships.HasNextPage = false;
        }

        if (page != 1)
        {
            Internships.HasPreviousPage = true;
        }
        else if (page == 1)
        {
            Internships.HasPreviousPage = false;
        }

        UpdateDisplayedInternships();
    }
}
