@page "/jobs/infojob/{Slug}"
@using MRA.Jobs.Application.Contracts.JobVacancies.Responses;
@using MRA.Jobs.Client.Identity;
@inject IVacancyService VacancyService
@inject IApplicationService ApplicationService

<div class="container">
	@if (_vacancy == null)
	{
		<span>Loading...</span>
	}
	else
	{
		<h1>@_vacancy.Title</h1>
		<div class="w-100 d-flex flex-row justify-content-between">
			<div class="Jobs w-100 bg-white shadow-lg rounded mb-4">
				<div class="d-flex flex-column p-3">

					<h3 class="mb-2 text-black">
						Description:
					</h3>
					<p class="mb-2 text-black">@((MarkupString)@_vacancy.Description)</p>
				</div>
			</div>
			@*button*@
			<div class="Jobsinfo">
				<div class="w-100 d-flex flex-row justify-content-between">
					<div class="card w-100 bg-white shadow-lg rounded mb-4">
						<div class="card-body">
							<h2 class="mb-2 text-black">Interested in a Job?</h2>
							@if (applied)
							{
								<span class="text-success"> <i class="fa fa-check" aria-hidden="true"></i>Applied</span>
							}
							else
							{
								<a href="/jobs/infojob/Applytojobs/@Slug" class="btn btn-primary w-100">Apply</a>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	}
</div>



@code {
	[Parameter]
	public string Slug { get; set; }
	JobVacancyDetailsDto _vacancy;
	private bool applied = false;

	protected override async Task OnInitializedAsync()
	{
		_vacancy = await VacancyService.GetBySlug(Slug);
		applied = await ApplicationExits();
	}

	private async Task<bool> ApplicationExits()
	{
		return await ApplicationService.ApplicationExist(Slug);
	}
}