@page "/jobs/infojob/{Slug}"
@using MRA.Jobs.Application.Contracts.JobVacancies.Responses;
@using MRA.Jobs.Client.Identity;
@inject IVacancyService VacancyService
@inject IApplicationService ApplicationService

<div class="container">
	@if (_vacancy == null)
	{
		<span>Loading...</span>
	}
	else
	{
		<h1>@_vacancy.Title</h1>
		<div class="row">
			<div class="col-md-8">
				<h3 class="mb-2 text-black">
					Short Descriptio:
				</h3>
				<p class="mb-2 text-black"> Test Result </p>
			</div>
			<div class="col-md-4 bg-light rounded p-3">
				<p>Interested in a Job?</p>
				<CascadingAuthenticationState>
					<AuthorizeView>
						<Authorized>
							@if (applied)
							{
								<span class="text-success"> <i class="fa fa-check" aria-hidden="true"></i>Applied</span>

							}
							else
							{
								<a href="/jobs/Applytojobs/@Slug" class="btn btn-primary w-100">Apply</a>
							}
						</Authorized>
						<NotAuthorized>
							<a href="/sign-in" class="btn btn-primary w-100">Apply</a>
						</NotAuthorized>
					</AuthorizeView>
				</CascadingAuthenticationState>
				<br />
			</div>
		</div>
	}
</div>

@code {
	[Parameter]
	public string Slug { get; set; }
	JobVacancyDetailsDto _vacancy;
	private bool applied = false;

	protected override async Task OnInitializedAsync()
	{
		_vacancy = await VacancyService.GetBySlug(Slug);
		applied = await ApplicationExits();
	}

	private async Task<bool> ApplicationExits()
	{
		return await ApplicationService.ApplicationExist(Slug);
	}
}