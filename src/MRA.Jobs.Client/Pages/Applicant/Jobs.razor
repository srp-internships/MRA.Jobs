@page "/jobs"
@using MRA.Jobs.Application.Contracts.VacancyClient;
@inject ICategoryService categoryService
@inject IJobsService JobsService
@using MRA.Jobs.Client.Components.Vacancies
@using MRA.Jobs.Client.Services.VacanciesServices.Jobs

<MudText Typo="Typo.h4" Style="margin:50px; text-align: center; font-weight: 900;">@ContentService["Jobs:Jobs"]</MudText>
	@if (serverError)
{
	<ServerErrorComponent />
}
else
{
	<VacanciesList FilteredVacancies="filteredJobs" Vacancies="jobs" Route="jobs" VacancyCategories="jobCategories" />
}

@code {
	private bool serverError;
	private List<string> jobCategories;
	private List<VacancyClientResponse> jobs;
	private List<VacancyClientResponse> filteredJobs;
	
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		try
		{
			var result = await categoryService.GetJobCategoriesSinceCheckDate();
			var allJobs = await JobsService.GetJobs();
			if (result is not null && allJobs is not null)
			{
				jobCategories = result.Select(r => r.Category.Name).ToList();
				jobs = allJobs.Select(r => new VacancyClientResponse
					{
						Category = r.Category,
						Title = r.Title,
						ShortDescription = r.ShortDescription,
						Slug = r.Slug,
						PublishDate = r.PublishDate,
						EndDate = r.EndDate
					}).ToList(); ;
				filteredJobs = allJobs.Where(s => s.EndDate >= DateTime.Now).Select(r => new VacancyClientResponse
					{
						Category = r.Category,
						Title = r.Title,
						ShortDescription = r.ShortDescription,
						Slug = r.Slug,
						PublishDate = r.PublishDate,
						EndDate = r.EndDate
					}).ToList(); ;
			}
		}
		catch (Exception)
		{
			serverError = true;
			StateHasChanged();
		}
	}
}
