@page "/jobs"
@using MRA.Jobs.Application.Contracts.JobVacancies.Responses;
@using MRA.Jobs.Application.Contracts.VacancyClient;
@inject ICategoryService categoryService
@inject IVacancyService vacancyService
@using MRA.Jobs.Client.Components.Vacancies

<MudText Typo="Typo.h3" Style="margin:50px; color: #129fd7; text-align: center; font-family: 'Poppins', sans-serif;">Jobs</MudText>
<VacanciesList  filteredVacancies="filteredJobs" Vacancies="jobs" Route="jobs" VacancyCategories="jobCategories"/>

@code {
    private List<string> jobCategories;
    private List<VacancyClientResponse> jobs;
    private List<VacancyClientResponse> filteredJobs;
    private int activeIndex = 0;
    private string selectedCategoryText = "";

    protected override async Task OnInitializedAsync()
    {
        var result = await categoryService.GetJobCategoriesSinceCheckDate();
        var allJobs = await vacancyService.GetJobs();
        if (result is not null && allJobs is not null)
        {
            jobCategories = result.Select(r => r.Category.Name).ToList();
            jobs = allJobs.Select(r => new VacancyClientResponse
                {
                    Category = r.Category,
                    Title = r.Title,
                    ShortDescription = r.ShortDescription,
                    Slug = r.Slug
                }).ToList(); ;
            filteredJobs = allJobs.Select(r => new VacancyClientResponse
                {
                    Category = r.Category,
                    Title = r.Title,
                    ShortDescription = r.ShortDescription,
                    Slug = r.Slug
                }).ToList(); ;
        }
    }
}
