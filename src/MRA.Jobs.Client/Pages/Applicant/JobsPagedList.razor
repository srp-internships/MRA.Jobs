@page "/JobsPagedList"
@using MRA.Jobs.Application.Contracts.JobVacancies.Responses
@using MRA.Jobs.Client.Services.VacanciesServices.Jobs
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.IdentityModel.Tokens
@using MRA.Jobs.Client.Services.ConverterService
@inject IJobsService JobsService
@inject NavigationManager NavigationManager
@inject IDateTimeConvertToStringService DateTimeConvertToStringService

<MudGrid Style="margin-top: 15px;">
    <MudItem lg="12">
        <MudStack Row="true">
            <MudText Typo="Typo.h4">
                <b>Jobs</b>
            </MudText>
            <MudSpacer/>
            <MudItem lg="4">
                <MudTextField T="string" Variant="Variant.Outlined" AdornmentIcon="@Icons.Material.Filled.Search" Label="Search"
                              Margin="Margin.Dense" Adornment="Adornment.End"/>
            </MudItem>
        </MudStack>
    </MudItem>
    <MudItem lg="12">
        <MudGrid>
            <MudItem lg="2" md="4" sm="12">
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <MudNavMenu Rounded="true" Color="Color.Primary" Class="pa-2">
                        <MudNavLink OnClick="@(() => SelectCategory())"
                                    Class="@(_selectedCategory == null ? "mud-chip-text mud-chip-color-primary" : "")">
                            <div class="customTabContainer">
                                <div class="customTabContainerLeft">
                                    <MudText>
                                        <b>@ContentService["VacanciesList:All"]</b>
                                    </MudText>
                                </div>
                                <div class="customTabContainerRight">
                                </div>
                            </div>
                        </MudNavLink>
                        @foreach (var cat in _vacancyCategories)
                        {
                            <MudNavLink OnClick="@(() => SelectCategory(cat))" Class="@(_selectedCategory == cat ? "mud-chip-text mud-chip-color-primary" : "")">
                                <div class="d-flex flex-grow-1">
                                    <MudText>
                                        <b>@cat</b>
                                    </MudText>
                                    <MudSpacer/>
                                    @* //    <MudBadge Origin="Origin.CenterRight" Color="Color.Primary" Content="@GetVacancyCategoryCount(cat)"></MudBadge> *@
                                </div>
                            </MudNavLink>
                        }
                    </MudNavMenu>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.MdAndUp">
                    <MudExpansionPanel Text=@ContentService["VacanciesList:Categories"]>
                        <MudNavMenu Rounded="true" Color="Color.Primary" Class="pa-2">
                            <MudNavLink OnClick="@(() => SelectCategory())"
                                        Class="@(_selectedCategory == null ? "mud-chip-text mud-chip-color-primary" : "")">
                                <div class="customTabContainer">
                                    <div class="customTabContainerLeft">
                                        <MudText>
                                            <b> @ContentService["VacanciesList:All"]</b>
                                        </MudText>
                                    </div>
                                    <div class="customTabContainerRight">
                                    </div>
                                </div>
                            </MudNavLink>
                            @foreach (var cat in _vacancyCategories)
                            {
                                <MudNavLink OnClick="@(() => SelectCategory(cat))" Class="@(_selectedCategory == cat ? "mud-chip-text mud-chip-color-primary" : "")">
                                    <div class="d-flex flex-grow-1">
                                        <MudText>
                                            <b>@cat</b>
                                        </MudText>
                                        <MudSpacer/>
                                        @*    <MudBadge Origin="Origin.CenterRight" Color="Color.Primary" Content="@GetVacancyCategoryCount(cat)"></MudBadge> *@
                                    </div>
                                </MudNavLink>
                            }
                        </MudNavMenu>
                    </MudExpansionPanel>
                </MudHidden>
            </MudItem>
            <MudItem lg="10" md="8" sm="12">
                @if (_pagedList?.Items != null)
                {
                    <MudGrid>
                        @foreach (var vacancy in _pagedList.Items)
                        {
                            <MudItem xs="12" md="12" lg="6">
                                <a href="/jobs/@vacancy.Slug">
                                    <MudCard Class="rounded-lg">
                                        <MudCardContent>
                                            <MudText Style="color: #129fd7;" Typo="Typo.h5">
                                                <b>@vacancy.Title</b>
                                            </MudText>
                                            <MudText Typo="Typo.body2" Style="color:rgb(128,128,128)">
                                                <small>
                                                    <b>@ContentService["VacancyDetails:Posted"] @DateTimeConvertToStringService.GetDisplayPostedDate(vacancy.PublishDate)</b>
                                                </small>
                                            </MudText>
                                            <br/>
                                            <MudText>@vacancy.ShortDescription</MudText>
                                            <MudGrid>
                                                <MudItem>
                                                    @{
                                                        var endDateResult = DateTimeConvertToStringService.GetDeadlineOrEndDateDisplayDate(vacancy.EndDate);
                                                        var endDateStyle = $"color:{endDateResult.Color}";
                                                        <MudText Typo="Typo.caption" Style="@endDateStyle">
                                                            @ContentService["VacancyDetails:End Date"] <b>@endDateResult.DisplayDate</b>
                                                        </MudText>
                                                    }
                                                </MudItem>
                                            </MudGrid>
                                            @if (vacancy.Tags != null)
                                            {
                                                <br/>
                                                <MudChipSet @bind-SelectedChips="_selectedChip" MultiSelection="true" Filter="false">
                                                    @foreach (var tag in vacancy.Tags)
                                                    {
                                                        <MudChip Text="@tag" Size="Size.Small"/>
                                                    }
                                                </MudChipSet>
                                            }
                                        </MudCardContent>
                                    </MudCard>
                                </a>
                            </MudItem>
                        }
                    </MudGrid>
                    <br/>
                    <MudPagination Color="Color.Info" Variant="Variant.Outlined" Count="@_pagedList.TotalPages" SelectedChanged="Callback"/>
                }
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    private PagedList<JobVacancyListDto> _pagedList = new();
    private PagedListQuery<JobVacancyListDto> _query = new();
    private MudChip[] _selectedChip;
    private string _selectedCategory = null;
    private List<string> _vacancyCategories;

    protected override async Task OnInitializedAsync()
    {
        var currentUri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(currentUri.Query).TryGetValue("page", out var page))
        {
            _query.Page = int.Parse(page);
        }

        if (QueryHelpers.ParseQuery(currentUri.Query).TryGetValue("pageSize", out var pageSize))
        {
            _query.PageSize = int.Parse(pageSize);
        }

        if (currentUri.Query.IsNullOrEmpty())
        {
            _query.Page = 1;
            _query.PageSize = 10;
        }

        _pagedList = await JobsService.GetJobs(_query);
        StateHasChanged();
    }

    private async Task Callback(int page)
    {
        try
        {
            _query.Page = page;
            var queryParameters = new Dictionary<string, string>
            {
                { "page", _query.Page.ToString() },
                { "pageSize", _query.PageSize.ToString() }
            };
            var queryString = QueryHelpers.AddQueryString("JobsPagedList", queryParameters);
            _pagedList = await JobsService.GetJobs(_query);
            StateHasChanged();
            NavigationManager.NavigateTo(queryString);
        }
        catch (Exception ex)
        {
            Console.WriteLine("errror:" + ex.Message);
        }
    }

    private void SelectCategory(string cats = null)
    {
        _selectedCategory = cats;
        //FilteredVacancies = string.IsNullOrEmpty(cats) ? Vacancies : Vacancies.Where(j => j.Category == cats).ToList();
    }

}