@page "/JobsPagedList"
@using MRA.Jobs.Application.Contracts.JobVacancies.Responses
@using MRA.Jobs.Client.Services.VacanciesServices.Jobs
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.IdentityModel.Tokens
@using MRA.BlazorComponents.Configuration
@using MRA.Jobs.Client.Services.ConverterService
@inject IJobsService JobsService
@inject NavigationManager NavigationManager
@inject IDateTimeConvertToStringService DateTimeConvertToStringService

<MudGrid Style="margin-top: 15px;">
    <MudItem lg="12">
        <MudStack Row="true">
            <MudText Typo="Typo.h4">
                <b>Jobs</b>
            </MudText>
            <MudSpacer/>
            <MudItem lg="4">
                <MudTextField T="string" Variant="Variant.Outlined" AdornmentIcon="@Icons.Material.Filled.Search"
                              @bind-Value="@_search" Label=@ContentService["VacanciesList:Search"] Class="rounded-lg"
                              Margin="Margin.Dense" Adornment="Adornment.End" OnAdornmentClick="SearchVacancy"/>
            </MudItem>
        </MudStack>
    </MudItem>
    <MudItem lg="12">
        <MudGrid>
            <MudItem xl="2" lg="3" md="4" sm="12">
                <MudExpansionPanels MultiExpansion="true">
                    <MudExpansionPanel IsExpanded="true" Dense="true">
                        <TitleContent>
                            <MudText>Categories</MudText>
                        </TitleContent>
                        <ChildContent>
                            <MudNavMenu Rounded="true" Color="Color.Primary" Class="pa-2">
                                <MudNavLink OnClick="@(() => SelectCategory())"
                                            Class="@(_selectedCategory == null ? "mud-chip-text mud-chip-color-primary" : "")">
                                    <div class="customTabContainer">
                                        <div class="customTabContainerLeft">
                                            <MudText>
                                                <b>@ContentService["VacanciesList:All"]</b>
                                            </MudText>
                                        </div>
                                        <div class="customTabContainerRight">
                                        </div>
                                    </div>
                                </MudNavLink>
                                @if (!_vacancyCategories.IsNullOrEmpty())
                                {
                                    @foreach (var cat in _vacancyCategories)
                                    {
                                        <MudNavLink OnClick="@(() => SelectCategory(cat))" Class="@(_selectedCategory == cat ? "mud-chip-text mud-chip-color-primary" : "")">
                                            <div class="d-flex flex-grow-1">
                                                <MudText>
                                                    <b>@cat</b>
                                                </MudText>
                                                <MudSpacer/>
                                                @* //    <MudBadge Origin="Origin.CenterRight" Color="Color.Primary" Content="@GetVacancyCategoryCount(cat)"></MudBadge> *@
                                            </div>
                                        </MudNavLink>
                                    }
                                }

                            </MudNavMenu>
                        </ChildContent>
                    </MudExpansionPanel>
                    <MudExpansionPanel Text="Tags" IsExpanded="true" Dense="true">
                        <MudChipSet MultiSelection="true" Filter="true">
                            @if (_tags != null)
                            {
                                @foreach (var tag in _tags.Order())
                                {
                                    <MudChip Text="@tag" Variant="Variant.Text" Color="Color.Default" SelectedColor="Color.Primary"/>
                                }
                            }
                        </MudChipSet>
                    </MudExpansionPanel>

                </MudExpansionPanels>


            </MudItem>
            <MudItem xl="10" lg="9" md="8" sm="12" Style="bottom: 0; height: 100%">
                @if (_pagedList?.Items != null)
                {
                    <MudGrid>
                        @foreach (var vacancy in _pagedList.Items)
                        {
                            <MudItem xs="12" md="12" lg="6">
                                <a href="/jobs/@vacancy.Slug">
                                    <MudCard Class="rounded-lg">
                                        <MudCardContent>
                                            <MudText Style="color: #129fd7;" Typo="Typo.h5">
                                                <b>@vacancy.Title</b>
                                            </MudText>
                                            <MudText Typo="Typo.body2" Style="color:rgb(128,128,128)">
                                                <small>
                                                    <b>@ContentService["VacancyDetails:Posted"] @DateTimeConvertToStringService.GetDisplayPostedDate(vacancy.PublishDate)</b>
                                                </small>
                                            </MudText>
                                            <br/>
                                            <MudText>@vacancy.ShortDescription</MudText>
                                            <MudGrid>
                                                <MudItem>
                                                    @{
                                                        var endDateResult = DateTimeConvertToStringService.GetDeadlineOrEndDateDisplayDate(vacancy.EndDate);
                                                        var endDateStyle = $"color:{endDateResult.Color}";
                                                        <MudText Typo="Typo.caption" Style="@endDateStyle">
                                                            @ContentService["VacancyDetails:End Date"] <b>@endDateResult.DisplayDate</b>
                                                        </MudText>
                                                    }
                                                </MudItem>
                                            </MudGrid>
                                            @if (vacancy.Tags != null)
                                            {
                                                <br/>
                                                <MudChipSet @bind-SelectedChips="_selectedChip" MultiSelection="true" Filter="false">
                                                    @foreach (var tag in vacancy.Tags)
                                                    {
                                                        <MudChip Text="@tag" Size="Size.Small"/>
                                                    }
                                                </MudChipSet>
                                            }
                                        </MudCardContent>
                                    </MudCard>
                                </a>
                            </MudItem>
                        }
                    </MudGrid>
                    <br/>
                    @if (_pagedList.TotalPages > 1)
                    {
                        <MudStack Row="true" Style="bottom: 0">
                            <MudSpacer/>
                             <MudPagination Color="Color.Info" Variant="Variant.Outlined" Selected="_selectedPage"
                                               Count="@_pagedList.TotalPages" SelectedChanged="Callback"/>
                        </MudStack>
                    }
                }
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    private PagedList<JobVacancyListDto> _pagedList = new();
    private PagedListQuery<JobVacancyListDto> _query = new();
    private MudChip[] _selectedChip;
    private string _selectedCategory = null;
    private List<string> _vacancyCategories;

    private List<string> _tags;
    private string _selectedTagsValue = "";
    private IEnumerable<string> _tagsOptions { get; set; } = new HashSet<string>();
    private string _search = "";
    private int _selectedPage=1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SearchVacancy();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var currentUri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(currentUri.Query).TryGetValue("page", out var page))
            _query.Page = int.Parse(page);

        if (QueryHelpers.ParseQuery(currentUri.Query).TryGetValue("pageSize", out var pageSize))
            _query.PageSize = int.Parse(pageSize);

        if (QueryHelpers.ParseQuery(currentUri.Query).TryGetValue("filters", out var filters))
        {
            _query.Filters = filters;
            _search = ExtractSearch(filters);
        }

        if (currentUri.Query.IsNullOrEmpty())
        {
            _query.Page = 1;
            _query.PageSize = 10;
        }

        if (_query != null) _selectedPage = (int)_query.Page;
        _tags = (await HttpClient.GetFromJsonAsync<List<string>>(Configuration.GetJobsUrl("tags"))).Result;
        StateHasChanged();
    }


    private async Task Callback(int page)
    {
        _query.Page = page;
        _selectedPage = page;

      await  SearchVacancy();
    }

    private void SelectCategory(string cats = null)
    {
        _selectedCategory = cats;
    }

    private async Task SearchVacancy()
    {
        _query.Filters = GetFilters();
     
        var queryParameters = new Dictionary<string, string>
        {
            { "page", _query.Page.ToString() },
            { "pageSize", _query.PageSize.ToString() },
            { "filters", _query.Filters }
        };
        var queryString = QueryHelpers.AddQueryString("JobsPagedList", queryParameters);
        _pagedList = await JobsService.GetJobs(_query);
        StateHasChanged();
        NavigationManager.NavigateTo(queryString);
    }

    private string GetFilters()
    {
        var filters = new List<string>();
        if (!string.IsNullOrEmpty(_search)) filters.Add($"Title@={_search}");

        return filters.Any() ? string.Join(",", filters) : "";
    }

    private string ExtractSearch(string filters)
    {
        var filterList = filters.Split(',');
        foreach (var filter in filterList)
        {
            if (filter.StartsWith("Title@="))
            {
                return filter.Substring("Title@=".Length);
            }
        }

        return "";
    }

}