@page "/JobsPagedList"
@using MRA.Jobs.Application.Contracts.JobVacancies.Responses
@using MRA.Jobs.Client.Services.VacanciesServices.Jobs
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.IdentityModel.Tokens
@using MRA.BlazorComponents.Configuration
@using MRA.Jobs.Application.Contracts.JobVacancies.Queries.GetJobs
@inject IJobsService JobsService
@inject NavigationManager NavigationManager

<MudGrid Style="margin-top: 15px;">
    <MudItem lg="12">
        <MudStack Row="true">
            <MudText Typo="Typo.h4">
                <b>Jobs</b>
            </MudText>
            <MudSpacer/>
            <MudItem lg="6">
                <MudTextField T="string" Variant="Variant.Outlined" TextChanged="SearchVacancy" Immediate="true"
                              @bind-Value="@_search" Label=@ContentService["VacanciesList:Search"] Class="rounded-lg"
                              Margin="Margin.Dense" OnAdornmentClick="@(() => _search = string.Empty)"
                              AdornmentIcon="@_adornmentIcon" Adornment="Adornment.End"/>
                <div>
                    @if (_selectedChipsTags != null)
                    {
                        @foreach (var selectedChipsTag in _selectedChipsTags)
                        {
                            <MudChip Text="@($"{ContentService["Tag"]}: {selectedChipsTag.Text}")" OnClose="Callback" CloseIcon="@Icons.Material.Filled.Close"/>
                        }
                    }
                </div>
            </MudItem>

        </MudStack>

    </MudItem>
    <MudItem lg="12">
        <MudGrid>
            <MudItem xl="2" lg="3" md="4" sm="12">
                <MudExpansionPanels MultiExpansion="true">
                    <MudExpansionPanel IsExpanded="true" Dense="true">
                        <TitleContent>
                            <MudText>Categories</MudText>
                        </TitleContent>
                        <ChildContent>
                            <MudNavMenu Rounded="true" Color="Color.Primary" Class="pa-2">
                                <MudNavLink OnClick="@(() => SelectCategory())"
                                            Class="@(_selectedCategory == null ? "mud-chip-text mud-chip-color-primary" : "")">
                                    <div class="customTabContainer">
                                        <div class="customTabContainerLeft">
                                            <MudText>
                                                <b>@ContentService["VacanciesList:All"]</b>
                                            </MudText>
                                        </div>
                                        <div class="customTabContainerRight">
                                        </div>
                                    </div>
                                </MudNavLink>
                                @if (!_vacancyCategories.IsNullOrEmpty())
                                {
                                    @foreach (var cat in _vacancyCategories)
                                    {
                                        <MudNavLink OnClick="@(() => SelectCategory(cat))" Class="@(_selectedCategory == cat ? "mud-chip-text mud-chip-color-primary" : "")">
                                            <div class="d-flex flex-grow-1">
                                                <MudText>
                                                    <b>@cat</b>
                                                </MudText>
                                                <MudSpacer/>
                                                @* //    <MudBadge Origin="Origin.CenterRight" Color="Color.Primary" Content="@GetVacancyCategoryCount(cat)"></MudBadge> *@
                                            </div>
                                        </MudNavLink>
                                    }
                                }

                            </MudNavMenu>
                        </ChildContent>
                    </MudExpansionPanel>
                    <MudExpansionPanel Text="Tags" IsExpanded="true" Dense="true">
                        <MudChipSet SelectedChipsChanged="SelectMudChip"
                                    MultiSelection="true" Filter="true">
                            @if (_tags != null)
                            {
                                @foreach (var tag in _tags.Order())
                                {
                                    <MudChip Text="@tag" Variant="Variant.Text" Color="Color.Default" SelectedColor="Color.Primary"/>
                                }
                            }
                        </MudChipSet>
                    </MudExpansionPanel>

                </MudExpansionPanels>


            </MudItem>
            <MudItem xl="10" lg="9" md="8" sm="12" Style="bottom: 0; height: 100%">
                @if (_pagedList?.Items != null)
                {
                    <MudGrid>
                        @foreach (var vacancy in _pagedList.Items)
                        {
                            <MudItem xs="12" md="12" lg="6">
                                <a href="/jobs/@vacancy.Slug">
                                    <MudCard Class="rounded-lg">
                                        <MudCardContent >
                                            <MudText Typo="Typo.h5">
                                                <b>
                                                    <MudHighlighter Text="@vacancy.Title" HighlightedText="@_search" Markup="true"/>
                                                </b>
                                            </MudText>
                                            <MudText > @vacancy.ShortDescription </MudText >
                                            @if (vacancy.Tags != null)
                                            {
                                                <br/>
                                                <MudChipSet MultiSelection="true" Filter="false" Style="z-index: 9999">
                                                    @foreach (var tag in vacancy.Tags)
                                                    {
                                                        <MudChip Text="@tag" Size="Size.Small" Default="true"/>
                                                    }
                                                </MudChipSet>
                                            }
                                        </MudCardContent >
                                    </MudCard >
                                </a >
                            </MudItem>
                        }
                    </MudGrid>
                    <br/>
                    <MudStack Row="true" Style="bottom: 0">
                        <MudSpacer/>
                        <MudItem>
                            <div class="d-flex flex-grow-1">
                                <div class="flex-none d-flex py-lg-3">
                                    <MudText Typo="Typo.body2" Style="bottom: 0; top: auto">
                                        @ContentService["Per Page"]
                                    </MudText>
                                </div>
                                <div class=""></div>
                                <div style="margin-left:5px; ">
                                    <MudStack Row="true">
                                        <MudSelect Dense="true" T="int" Value="@_perPage" ValueChanged="PageSizeChange"
                                                   Variant="Variant.Outlined" Margin="Margin.Dense" Style="width: 75px; font-size: 10px;">
                                            <MudSelectItem T="int" Value="10"/>
                                            <MudSelectItem T="int" Value="20"/>
                                            <MudSelectItem T="int" Value="30"/>
                                            <MudSelectItem T="int" Value="50"/>
                                        </MudSelect>
                                        @if (_pagedList.TotalPages > 1)
                                        {
                                            <MudPagination Color="Color.Primary" Selected="_selectedPage" Size="Size.Small"
                                                           ShowFirstButton="true" ShowLastButton="true" MiddleCount="3" BoundaryCount="1"
                                                           Count="@_pagedList.TotalPages" SelectedChanged="ChangePage"/>
                                        }
                                    </MudStack>
                                </div>
                            </div>
                        </MudItem>
                    </MudStack>
                }
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    private PagedList<JobVacancyListDto> _pagedList = new();
    private GetJobsQueryOptions _query = new();
    private List<MudChip> _selectedChipsTags;
    private string _selectedCategory = null;
    private List<string> _vacancyCategories;

    private List<string> _tags;
    private string _search = "";

    private int _selectedPage = 1;
    private int _perPage = 10;
    private string _adornmentIcon = Icons.Material.Filled.Search;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _tags = (await HttpClient.GetFromJsonAsync<List<string>>(Configuration.GetJobsUrl("tags")))
                .Result.Distinct().ToList();
            await Initialize();
            StateHasChanged();
            await SearchVacancy();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Initialize();
    }

    private Task Initialize()
    {
        var currentUri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(currentUri.Query).TryGetValue("page", out var page))
            _query.Page = int.Parse(page);

        if (QueryHelpers.ParseQuery(currentUri.Query).TryGetValue("pageSize", out var pageSize))
            _query.PageSize = int.Parse(pageSize);

        if (QueryHelpers.ParseQuery(currentUri.Query).TryGetValue("tags", out var tags))
        {
            _query.Tags = tags;
            _selectedChipsTags = tags.ToString().Split(",")
                .Select(tag => new MudChip { Text = tag }).ToList();
        }

        if (QueryHelpers.ParseQuery(currentUri.Query).TryGetValue("filters", out var filters))
        {
            _query.Filters = filters;
            _search = ExtractSearch(filters);
        }

        if (currentUri.Query.IsNullOrEmpty())
        {
            _query.Page = 1;
            _query.PageSize = 10;
        }

        if (_query.Page != null) _selectedPage = (int)_query.Page;
        if (_query.PageSize != null) _perPage = (int)_query.PageSize;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task ChangePage(int page)
    {
        _query.Page = page;
        _selectedPage = page;

        await SearchVacancy();
    }

    private void SelectCategory(string cats = null)
    {
        _selectedCategory = cats;
    }

    private async Task SearchVacancy()
    {
        _query.Filters = GetFilters();

        _adornmentIcon = _search.IsNullOrEmpty() ? Icons.Material.Filled.Search : Icons.Material.Filled.Clear;

        var queryParameters = new Dictionary<string, string>
        {
            { "page", _query.Page.ToString() },
            { "pageSize", _query.PageSize.ToString() }
        };
        if (!_query.Filters.IsNullOrEmpty()) queryParameters.Add("filters", _query.Filters);
        if (!_query.Tags.IsNullOrEmpty()) queryParameters.Add("tags", _query.Tags);
        var queryString = QueryHelpers.AddQueryString("JobsPagedList", queryParameters);
        _pagedList = await JobsService.GetJobs(_query);
        StateHasChanged();
        NavigationManager.NavigateTo(queryString);
    }

    private string GetFilters()
    {
        var filters = new List<string>();
        if (!string.IsNullOrEmpty(_search)) filters.Add($"Title@={_search}");

        return filters.Any() ? string.Join(",", filters) : "";
    }

    private string ExtractSearch(string filters)
    {
        var filterList = filters.Split(',');
        foreach (var filter in filterList)
        {
            if (filter.StartsWith("Title@="))
            {
                return filter.Substring("Title@=".Length);
            }
        }

        return "";
    }

    private async Task PageSizeChange(int size)
    {
        _query.PageSize = size;
        _perPage = size;
        await SearchVacancy();
    }

    private async Task SelectMudChip(MudChip[] chips)
    {
        _query.Tags = "";
        foreach (var mudChip in chips)
            _query.Tags += $"{mudChip.Text},";

        _selectedChipsTags = chips.ToList();

        _query.Tags = _query.Tags.TrimEnd(',');
        await SearchVacancy();
    }

    private async Task Callback(MudChip chip)
    {
        List<string> tags = _query.Tags.Split(',')
            .Where(tag => !string.IsNullOrWhiteSpace(tag))
            .ToList();

        tags.Remove(chip.Text.Replace($"{ContentService["Tag"]}: ", ""));

        _query.Tags = string.Join(",", tags);

        _selectedChipsTags = tags
            .Select(tag => new MudChip { Text = tag })
            .ToList();

        await SearchVacancy();
    }


}