@page "/trainings/apply/{Slug}"
@using MRA.Jobs.Application.Contracts.Applications.Commands.CreateApplication;
@using MRA.Jobs.Application.Contracts.TrainingVacancies.Responses;
@inject HttpClient httpClient
@inject IApplicationService ApplicationService;
@inject ITrainingService _trainingService
@inject NavigationManager NavigationManager
@using MRA.Jobs.Application.Contracts.VacancyClient;
@using MRA.Jobs.Client.Components.Vacancies

@if (serverError)
{
	<ServerErrorComponent />
}
else
{
	<VacancyApplication Slug="@Slug" application="@application" questionResponses="@questionResponses" vacancy="@training" />
}

@code {
	private bool serverError;

	private VacancyApplicationResponse training;
	private CreateApplicationCommand application;
	public Dictionary<string, string> questionResponses = new();

	[Parameter]
	public string Slug { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var response = await _trainingService.GetBySlug(Slug);

			if (response != null)
			{
				training = new VacancyApplicationResponse
					{
						Id = response.Id,
						Title = response.Title,
						Description=response.Description,
						VacancyQuestions = response.VacancyQuestions
					};
				application = new CreateApplicationCommand
					{
						VacancyId = training.Id,
						VacancyResponses = training.VacancyQuestions.Select(q => new VacancyResponseDto
						{
							VacancyQuestion = new VacancyQuestionDto { Question = q.Question }
						})
					};

				foreach (var question in training.VacancyQuestions)
				{
					questionResponses[question.Question] = "";
				}
			}
		}
		catch (Exception)
		{
			serverError = true;
			StateHasChanged();
		}
	}
}