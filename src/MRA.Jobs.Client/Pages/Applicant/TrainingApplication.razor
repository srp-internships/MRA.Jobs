@page "/trainings/apply/{Slug}"
@using MRA.Jobs.Application.Contracts.Applications.Commands.CreateApplication;
@using MRA.Jobs.Application.Contracts.TrainingVacancies.Responses;
@inject HttpClient httpClient
@inject IApplicationService ApplicationService;
@inject ITrainingService _trainingService
@inject NavigationManager NavigationManager
@using MRA.Jobs.Application.Contracts.VacancyClient;
@using MRA.Jobs.Client.Components.Vacancies

<VacancyApplication Slug="@Slug" application="@application" questionResponses="@questionResponses" taskResponses="@tasksResponses" vacancy="@training" />

@code {
	private VacancyApplicationResponse training;
	private CreateApplicationCommand application;
	public Dictionary<string, string> questionResponses = new();
	public Dictionary<string, string> tasksResponses = new();

	[Parameter]
	public string Slug { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var response = await _trainingService.GetBySlug(Slug);

		if (response != null)
		{
			training = new VacancyApplicationResponse
				{
					Id = response.Id,
					Title = response.Title,
					VacancyTasks=response.VacancyTasks,
					VacancyQuestions = response.VacancyQuestions
				};
			application = new CreateApplicationCommand
				{
					VacancyId = training.Id,
					VacancyResponses = training.VacancyQuestions.Select(q => new VacancyResponseDto
					{
						VacancyQuestion = new VacancyQuestionDto { Question = q.Question }
					}),
					TaskResponses = training.VacancyTasks.Select(t => new TaskResponseDto
					{
						TaskId = t.Id,
						Code = t.Template
					})
				};

			foreach (var question in training.VacancyQuestions)
			{
				questionResponses[question.Question] = "";
			}
			foreach (var task in training.VacancyTasks)
			{
				tasksResponses[task.Template] = "";
			}
		}
	}
}