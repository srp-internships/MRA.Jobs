@page "/jobs/Applytojobs/{Slug}"
@using MRA.Jobs.Application.Contracts.Applications.Commands.CreateApplication;
@using MRA.Jobs.Application.Contracts.JobVacancies.Responses;
@inject HttpClient httpClient
@inject IApplicationService ApplicationService;
@inject IVacancyService VacancyService
@inject NavigationManager NavigationManager

<div class="container">

	<h1>Apply for training - @_vacancy.Title</h1>

	<p>Fill out the form below to apply for training:</p>

	<EditForm Model="@createApplication" OnValidSubmit="Apply">
		<FluentValidationValidator />
		<div class="form-group">
			<label for="CoverLetter">Tell us about yourself (minimum 150 characters):</label>
			<InputTextArea id="CoverLetter" @bind-Value="createApplication.CoverLetter" class="form-control" rows="10"></InputTextArea>
			<small><ValidationMessage For="@(() =>createApplication.CoverLetter)" class="text-danger" /></small>
		</div>
		@if (_vacancy != null)
		{
			@if (_vacancy.VacancyQuestions.Count() > 0)
			{
				<div>
					<p class="fs-3">Questions</p>
					@foreach (var question in _vacancy.VacancyQuestions)
					{
						<label for="question" class="form-label"><span class="text-danger">*</span>@question.Question</label>
						<div class="input-group">
							<input type="text" class="form-control" id="question_@question.Id" required
							@bind="questionResponses[question.Question]">
						</div>
					}
				</div>
			}
		}
		<button type="submit" class="btn btn-primary">Send</button>
	</EditForm>

</div>


@code {
	[Parameter]
	public string Slug { get; set; }
	private CreateApplicationCommand createApplication = new CreateApplicationCommand();
	JobVacancyDetailsDto _vacancy;
	private Dictionary<string, string> questionResponses = new Dictionary<string, string>();
	protected override async Task OnInitializedAsync()
	{
		_vacancy = await VacancyService.GetBySlug(Slug);
		if (_vacancy != null)
		{
			createApplication = new CreateApplicationCommand
				{
					VacancyId = _vacancy.Id,
					VacancyResponses = _vacancy.VacancyQuestions.Select(q => new VacancyResponseDto
					{
						VacancyQuestion = new VacancyQuestionDto { Question = q.Question }
					})
				};
			foreach (var question in _vacancy.VacancyQuestions)
			{
				questionResponses[question.Question] = "";
			}
		}
	}
	private async Task Apply()
	{
		createApplication.VacancyId = _vacancy.Id;
		if (string.IsNullOrWhiteSpace(createApplication.CoverLetter) || questionResponses.Any(qr => string.IsNullOrWhiteSpace(qr.Value)))
		{
			return;
		}
		var updatedResponses = new List<VacancyResponseDto>();

		foreach (var vr in createApplication.VacancyResponses)
		{
			var updatedResponse = new VacancyResponseDto
				{
					VacancyQuestion = vr.VacancyQuestion,
					Response = questionResponses[vr.VacancyQuestion.Question]
				};

			updatedResponses.Add(updatedResponse);
		}
		createApplication.VacancyResponses = updatedResponses;
		await ApplicationService.CreateApplication(createApplication);
		NavigationManager.NavigateTo("/");
	}
}
