@page "/"
@using AltairCA.Blazor.WebAssembly.Cookie
@using MRA.Identity.Application.Contract.User.Responses
@using MRA.Jobs.Client.Identity
@using MRA.Jobs.Client.Components.Home
@using Microsoft.AspNetCore.WebUtilities
@inject IAltairCABlazorCookieUtil cookieUtil
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudGrid Style="margin-top: 5%; margin-bottom: 10%">
    <MudItem xs="12" md="6" Style="padding: 10% 10% 0% 10%;">
        <MudText Typo="Typo.h2">
            <b>
                @ContentService["Home:Hero_Title_1"]
            </b>
        </MudText>
        <MudText Typo="Typo.h2" Color="Color.Primary">
            <b>
                @ContentService["Home:Hero_Title_2"]
            </b>
        </MudText>
        <MudText Typo="Typo.h6">
            @ContentService["Home:Hero_Content"]
        </MudText>
    </MudItem>
    <MudItem xs="12" md="6" Style="padding: 2%">
        <MudImage ObjectFit="ObjectFit.Cover" Style="width: 100%" Src="/images/team/team1.jpeg" Alt="" Elevation="25"
                  Class="rounded-tr-md rounded-tl-xl rounded-br-xl rounded-bl-md mud-elevation-4" />
    </MudItem>
</MudGrid>
<MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudGrid>
        <MudItem xs="12" md="6" Style="padding: 2%">
            <MudImage ObjectFit="ObjectFit.Cover" Style="width: 100%" Src="//www.silkroadprofessionals.com/wp-content/uploads/2022/03/slider2-min.jpeg"
                      Alt="" Elevation="25" Class="rounded-tl-md rounded-tr-xl  rounded-bl-xl rounded-br-md mud-elevation-4" />
        </MudItem>
        <MudItem xs="12" md="6" Style="padding:10%">
            <MudText Typo="Typo.h2">
                <b>
                    @ContentService["Home:BuildAmazing"] <span style="color: var(--mud-palette-primary)">@ContentService["Home:Apps"]</span>
                </b>
            </MudText>
            <MudText Typo="Typo.h6">
                @ContentService["Home:BuildAmazing_Content."]
            </MudText>
        </MudItem>
    </MudGrid>
</MudHidden>
<MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudGrid>
        <MudItem xs="12" md="6" Style="padding: 10% 10% 0% 10%;">
            <MudText Typo="Typo.h2">
                <b>
                    @ContentService["Home:BuildAmazing"] <span style="color: var(--mud-palette-primary)">@ContentService["Home:Apps"]</span>
                </b>
            </MudText>
            <MudText Typo="Typo.h6">
                @ContentService["Home:BuildAmazing_Content."]
            </MudText>
        </MudItem>
        <MudItem xs="12" md="6" Style="padding: 2%">
            <MudImage ObjectFit="ObjectFit.Cover" Style="width: 100%" Src="//www.silkroadprofessionals.com/wp-content/uploads/2022/03/slider2-min.jpeg"
                      Alt="" Elevation="25" Class="rounded-tl-md rounded-tr-xl  rounded-bl-xl rounded-br-md mud-elevation-4" />
        </MudItem>
    </MudGrid>
</MudHidden>

<HowWeWork />
<WhatWeDo />
<About />
<Principles />
<MeetTeam />
<Clients />
<Contact />
<NoVacancyUploadCV />

@code {

    [Inject]
    private AuthenticationStateProvider authStateProvider { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        JwtTokenResponse token = new();
        var currentUri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(currentUri.Query).TryGetValue("atoken", out var atoken))
        {
            token.AccessToken = atoken;
        }
        if (QueryHelpers.ParseQuery(currentUri.Query).TryGetValue("rtoken", out var rtoken))
        {
            token.RefreshToken = rtoken;
        }
        if (QueryHelpers.ParseQuery(currentUri.Query).TryGetValue("vdate", out var vdate))
        {
            DateTime oDate = Convert.ToDateTime(vdate);
            token.AccessTokenValidateTo = oDate;
            await cookieUtil.SetValueAsync("authToken", token, secure: true);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();

            if (QueryHelpers.ParseQuery(currentUri.Query).TryGetValue("page", out var page))
                navigationManager.NavigateTo($"/{page}");
            else
                navigationManager.NavigateTo("/");
        }
    }
}