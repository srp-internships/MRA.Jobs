@page "/dashboard/jobs"
@layout Dashboard
@using MRA.Jobs.Application.Contracts.JobVacancies.Responses;
@using MRA.Jobs.Application.Contracts.VacancyCategories.Responses;
@using MRA.Jobs.Client.Components.Dialogs;
@using static MRA.Jobs.Application.Contracts.Dtos.Enums.ApplicationStatusDto;
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages
@inject IVacancyService VService
@inject IJSRuntime jsRuntime

<MudText Typo="Typo.h4"><b>Jobs</b></MudText>
@if (_serverError)
{
    <ServerErrorComponent/>
}
else
{
    @if (_category == null)
    {
         <div style="text-align: center;">
              <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
        </div>
    }
    else
    {
        <MudGrid>
            <MudItem Class="d-flex justify-end flex-grow-1 gap-4" Elevation="0" lg="12">
                <MudCardHeader>
                    <MudButton hidden="@_panelOpenState" Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => _panelOpenState = true)">
                        <MudText>Create New Job Vacancy</MudText>
                    </MudButton>
                </MudCardHeader>
            </MudItem>
            <MudItem lg="12" hidden="@(!_panelOpenState)">
                <EditForm Model="@VService.creatingNewJob">
                    <FluentValidationValidator/>
                    <MudGrid>
                        <MudItem xs="12" lg="6">
                            <MudCard Class="rounded-4 mud-elevation-4">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Style="color:#808080">
                                            <b>@_createOrEditHeader</b>
                                        </MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudTextField @bind-Value="@VService.creatingNewJob.Title" Label="Title"
                                                  Variant="Variant.Outlined" For="@(() => VService.creatingNewJob.Title)"/>
                                    <MudTextField Lines="4" @bind-Value="@VService.creatingNewJob.ShortDescription" Label="ShortDescription"
                                                  Variant="Variant.Outlined" For="@(() => VService.creatingNewJob.ShortDescription)"/>
                                    <MudTextField Lines="10" @bind-Value="@VService.creatingNewJob.Description" Label="Description"
                                                  Variant="Variant.Outlined" For="@(() => VService.creatingNewJob.Description)"/>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" lg="6">
                             <MudCard Class="rounded-4 mud-elevation-4">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Style="color: rgb(128,128,128)">
                                            <b>Vacancy details</b>
                                        </MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudGrid>
                                        <MudItem xs="12" lg="12">
                                            <MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">Category</MudText>
                                            <MudSelect T="string" Label="Select category" @bind-Value="@_selectedCategory" Variant="Variant.Outlined">
                                                @foreach (var cat in _category)
                                                {
                                                    <MudSelectItem Value="@cat.Name"/>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs="12" lg="7">
                                            <MudText Style="color:rgb(128,128,128)">Required year(s) of experience</MudText>
                                            <MudTextField @bind-Value="@VService.creatingNewJob.RequiredYearOfExperience" Label="" Variant="Variant.Outlined"></MudTextField>
                                        </MudItem>
                                        <MudItem xs="12" lg="5">
                                            <MudText Style="color:rgb(128,128,128)">Work Schedule</MudText>
                                            <MudSelect @bind-Value="VService.creatingNewJob.WorkSchedule" Variant="Variant.Outlined">
                                                @foreach (var item in _value2Items)
                                                {
                                                    <MudSelectItem Value="@item">@item.ToString()</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs=12 lg="12">
                                            <MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">Publish Date</MudText>
                                            <MudGrid>
                                                <MudItem xs=12 lg="6">
                                                    <MudDatePicker @bind-Date="@VService.creatingNewJob.PublishDate" Variant="Variant.Outlined"
                                                                   Label="Date" For="@(() => VService.creatingNewJob.PublishDate)"/>
                                                </MudItem>
                                                <MudItem xs=12 lg="6">
                                                    <MudTimePicker AmPm="true" @bind-Time="_publishDateTime" Variant="Variant.Outlined" Label="Time"/>
                                                </MudItem>
                                            </MudGrid>
                                        </MudItem>
                                        <MudItem xs=12 lg="12">
                                            <MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">End Date</MudText>
                                            <MudGrid>
                                                <MudItem xs=12 lg="6">
                                                    <MudDatePicker @bind-Date="@VService.creatingNewJob.EndDate" Variant="Variant.Outlined"
                                                                   Label="Date" For="@(() => VService.creatingNewJob.EndDate)"/>

                                                </MudItem>
                                                <MudItem xs=12 lg="6">
                                                    <MudTimePicker AmPm="true" @bind-Time="_endDateTime" Variant="Variant.Outlined" Label="Time"/>
                                                </MudItem>
                                            </MudGrid>
                                        </MudItem>
                                    </MudGrid>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    </MudGrid>
                    <MudGrid>
                        <MudItem xs="12" lg="6">
                            <MudCard Class="rounded-4 mud-elevation-4">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Style="color:rgb(128,128,128)">
                                            <b>Tasks</b>
                                        </MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudExpansionPanels MultiExpansion="true">
                                        @foreach (var task in _tasks)
                                        {
                                            <MudExpansionPanel Text="@task.Title">
                                                <MudText> Description: @task.Description</MudText>
                                                <MudText>Template:</MudText>
                                                <MudElement HtmlTag="pre">
                                                    <MudElement HtmlTag="code">
                                                        @task.Template
                                                    </MudElement>
                                                </MudElement>
                                                <MudText>Test:</MudText>
                                                <MudElement HtmlTag="pre">
                                                    <MudElement HtmlTag="code">
                                                        @task.Test
                                                    </MudElement>
                                                </MudElement>
                                                <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                                           Variant="Variant.Filled" OnClick="() => RemoveTask(task.Title)" aria-label="delete">
                                                    <MudText>Remove</MudText>
                                                </MudButton>
                                            </MudExpansionPanel>
                                        }
                                    </MudExpansionPanels>
									@if (_panelOpenState != false)
									{
										<br />
										<MudTextField @bind-Value="newTitle" OnKeyDown="@OnKeyDown" Label="Title"
													  Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary" />
										<MudTextField Lines="5" @bind-Value="newDescription" OnKeyDown="@OnKeyDown" Label="Description"
													  Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary" />
										<MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">Template</MudText>
										<StandaloneCodeEditor @ref="_editorTemplate" Id="sample-code-editor-123" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" OnContextMenu="OnContextMenu" />
										<MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">Test</MudText>
										<StandaloneCodeEditor @ref="_editorTest" Id="sample-code-editor-456" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" OnContextMenu="OnContextMenu" />
										<MudButton Variant="Variant.Filled" Color="Color.Primary"
												   @onclick="@AddTask" Id="AddTask">
											<MudText>Add Task</MudText>
										</MudButton>
									}

                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" lg="6">
                              <MudCard Class="rounded-4 mud-elevation-4">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Style="color:rgb(128,128,128)">
                                            <b>Vacancy questions</b>
                                        </MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    @foreach (var ques in _questions)
                                    {
                                        <MudText Typo="Typo.subtitle1">
                                            <MudChip>
                                                <MudIcon Icon="@Icons.Material.Filled.QuestionMark"/>
                                            </MudChip>

                                            @ques.Question
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveQuestion(ques.Question)" aria-label="delete"></MudIconButton>
                                        </MudText>
                                        <MudDivider/>
                                    }
                                    <MudTextField @bind-Value="_newQuestion" OnKeyDown="@OnKeyDown" OnAdornmentClick="AddQuestions" Label="New question" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon=@Icons.Material.Filled.Add AdornmentColor="Color.Secondary"/>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" lg="12">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@HandleSubmit"
                                       Id="btnInsert" hidden="@_isInserting">
                                <MudText>
                                    Create
                                </MudText>
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Warning" @onclick="@HandleUpdate"
                                       Id="btnUpdate" hidden="@_isUpdating">
                                <MudText>
                                    Save changes
                                </MudText>
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Dark" @onclick="@HandleCancel"
                                       Id="btnUpdate">
                                <MudText>
                                    Cancel
                                </MudText>
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudItem>
        </MudGrid>
        <DeleteConfirmation @bind-IsOpen="@_isDialogOpen" OnConfirm="DeleteItem"/>
        <MudTable Items="@_vacancies" hidden="@_panelOpenState" Class="text-center" Breakpoint="Breakpoint.Md">
            <HeaderContent>
                <MudTh><strong>Title</strong></MudTh>
                <MudTh><strong>ShortDescription</strong></MudTh>
                <MudTh><strong>Category</strong></MudTh>
                <MudTh><strong>PublishDate</strong></MudTh>
                <MudTh><strong>EndDate</strong></MudTh>
                <MudTh><strong>WorkSchedule</strong></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Short description">
                    @(context.ShortDescription.Length > 50 ? context.ShortDescription.Substring(0, 50) : context.ShortDescription)
                </MudTd>
                <MudTd DataLabel="Category">@context.Category</MudTd>
                <MudTd DataLabel="Publish date">@context.PublishDate.ToString("D")</MudTd>
                <MudTd DataLabel="End date">@context.EndDate.ToString("D")</MudTd>
                <MudTd DataLabel="Work schedule">@context.WorkSchedule</MudTd>
                <MudTd DataLabel="Action">
                    <MudIconButton @onclick="() => OnDeleteClick(context.Slug)" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" Color="Color.Error" Size="Size.Medium"/>
                    <MudIconButton @onclick="() => OnEditClick(context.Slug)" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Text" Color="Color.Primary" Size="Size.Medium"/>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
}

@code {

    private string _createOrEditHeader = "New Job vacancy";
    private bool _serverError;
    private readonly WorkSchedule[] _value2Items = Enum.GetValues(typeof(WorkSchedule)).Cast<WorkSchedule>().ToArray();


    private List<CategoryResponse> _category;
    private List<JobVacancyListDto> _vacancies;
    private bool _isDialogOpen;
    private string _itemSlugToDelete;
    private bool _panelOpenState;
    private bool _isInserting;
    private bool _isUpdating = true;
    private string _updateSlug;
    private string _selectedCategory = string.Empty;
    private string _newQuestion = string.Empty;
	private string newDescription = string.Empty;
	private string newTemplate = string.Empty;
	private string newTest = string.Empty;
	private string newTitle = string.Empty;
    private List<VacancyTaskDto> _tasks = new();

    private List<VacancyQuestionDto> _questions = new();

    private TimeSpan? _publishDateTime;
    private TimeSpan? _endDateTime;
	private StandaloneCodeEditor _editorTemplate = null!;
	private StandaloneCodeEditor _editorTest = null!;
	private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
	{
		if (editor == _editorTest)
		{
			return new StandaloneEditorConstructionOptions
				{
					Language = "csharp",
					GlyphMargin = true,
					AutomaticLayout = true,
					Value = "using Microsoft.VisualStudio.TestTools.UnitTesting;\n\n" +
							"namespace TestProject\n" +
							"{\n" +
							"    [TestClass]\n" +
							"    public class UnitTest1\n" +
							"    {\n" +
							"        [TestMethod]\n" +
							"        public void TestMethod1()\n" +
							"        {\n" +
							"        //You can write a test here  \n" +
							"        }\n" +
							"    }\n" +
							"}\n"
				};
		}
		else
		{
			return new StandaloneEditorConstructionOptions
				{
					Language = "csharp",
					GlyphMargin = true,
					AutomaticLayout = true,
					Value = "using System;\n\n" +
										"public class Program\n" +
										"{\n" +
										"    public static void Main()\n" +
										"    {\n" +
										"        Console.WriteLine(\"Hello, world!\");\n" +
										"    }\n" +
										"}\n"
				};
		}

	}

	private async Task EditorOnDidInit()
	{
		await _editorTest.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.KeyH, (args) =>
		{
			Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
		});
		await _editorTemplate.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.KeyH, (args) =>
		{
			Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
		});

		var newDecorations = new ModelDeltaDecoration[]
		{
			new ModelDeltaDecoration
			{
				Range = new BlazorMonaco.Range(3,1,3,1),
				Options = new ModelDecorationOptions
				{
					IsWholeLine = true,
					ClassName = "decorationContentClass",
					GlyphMarginClassName = "decorationGlyphMarginClass"
				}
			}
		};

		decorationIds = await _editorTest.DeltaDecorations(null, newDecorations);
		decorationIds = await _editorTemplate.DeltaDecorations(null, newDecorations);
	}

	private string[] decorationIds = new string[0];

	private void OnContextMenu(EditorMouseEvent eventArg)
	{
		Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
	}
	
    void OnDeleteClick(string slug)
    {
        _itemSlugToDelete = slug;
        _isDialogOpen = true;
    }

    private async Task DeleteItem()
    {
        await VService.OnDelete(_itemSlugToDelete);
        _isDialogOpen = false;
        await LoadData();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _category = await VService.GetAllCategory();
            _vacancies = await VService.GetJobs();
        }
        catch (Exception)
        {
            _serverError = true;
            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        if (_endDateTime.HasValue)
            VService.creatingNewJob.EndDate += _endDateTime.Value;

        if (_publishDateTime.HasValue)
            VService.creatingNewJob.PublishDate += _publishDateTime.Value;
        var catId = _category.First(c => c.Name == _selectedCategory).Id;
        VService.creatingNewJob.CategoryId = catId;
        VService.creatingNewJob.VacancyQuestions = _questions;
        VService.creatingNewJob.VacancyTasks = _tasks;
        await VService.OnSaveCreateClick();
        await LoadData();
        Clear();
    }

    private async Task LoadData()
    {
        _vacancies = await VService.GetJobs();
    }


    public async Task OnEditClick(string slug)
    {
    // Получение данных о выбранной вакансии
        var vacancy = await VService.GetBySlug(slug);
        _createOrEditHeader = $"Edit {vacancy.Title}";
        if (vacancy != null)
        {
    // Отображение данных о выбранной вакансии в форме
            VService.creatingNewJob.Title = vacancy.Title;
            VService.creatingNewJob.ShortDescription = vacancy.ShortDescription;
            VService.creatingNewJob.Description = vacancy.Description;
            VService.creatingNewJob.RequiredYearOfExperience = vacancy.RequiredYearOfExperience;
            VService.creatingNewJob.WorkSchedule = vacancy.WorkSchedule;
            if (vacancy.CategoryId.HasValue)
            {
                VService.creatingNewJob.CategoryId = vacancy.CategoryId.Value;
            }
            VService.creatingNewJob.EndDate = vacancy.EndDate;
            VService.creatingNewJob.PublishDate = vacancy.PublishDate;
            _selectedCategory = _category.First(c => c.Id == vacancy.CategoryId).Name;
    // Открытие панели формы
            _panelOpenState = true;
            _isInserting = true;
            _isUpdating = false;
            _updateSlug = slug;
            _questions = vacancy.VacancyQuestions.Select(v =>
                new VacancyQuestionDto
                {
                    Question = v.Question
                }
                ).ToList();
            _tasks = vacancy.VacancyTasks.Select(v =>
                new VacancyTaskDto
                {
                    Title = v.Title,
                    Description = v.Description,
                    Template = v.Template,
                    Test = v.Test
                }).ToList();
        }
    }

    private void RemoveQuestion(string question)
    {
        var q = _questions.FirstOrDefault(t => t.Question == question);
        _questions.Remove(q);
    }

    private void RemoveTask(string title)
    {
        var r = _tasks.FirstOrDefault(t => t.Title == title);
        _tasks.Remove(r);
    }

    private async Task HandleUpdate()
    {
        if (_endDateTime.HasValue)
            VService.creatingNewJob.EndDate += _endDateTime.Value;

        if (_publishDateTime.HasValue)
            VService.creatingNewJob.PublishDate += _publishDateTime.Value;
        VService.creatingNewJob.VacancyQuestions = _questions;
        VService.creatingNewJob.VacancyTasks = _tasks;
        var catId = _category.First(c => c.Name == _selectedCategory).Id;
        VService.creatingNewJob.CategoryId = catId;
        await VService.UpdateJobVacancy(_updateSlug);
        await LoadData();
        Clear();
    }

    public void AddQuestions()
    {
        _questions.Add(new VacancyQuestionDto { Question = _newQuestion });
        _newQuestion = "";
    }

	public async void AddTask()
	{
		_tasks.Add(new VacancyTaskDto
			{
				Title = newTitle,
				Description = newDescription,
				Template = await _editorTemplate.GetValue(),
				Test = await _editorTest.GetValue()
			});
		newTitle = "";
		newDescription = "";
		newTemplate = "";
		newTest = "";
	}

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            await Task.Delay(1);
            AddTask();
            AddQuestions();
        }
    }

    void HandleCancel()
    {
        Clear();
    }

    private void Clear()
    {
        _createOrEditHeader = "New Internship Vacancy";
        VService.creatingNewJob.Title = string.Empty;
        VService.creatingNewJob.ShortDescription = string.Empty;
        VService.creatingNewJob.Description = string.Empty;
        VService.creatingNewJob.RequiredYearOfExperience = 0;
        VService.creatingNewJob.WorkSchedule = 0;
        VService.creatingNewJob.EndDate = DateTime.Now;
        VService.creatingNewJob.PublishDate = DateTime.Now;
        _isInserting = false;
        _isUpdating = true;
        _updateSlug = string.Empty;
        _questions.Clear();
        _tasks.Clear();
        _panelOpenState = false;
    }

}