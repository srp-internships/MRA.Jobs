@page "/dashboard/internship"
@layout Dashboard
@using MRA.Jobs.Application.Contracts.VacancyCategories.Responses;
@using MRA.Jobs.Client.Components.Dialogs;
@using MRA.Jobs.Client.Identity;
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages
@inject ISnackbar Snackbar;
@inject IJSRuntime jsRuntime
@inject IInternshipService InternshipService
@inject ICategoryService CategoryService
@inject IDialogService DialogService

@if (_serverError)
{
    <ServerErrorComponent/>
}
else
{
    @if (_categories == null)
    {
        <div style="text-align: center;">
            <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"/>
        </div>
    }
    else
    {
        <MudGrid>
            <MudItem lg="12">
                <MudCardActions>
                    <MudText Typo="Typo.h4">
                        <b>Internships Vacancy</b>
                    </MudText>
                    <MudSpacer/>
                    <MudButton Disabled="@_panelOpenState" Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => _panelOpenState = !_panelOpenState)">
                        <MudText>Create New Internship Vacancy</MudText>
                    </MudButton>
                </MudCardActions>
            </MudItem>
            <MudItem lg="12" hidden="@(!_panelOpenState)">
                <EditForm Model="@InternshipService.createCommand">
                    <FluentValidationValidator/>
                    <MudGrid>
                        <MudItem xs="12" lg="6">
                            <MudCard Class="rounded-4 mud-elevation-4">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Style="color:rgb(128,128,128)">
                                            <b>@_createOrEditHeader</b>
                                        </MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudTextField @bind-Value="@InternshipService.createCommand.Title" Label="Title"
                                                  Variant="Variant.Outlined" For="@(() => InternshipService.createCommand.Title)"/>
                                    <MudTextField Lines="5" @bind-Value="@InternshipService.createCommand.ShortDescription" Label="ShortDescription"
                                                  Variant="Variant.Outlined" For="@(() => InternshipService.createCommand.ShortDescription)"/>
                                    <MudTextField Lines="14" @bind-Value="@InternshipService.createCommand.Description" Label="Description"
                                                  Variant="Variant.Outlined" For="@(() => InternshipService.createCommand.Description)"/>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" lg="6">
                            <MudCard Class="rounded-4 mud-elevation-4">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Style="color:rgb(128,128,128)">
                                            <b>Vacancy details</b>
                                        </MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudGrid>
                                        <MudItem xs=12 lg="12">
                                            <MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">Category</MudText>
                                            <MudSelect T="string" @bind-Value="@_selectedCategory"
                                                       Variant="Variant.Outlined">
                                                @foreach (var cat in _categories)
                                                {
                                                    <MudSelectItem Value="@cat.Name"/>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs="12" lg="6">
                                            <MudTextField @bind-Value="@InternshipService.createCommand.Duration" Label="Duration"
                                                          Variant="Variant.Outlined" For="@(() => InternshipService.createCommand.Duration)"/>
                                        </MudItem>
                                        <MudItem xs="12" lg="6">
                                            <MudTextField @bind-Value="@InternshipService.createCommand.Stipend" Label="Stipend"
                                                          Variant="Variant.Outlined" For="@(() => InternshipService.createCommand.Stipend)"/>
                                        </MudItem>
                                        <MudItem xs=12 lg="12">
                                            <MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">Publish Date</MudText>
                                            <MudGrid>
                                                <MudItem xs=12 lg="6">
                                                    <MudDatePicker @bind-Date="@InternshipService.createCommand.PublishDate" Variant="Variant.Outlined"
                                                                   Label="Date" For="@(() => InternshipService.createCommand.PublishDate)"/>
                                                </MudItem>
                                                <MudItem xs=12 lg="6">
                                                    <MudTimePicker AmPm="true" @bind-Time="_publishDateTime" Variant="Variant.Outlined" Label="Time"/>
                                                </MudItem>
                                            </MudGrid>
                                        </MudItem>
                                        <MudItem xs=12 lg="12">
                                            <MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">Application Deadline</MudText>
                                            <MudGrid>
                                                <MudItem xs=12 lg="6">
                                                    <MudDatePicker @bind-Date="@InternshipService.createCommand.ApplicationDeadline" Variant="Variant.Outlined"
                                                                   Label="Date" For="@(() => InternshipService.createCommand.ApplicationDeadline)"/>
                                                </MudItem>
                                                <MudItem xs=12 lg="6">
                                                    <MudTimePicker AmPm="true" @bind-Time="_applicationDeadlineTime" Variant="Variant.Outlined" Label="Time"/>
                                                </MudItem>
                                            </MudGrid>
                                        </MudItem>
                                        <MudItem xs=12 lg="12">
                                            <MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">End Date</MudText>
                                            <MudGrid>
                                                <MudItem xs=12 lg="6">
                                                    <MudDatePicker @bind-Date="@InternshipService.createCommand.EndDate" Variant="Variant.Outlined"
                                                                   Label="Date" For="@(() => InternshipService.createCommand.EndDate)"/>

                                                </MudItem>
                                                <MudItem xs=12 lg="6">
                                                    <MudTimePicker AmPm="true" @bind-Time="_endDateTime" Variant="Variant.Outlined" Label="Time"/>
                                                </MudItem>
                                            </MudGrid>
                                        </MudItem>
                                    </MudGrid>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    </MudGrid>
                    <MudGrid>

                        <MudItem xs="12" lg="6">
                            <MudCard Class="rounded-4 mud-elevation-4">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Style="color:rgb(128,128,128)">
                                            <b>Tasks</b>
                                        </MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudExpansionPanels MultiExpansion="true">
                                        @foreach (var task in _tasks)
                                        {
                                            <MudExpansionPanel Text="@task.Title">
                                                <MudText> Description: @task.Description</MudText>
                                                <MudText>Template:</MudText>
                                                <MudElement HtmlTag="pre">
                                                    <MudElement HtmlTag="code">
                                                        @task.Template
                                                    </MudElement>
                                                </MudElement>
                                                <MudText>Test:</MudText>
                                                <MudElement HtmlTag="pre">
                                                    <MudElement HtmlTag="code">
                                                        @task.Test
                                                    </MudElement>
                                                </MudElement>
                                                <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                                           Variant="Variant.Filled" OnClick="() => RemoveTask(task.Title)" aria-label="delete">
                                                    <MudText>Remove</MudText>
                                                </MudButton>
                                            </MudExpansionPanel>
                                        }
                                    </MudExpansionPanels>
                                    @if (_panelOpenState != false)
                                    {
                                        <br/>
                                        <MudTextField @bind-Value="newTitle" OnKeyDown="@OnKeyDown" Label="Title"
                                                      Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary"/>
                                        <MudTextField Lines="5" @bind-Value="newDescription" OnKeyDown="@OnKeyDown" Label="Description"
                                                      Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary"/>
                                        <MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">Template</MudText>
                                        <StandaloneCodeEditor @ref="_editorTemplate" Id="sample-code-editor-123" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" OnContextMenu="OnContextMenu"/>
                                        <MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">Test</MudText>
                                        <StandaloneCodeEditor @ref="_editorTest" Id="sample-code-editor-456" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" OnContextMenu="OnContextMenu"/>
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                                   @onclick="@AddTask" Id="AddTask">
                                            <MudText>Add Task</MudText>
                                        </MudButton>
                                    }
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" lg="6">
                            <MudCard Class="rounded-4 mud-elevation-4">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Style="color:rgb(128,128,128)">
                                            <b>Vacancy questions</b>
                                        </MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    @foreach (var ques in _questions)
                                    {
                                        <MudText Typo="Typo.subtitle1">
                                            <MudChip>
                                                <MudIcon Icon="@Icons.Material.Filled.QuestionMark"/>
                                            </MudChip>

                                            @ques.Question
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveQuestion(ques.Question)" aria-label="delete"></MudIconButton>
                                        </MudText>
                                        <MudDivider/>
                                    }
                                    <MudTextField @bind-Value="_newQuestion" OnKeyDown="@OnKeyDown" OnAdornmentClick="AddQuestions" Label="New question" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon=@Icons.Material.Filled.Add AdornmentColor="Color.Secondary"/>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <MudItem xs="12" lg="12">
                            <MudCardActions>
                                <div hidden="@_isInserting">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@HandleSubmit">
                                        <MudText>
                                            Create
                                        </MudText>
                                    </MudButton>
                                </div >
                                <div hidden="@_isUpdating">
                                    <MudButton Variant="Variant.Filled" Color="Color.Warning" @onclick="@HandleUpdate">
                                        <MudText>
                                            Save changes
                                        </MudText>
                                    </MudButton>
                                </div>
                                <MudButton Variant="Variant.Filled" Color="Color.Dark" @onclick="@HandleCancel" Style="margin-left: 10px;">
                                    <MudText>
                                        Cancel
                                    </MudText>
                                </MudButton>
                            </MudCardActions>

                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudItem>
        </MudGrid>
        <MudTable Items="@_internships"  Breakpoint="Breakpoint.Md" hidden="@_panelOpenState">
            <HeaderContent>
                <MudTh>
                    <strong>Title</strong>
                </MudTh>
                <MudTh>
                    <strong>Short description</strong>
                </MudTh>
                <MudTh>
                    <strong>Duration</strong>
                </MudTh>
                <MudTh>
                    <strong>Stipend</strong>
                </MudTh>
                <MudTh>
                    <strong>Category</strong>
                </MudTh>
                <MudTh>
                    <strong>Publish date</strong>
                </MudTh>
                <MudTh>
                    <strong>Application deadline</strong>
                </MudTh>
                <MudTh>
                    <strong>End date</strong>
                </MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Short description">
                    @(context.ShortDescription.Length > 50 ? context.ShortDescription.Substring(0, 50) : context.ShortDescription)
                </MudTd>
                <MudTd DataLabel="Duration">@context.Duration</MudTd>
                <MudTd DataLabel="Stipend">@context.Stipend</MudTd>
                <MudTd DataLabel="Category">@context.Category</MudTd>
                <MudTd DataLabel="PublishDate">@context.PublishDate.ToString("D")</MudTd>
                <MudTd DataLabel="Application deadline">@context.ApplicationDeadline</MudTd>
                <MudTd DataLabel="EndDate">@context.EndDate.ToString("D")</MudTd>
                <MudTd DataLabel="Action">
                    <MudIconButton @onclick="() => OnDeleteClick(context.Slug)" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" Color="Color.Error" Size="Size.Medium"/>
                    <MudIconButton @onclick="() => OnEditClick(context.Slug)" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Text" Color="Color.Primary" Size="Size.Medium"/>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
        </MudTable>
    }
}

@code {
    private bool _serverError;
    bool _panelOpenState;
    bool _isInserting;
    bool _isUpdating = true;
    string _updateSlug;
    private string _selectedCategory = "";
    private string _newQuestion = string.Empty;
    private string newDescription = string.Empty;
    private string newTemplate = string.Empty;
    private string newTest = string.Empty;
    private string newTitle = string.Empty;
    private List<VacancyQuestionDto> _questions = new();
    private List<CategoryResponse> _categories;
    private List<InternshipVacancyListResponse> _internships;
    private List<VacancyTaskDto> _tasks = new();
    private TimeSpan? _applicationDeadlineTime;
    private TimeSpan? _publishDateTime;
    private TimeSpan? _endDateTime;
    private string _createOrEditHeader = "New Internship Vacancy";

    private StandaloneCodeEditor _editorTemplate = null!;
    private StandaloneCodeEditor _editorTest = null!;

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        if (editor == _editorTest)
        {
            return new StandaloneEditorConstructionOptions
            {
                Language = "csharp",
                GlyphMargin = true,
                AutomaticLayout = true,
                Value = "using Microsoft.VisualStudio.TestTools.UnitTesting;\n\n" +
                        "namespace TestProject\n" +
                        "{\n" +
                        "    [TestClass]\n" +
                        "    public class UnitTest1\n" +
                        "    {\n" +
                        "        [TestMethod]\n" +
                        "        public void TestMethod1()\n" +
                        "        {\n" +
                        "        //You can write a test here  \n" +
                        "        }\n" +
                        "    }\n" +
                        "}\n"
            };
        }
        else
        {
            return new StandaloneEditorConstructionOptions
            {
                Language = "csharp",
                GlyphMargin = true,
                AutomaticLayout = true,
                Value = "using System;\n\n" +
                        "public class Program\n" +
                        "{\n" +
                        "    public static void Main()\n" +
                        "    {\n" +
                        "        Console.WriteLine(\"Hello, world!\");\n" +
                        "    }\n" +
                        "}\n"
            };
        }
    }

    private async Task EditorOnDidInit()
    {
        await _editorTest.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.KeyH, (args) => { Console.WriteLine("Ctrl+H : Initial editor command is triggered."); });
        await _editorTemplate.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.KeyH, (args) => { Console.WriteLine("Ctrl+H : Initial editor command is triggered."); });

        var newDecorations = new ModelDeltaDecoration[]
        {
            new ModelDeltaDecoration
            {
                Range = new BlazorMonaco.Range(3, 1, 3, 1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
        };

        await _editorTest.DeltaDecorations(null, newDecorations);
        await _editorTemplate.DeltaDecorations(null, newDecorations);
    }

    private void OnContextMenu(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        Clear();
        StateHasChanged();
    }

    async Task OnDeleteClick(string slug)
    {
        var vacancy = _internships.FirstOrDefault(c => c.Slug == slug);
        var parameters = new DialogParameters<DialogMudBlazor>();
        parameters.Add(x => x.ContentText, "Do you really want to delete this vacancy?");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DialogMudBlazor>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var response = await InternshipService.Delete(slug);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add($"Deleted", Severity.Success);
                    _internships.Remove(vacancy);
                }
                else
                {
                    Snackbar.Add((await response.Content.ReadFromJsonAsync<CustomProblemDetails>()).Detail, Severity.Error);
                }
                Clear();
            }
            catch (Exception)
            {
                Snackbar.Add("Server is not responding, try latter", Severity.Error);
            }
            StateHasChanged();
        }
    }


    private async Task OnEditClick(string slug)
    {
        var vacancy = await InternshipService.GetBySlug(slug);
        if (vacancy != null)
        {
            _createOrEditHeader = $"Edit {vacancy.Title}";
            InternshipService.createCommand.Title = vacancy.Title;
            InternshipService.createCommand.ShortDescription = vacancy.ShortDescription;
            InternshipService.createCommand.Description = vacancy.Description;
            InternshipService.createCommand.ApplicationDeadline = vacancy.ApplicationDeadline;
            InternshipService.createCommand.Stipend = vacancy.Stipend;
            InternshipService.createCommand.Duration = vacancy.Duration;
            InternshipService.createCommand.EndDate = vacancy.EndDate;
            InternshipService.createCommand.PublishDate = vacancy.PublishDate;
            InternshipService.createCommand.CategoryId = vacancy.CategoryId;
            _selectedCategory = _categories.FirstOrDefault(c => c.Id == vacancy.CategoryId)?.Name;
            _isInserting = true;
            _isUpdating = false;
            _panelOpenState = true;
            _updateSlug = slug;
            _questions = vacancy.VacancyQuestions.Select(v =>
                new VacancyQuestionDto
                {
                    Question = v.Question
                }
                ).ToList();
            _tasks = vacancy.VacancyTasks.Select(v =>
                new VacancyTaskDto
                {
                    Title = v.Title,
                    Description = v.Description,
                    Template = v.Template,
                    Test = v.Test
                }).ToList();
        }
    }

    private void RemoveQuestion(string question)
    {
        var q = _questions.FirstOrDefault(t => t.Question == question);
        _questions.Remove(q);
    }

    private async Task LoadData()
    {
        try
        {
            _internships = await InternshipService.GetAll();
            _categories = await CategoryService.GetAllCategory();
        }
        catch (Exception)
        {
            _serverError = true;
            StateHasChanged();
        }
    }

    private void RemoveTask(string title)
    {
        var r = _tasks.FirstOrDefault(t => t.Title == title);
        _tasks.Remove(r);
    }

    private async Task HandleSubmit()
    {
        var catId = _categories.FirstOrDefault(c => c.Name == _selectedCategory)!.Id;
        InternshipService.createCommand.CategoryId = catId;
        InternshipService.createCommand.VacancyQuestions = _questions;

        if (_applicationDeadlineTime.HasValue)
            InternshipService.createCommand.ApplicationDeadline += _applicationDeadlineTime.Value;

        if (_endDateTime.HasValue)
            InternshipService.createCommand.EndDate += _endDateTime.Value;

        if (_publishDateTime.HasValue)
            InternshipService.createCommand.PublishDate += _publishDateTime.Value;
        try
        {
            InternshipService.createCommand.VacancyTasks = _tasks;
            var result = await InternshipService.Create();
            if (result.IsSuccessStatusCode)
            {
                Snackbar.Add($"{InternshipService.createCommand.Title} created", Severity.Success);
            }
            else
            {
                Snackbar.Add((await result.Content.ReadFromJsonAsync<CustomProblemDetails>()).Detail, Severity.Error);
            }
            await LoadData();
            Clear();
        }
        catch (Exception)
        {
            Snackbar.Add("Server is not responding, try latter", Severity.Error);
        }
    }

    private async Task HandleUpdate()
    {
        InternshipService.createCommand.VacancyQuestions = _questions;
        InternshipService.createCommand.VacancyTasks = _tasks;
        if (_applicationDeadlineTime.HasValue)
            InternshipService.createCommand.ApplicationDeadline += _applicationDeadlineTime.Value;

        if (_endDateTime.HasValue)
            InternshipService.createCommand.EndDate += _endDateTime.Value;

        if (_publishDateTime.HasValue)
            InternshipService.createCommand.PublishDate += _publishDateTime.Value;
        var catId = _categories.FirstOrDefault(c => c.Name == _selectedCategory)!.Id;
        InternshipService.createCommand.CategoryId = catId;
        try
        {
            var result = await InternshipService.Update(_updateSlug);
            if (result.StatusCode == System.Net.HttpStatusCode.Created)
            {
                Snackbar.Add("Updated", Severity.Success);
            }
            else
            {
                Snackbar.Add((await result.Content.ReadFromJsonAsync<CustomProblemDetails>()).Detail, Severity.Error);
            }
            await LoadData();
            Clear();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Snackbar.Add("Server is not responding, try latter", Severity.Error);
        }
    }

    public void AddQuestions()
    {
        if (_newQuestion.Trim() != "")
        {
            _questions.Add(new VacancyQuestionDto { Question = _newQuestion });
            _newQuestion = "";
        }
    }

    public async void AddTask()
    {
        _tasks.Add(new VacancyTaskDto
        {
            Title = newTitle,
            Description = newDescription,
            Template = await _editorTemplate.GetValue(),
            Test = await _editorTest.GetValue()
        });
        newTitle = "";
        newDescription = "";
        newTemplate = "";
        newTest = "";
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            await Task.Delay(1);
            AddQuestions();
            AddTask();
        }
    }

    void HandleCancel()
    {
        Clear();
    }

    private void Clear()
    {
        _createOrEditHeader = "New Internship Vacancy";
        InternshipService.createCommand.Title = string.Empty;
        InternshipService.createCommand.ShortDescription = string.Empty;
        InternshipService.createCommand.Description = string.Empty;
        InternshipService.createCommand.ApplicationDeadline = DateTime.Now;
        InternshipService.createCommand.Stipend = 0;
        InternshipService.createCommand.Duration = 0;
        InternshipService.createCommand.EndDate = DateTime.Now;
        InternshipService.createCommand.PublishDate = DateTime.Now;
        _isInserting = false;
        _isUpdating = true;
        _panelOpenState = false;
        _updateSlug = string.Empty;
        _questions.Clear();
        _applicationDeadlineTime = DateTime.Now.TimeOfDay;
        _publishDateTime = DateTime.Now.TimeOfDay;
        _endDateTime = DateTime.Now.TimeOfDay;
        _tasks.Clear();
    }

}