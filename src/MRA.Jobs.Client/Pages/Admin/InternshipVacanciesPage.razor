@page "/dashboard/internship"
@layout Dashboard
@using MRA.Jobs.Application.Contracts.VacancyCategories.Responses;
@using MRA.Jobs.Client.Components.Dialogs;
@inject IJSRuntime JS

@inject IInternshipService internshipService
@inject ICategoryService categoryService

<MudText Typo="Typo.h3" Style="margin:50px; color: #129fd7; text-align: center; font-weight: 900">Internships</MudText>

<style>
    .mud-input-control {
        margin-bottom: 10px;
    }
</style>

@if (categories == null)
{
    <div>loading....</div>
}
else
{
    <MudExpansionPanels>
        <MudExpansionPanel Text="Create new Internship" @bind-IsExpanded="@panelOpenState">
            <MudTextField @bind-Value="@internshipService.createCommand.Title" Label="Title" Variant="Variant.Outlined" />
            <MudTextField Lines="5" @bind-Value="@internshipService.createCommand.ShortDescription" Label="ShortDescription" Variant="Variant.Outlined" />
            <MudTextField Lines="5" @bind-Value="@internshipService.createCommand.Description" Label="Description" Variant="Variant.Outlined" />
            <div class="row">
                <div class="col-md-4">
                    <MudDatePicker @bind-Date="@internshipService.createCommand.ApplicationDeadline" Variant="Variant.Outlined" Label="Application deadline"/>
                </div>
                <div class="col-md-4">
                    <MudTextField @bind-Value="@internshipService.createCommand.Duration" Label="Duration" Variant="Variant.Outlined" />
                </div>
                <div class="col-md-4">
                    <MudTextField @bind-Value="@internshipService.createCommand.Stipend" Label="Stipend" Variant="Variant.Outlined" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <MudSelect T="string" Label="@selectedCategory" @bind-Value="@selectedCategory" Variant="Variant.Outlined">
                        @foreach (var cat in categories)
                        {
                            <MudSelectItem Value="@cat.Name" />
                        }
                    </MudSelect>
                </div>
                <div class="col-md-4">
                   <MudDatePicker  @bind-Date="@internshipService.createCommand.EndDate" Variant="Variant.Outlined" Label="End date" />
                </div>
                <div class="col-md-4">
                    <MudDatePicker @bind-Date="@internshipService.createCommand.PublishDate" Variant="Variant.Outlined" Label="Publish date" />
                </div>
            </div>
            <MudPaper Class="p-2 mb-2">
                <MudText Typo="Typo.caption">Vacancy questions</MudText>
                @foreach (var ques in Questions)
                {
                    <MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.QuestionMark" /> @ques.Question<MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveQuestion(ques.Question)" aria-label="delete"></MudIconButton></MudText>
                    
                }
                <MudTextField @bind-Value="newQuestion" OnKeyDown="@OnKeyDown" OnAdornmentClick="AddQuestions" Label="New question" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon=@Icons.Material.Filled.Add AdornmentColor="Color.Secondary" />
            </MudPaper>

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" @onclick="@HandleSubmit" Id="btnInsert" hidden="@isInserting">Insert</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning" @onclick="@HandleUpdate" Id="btnUpdate" hidden="@isUpdating">Update</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Surface" @onclick="@HandleCancel" Id="btnUpdate">Cancel</MudButton>
        </MudExpansionPanel>
    </MudExpansionPanels>

    <DeleteConfirmation @bind-IsOpen="@isDialogOpen" OnConfirm="DeleteItem" />
    <MudTable Items="@interships" Class="text-center" Breakpoint="Breakpoint.Md">
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>Short description</MudTh>
            <MudTh>Application deadline</MudTh>
            <MudTh>Duration</MudTh>
            <MudTh>Stipend</MudTh>
            <MudTh>Category</MudTh>
            <MudTh>End date</MudTh>
            <MudTh>Publish date</MudTh>
            <MudTh Style="width: 10%"></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Short description">@context.ShortDescription.Substring(0, 50) ...</MudTd>
            <MudTd DataLabel="Application deadline">@context.ApplicationDeadline</MudTd>
            <MudTd DataLabel="Duration">@context.Duration</MudTd>
            <MudTd DataLabel="Stipend">@context.Stipend</MudTd>
            <MudTd DataLabel="Category">@context.Category</MudTd>
            <MudTd DataLabel="EndDate">@context.EndDate.ToString("D")</MudTd>
            <MudTd DataLabel="PublishDate">@context.PublishDate.ToString("D")</MudTd>
            <MudTd DataLabel="Action">
                <MudButton @onclick="()=>OnDeleteClick(context.Slug)" Style="color:#2094CC" Icon="delete">Delete</MudButton>
                <MudButton @onclick="()=>OnEditClick(context.Slug)" Style="color:#2094CC" Icon="edit">Edit</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}


@code {
    bool panelOpenState;
    bool isInserting;
    bool isUpdating = true;
    string UpdateSlug;
    private string selectedCategory { get; set; } = "Select category";
    private string newQuestion = string.Empty;

    private List<VacancyQuestionDto> Questions = new();
    private List<CategoryResponse> categories;
    private List<InternshipVacancyListResponse> interships;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private bool isDialogOpen = false;
    private string itemSlugToDelete;

    void OnDeleteClick(string slug)
    {
        itemSlugToDelete = slug;
        isDialogOpen = true;
    }
    private async Task DeleteItem()
    {
        await internshipService.Delete(itemSlugToDelete);
        isDialogOpen = false;
        await LoadData();
    }

    private async Task OnEditClick(string slug)
    {
        var vacancy = await internshipService.GetBySlug(slug);
        if (vacancy != null)
        {
            internshipService.createCommand.Title = vacancy.Title;
            internshipService.createCommand.ShortDescription = vacancy.ShortDescription;
            internshipService.createCommand.Description = vacancy.Description;
            internshipService.createCommand.ApplicationDeadline = vacancy.ApplicationDeadline;
            internshipService.createCommand.Stipend = vacancy.Stipend;
            internshipService.createCommand.Duration = vacancy.Duration;
            internshipService.createCommand.EndDate = vacancy.EndDate;
            internshipService.createCommand.PublishDate = vacancy.PublishDate;
            internshipService.createCommand.CategoryId = vacancy.CategoryId;
            selectedCategory = categories.FirstOrDefault(c => c.Id == vacancy.CategoryId).Name;
            isInserting = true;
            isUpdating = false;
            panelOpenState = true;
            UpdateSlug = slug;
            Questions = vacancy.VacancyQuestions.Select(v =>

                new VacancyQuestionDto
                    {
                        Question = v.Question
                    }
            ).ToList();
        }
    }

    private void RemoveQuestion(string question)
    {
        var q = Questions.FirstOrDefault(t => t.Question == question);
        Questions.Remove(q);
    }

    private async Task LoadData()
    {
        interships = await internshipService.GetAll();
        categories = await categoryService.GetAllCategory();
    }

    private async Task HandleSubmit()
    {
        var catId = categories.FirstOrDefault(c => c.Name == selectedCategory).Id;
        internshipService.createCommand.CategoryId = catId;
        internshipService.createCommand.VacancyQuestions = Questions;
        await internshipService.Create();
        await LoadData();
        Clear();
    }

    private async Task HandleUpdate()
    {
        internshipService.createCommand.VacancyQuestions = Questions;
        var catId = categories.FirstOrDefault(c => c.Name == selectedCategory).Id;
        internshipService.createCommand.CategoryId = catId;
        await internshipService.Update(UpdateSlug);
        await LoadData();
        Clear();
    }

    public void AddQuestions()
    {
        Questions.Add(new VacancyQuestionDto { Question = newQuestion });
        newQuestion = "";
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            await Task.Delay(1);
            AddQuestions();
        }
    }

    void HandleCancel()
    {
        Clear();
    }

    private void Clear()
    {
        internshipService.createCommand.Title = string.Empty;
        internshipService.createCommand.ShortDescription = string.Empty;
        internshipService.createCommand.Description = string.Empty;
        internshipService.createCommand.ApplicationDeadline = DateTime.Now;
        internshipService.createCommand.Stipend = 0;
        internshipService.createCommand.Duration = 0;
        internshipService.createCommand.EndDate = DateTime.Now;
        internshipService.createCommand.PublishDate = DateTime.Now;
        isInserting = false;
        isUpdating = true;
        panelOpenState = false;
        UpdateSlug = string.Empty;
        Questions.Clear();
    }
}
