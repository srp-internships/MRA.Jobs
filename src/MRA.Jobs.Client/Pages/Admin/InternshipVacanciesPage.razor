@page "/dashboard/internship"
@layout Dashboard
@using MRA.Jobs.Application.Contracts.VacancyCategories.Responses;
@using MRA.Jobs.Client.Components.Dialogs;
@using MRA.Jobs.Client.Identity;
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages
@inject ISnackbar Snackbar;
@inject IJSRuntime jsRuntime
@inject IInternshipService InternshipService
@inject ICategoryService CategoryService

<MudText Typo="Typo.h4" Color="Color.Primary">Internships Vacancy</MudText>
@if (_serverError)
{
    <ServerErrorComponent/>
}
else
{
    <style>
		.mud-input-control {
			margin-bottom: 10px;
		}
	</style>

    @if (_categories == null)
    {
        <div class="loader"></div>
    }
    else
    {
        <MudGrid>
            <MudItem Class="d-flex justify-end flex-grow-1 gap-4" Elevation="0" lg="12">
                <MudCardHeader>
                    <MudButton hidden="@_panelOpenState" Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => _panelOpenState = true)">
                        <MudText>Create New Internship Vacancy</MudText>
                    </MudButton>
                </MudCardHeader>
            </MudItem>
            <MudItem lg="12" hidden="@(!_panelOpenState)">
                <EditForm Model="@InternshipService.createCommand">
                    <FluentValidationValidator/>

                    <MudGrid>
                        <MudItem xs="12" lg="6">
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Style="color:rgb(128,128,128)">
                                            <b>@_createOrEditHeader</b>
                                        </MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudTextField @bind-Value="@InternshipService.createCommand.Title" Label="Title"
                                                  Variant="Variant.Outlined" For="@(() => InternshipService.createCommand.Title)"/>
                                    <MudTextField Lines="5" @bind-Value="@InternshipService.createCommand.ShortDescription" Label="ShortDescription"
                                                  Variant="Variant.Outlined" For="@(() => InternshipService.createCommand.ShortDescription)"/>
                                    <MudTextField Lines="14" @bind-Value="@InternshipService.createCommand.Description" Label="Description"
                                                  Variant="Variant.Outlined" For="@(() => InternshipService.createCommand.Description)"/>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" lg="6">
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Style="color:rgb(128,128,128)">
                                            <b>Vacancy details</b>
                                        </MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudGrid>
                                        <MudItem xs=12 lg="12">
                                            <MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">Category</MudText>
                                            <MudSelect T="string" @bind-Value="@_selectedCategory"
                                                       Variant="Variant.Outlined">
                                                @foreach (var cat in _categories)
                                                {
                                                    <MudSelectItem Value="@cat.Name"/>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs="12" lg="6">
                                            <MudTextField @bind-Value="@InternshipService.createCommand.Duration" Label="Duration"
                                                          Variant="Variant.Outlined" For="@(() => InternshipService.createCommand.Duration)"/>
                                        </MudItem>
                                        <MudItem xs="12" lg="6">
                                            <MudTextField @bind-Value="@InternshipService.createCommand.Stipend" Label="Stipend"
                                                          Variant="Variant.Outlined" For="@(() => InternshipService.createCommand.Stipend)"/>
                                        </MudItem>
                                        <MudItem xs=12 lg="12">
                                            <MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">Publish Date</MudText>
                                            <MudGrid>
                                                <MudItem xs=12 lg="6">
                                                    <MudDatePicker @bind-Date="@InternshipService.createCommand.PublishDate" Variant="Variant.Outlined"
                                                                   Label="Date" For="@(() => InternshipService.createCommand.PublishDate)"/>
                                                </MudItem>
                                                <MudItem xs=12 lg="6">
                                                    <MudTimePicker AmPm="true" @bind-Time="_publishDateTime" Variant="Variant.Outlined" Label="Time"/>
                                                </MudItem>
                                            </MudGrid>
                                        </MudItem>
                                        <MudItem xs=12 lg="12">
                                            <MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">Application Deadline</MudText>
                                            <MudGrid>
                                                <MudItem xs=12 lg="6">
                                                    <MudDatePicker @bind-Date="@InternshipService.createCommand.ApplicationDeadline" Variant="Variant.Outlined"
                                                                   Label="Date" For="@(() => InternshipService.createCommand.ApplicationDeadline)"/>
                                                </MudItem>
                                                <MudItem xs=12 lg="6">
                                                    <MudTimePicker AmPm="true" @bind-Time="_applicationDeadlineTime" Variant="Variant.Outlined" Label="Time"/>
                                                </MudItem>
                                            </MudGrid>
                                        </MudItem>
                                        <MudItem xs=12 lg="12">
                                            <MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">End Date</MudText>
                                            <MudGrid>
                                                <MudItem xs=12 lg="6">
                                                    <MudDatePicker @bind-Date="@InternshipService.createCommand.EndDate" Variant="Variant.Outlined"
                                                                   Label="Date" For="@(() => InternshipService.createCommand.EndDate)"/>

                                                </MudItem>
                                                <MudItem xs=12 lg="6">
                                                    <MudTimePicker AmPm="true" @bind-Time="_endDateTime" Variant="Variant.Outlined" Label="Time"/>
                                                </MudItem>
                                            </MudGrid>
                                        </MudItem>
                                    </MudGrid>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    </MudGrid>
                    <MudGrid>

                        <MudItem xs="12" lg="6">
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Style="color:rgb(128,128,128)">
                                            <b>Tasks</b>
                                        </MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudExpansionPanels MultiExpansion="true">
                                        @foreach (var task in _tasks)
                                        {
                                            <MudExpansionPanel Text="@task.Title">
                                                <MudText> Description: @task.Description</MudText>
                                                <MudText>Template:</MudText>
                                                <MudElement HtmlTag="pre">
                                                    <MudElement HtmlTag="code">
                                                        @task.Template
                                                    </MudElement>
                                                </MudElement>
                                                <MudText>Test:</MudText>
                                                <MudElement HtmlTag="pre">
                                                    <MudElement HtmlTag="code">
                                                        @task.Test
                                                    </MudElement>
                                                </MudElement>
                                                <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                                           Variant="Variant.Filled" OnClick="() => RemoveTask(task.Title)" aria-label="delete">
                                                    <MudText>Remove</MudText>
                                                </MudButton>
                                            </MudExpansionPanel>
                                        }
                                    </MudExpansionPanels>
                                    <MudTextField @bind-Value="_newTitle" OnKeyDown="@OnKeyDown" Label="Title"
                                                  Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary"/>
                                    <MudTextField Lines="5" @bind-Value="_newDescription" OnKeyDown="@OnKeyDown" Label="Description"
                                                  Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary"/>
									<MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">Template</MudText>
									<StandaloneCodeEditor @ref="_editor1" Id="sample-code-editor-123" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit1" OnContextMenu="OnContextMenu" />
									<MudText Style="color:rgb(128,128,128)" Typo="Typo.body2">Test</MudText>
									<StandaloneCodeEditor @ref="_editor2" Id="sample-code-editor-456" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit2" OnContextMenu="OnContextMenu" />

									@*  <MudTextField Lines="5" @bind-Value="_newTemplate" OnKeyDown="@OnKeyDown" Label="Template"
                                                  Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary"/>
                                    <MudTextField Lines="5" @bind-Value="_newTest" OnKeyDown="@OnKeyDown" Label="Test"
                                                  Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary"/> *@
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                               @onclick="@AddTask" Id="AddTask">
                                        <MudText>Add Task</MudText>
                                    </MudButton>

                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" lg="6">
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Style="color:rgb(128,128,128)">
                                            <b>Vacancy questions</b>
                                        </MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    @foreach (var ques in _questions)
                                    {
                                        <MudText Typo="Typo.subtitle1">
                                            <MudChip>
                                                <MudIcon Icon="@Icons.Material.Filled.QuestionMark"/>
                                            </MudChip>

                                            @ques.Question
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveQuestion(ques.Question)" aria-label="delete"></MudIconButton>
                                        </MudText>
                                        <MudDivider/>
                                    }
                                    <MudTextField @bind-Value="_newQuestion" OnKeyDown="@OnKeyDown" OnAdornmentClick="AddQuestions" Label="New question" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon=@Icons.Material.Filled.Add AdornmentColor="Color.Secondary"/>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <MudItem xs="12" lg="12">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@HandleSubmit"
                                       Id="btnInsert" hidden="@_isInserting">
                                <MudText>
                                    Create
                                </MudText>
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Warning" @onclick="@HandleUpdate"
                                       Id="btnUpdate" hidden="@_isUpdating">
                                <MudText>
                                    Save changes
                                </MudText>
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Dark" @onclick="@HandleCancel"
                                       Id="btnUpdate">
                                <MudText>
                                    Cancel
                                </MudText>
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudItem>
        </MudGrid>
        <DeleteConfirmation @bind-IsOpen="@_isDialogOpen" OnConfirm="DeleteItem"/>
        <MudTable Items="@_internships" Class="text-center" Breakpoint="Breakpoint.Md" hidden="@_panelOpenState">
            <HeaderContent>
                <MudTh><strong>Title</strong></MudTh>
                <MudTh><strong>Short description</strong></MudTh>
                <MudTh><strong>Duration</strong></MudTh>
                <MudTh><strong>Stipend</strong></MudTh>
                <MudTh><strong>Category</strong></MudTh>
                <MudTh><strong>Publish date</strong></MudTh>
                <MudTh><strong>Application deadline</strong></MudTh>
                <MudTh><strong>End date</strong></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Short description">
                    @(context.ShortDescription.Length > 50 ? context.ShortDescription.Substring(0, 50) : context.ShortDescription)
                </MudTd>
                <MudTd DataLabel="Duration">@context.Duration</MudTd>
                <MudTd DataLabel="Stipend">@context.Stipend</MudTd>
                <MudTd DataLabel="Category">@context.Category</MudTd>
                <MudTd DataLabel="PublishDate">@context.PublishDate.ToString("D")</MudTd>
                <MudTd DataLabel="Application deadline">@context.ApplicationDeadline</MudTd>
                <MudTd DataLabel="EndDate">@context.EndDate.ToString("D")</MudTd>
                <MudTd DataLabel="Action">
                    <MudIconButton @onclick="() => OnDeleteClick(context.Slug)" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" Color="Color.Error" Size="Size.Medium"/>
                    <MudIconButton @onclick="() => OnEditClick(context.Slug)" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Text" Color="Color.Primary" Size="Size.Medium"/>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
        </MudTable>
    }
}

@code {
    private bool _serverError;
    bool _panelOpenState;
    bool _isInserting;
    bool _isUpdating = true;
    string _updateSlug;
    private string _selectedCategory = "";
    private string _newQuestion = string.Empty;
    private string _newDescription = string.Empty;
    private string _newTemplate = string.Empty;
    private string _newTest = string.Empty;
    private string _newTitle = string.Empty;
	private StandaloneCodeEditor _editor1 = null!;
	private StandaloneCodeEditor _editor2 = null!;
    private List<VacancyQuestionDto> _questions = new();
    private List<CategoryResponse> _categories;
    private List<InternshipVacancyListResponse> _internships;
    private List<VacancyTaskDto> _tasks = new();


    private TimeSpan? _applicationDeadlineTime;
    private TimeSpan? _publishDateTime;
    private TimeSpan? _endDateTime;
    private string _createOrEditHeader = "New Internship Vacancy";

	private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
	{
		if (editor == _editor2)
		{
			return new StandaloneEditorConstructionOptions
				{
					Language = "csharp",
					GlyphMargin = true,
					Value = "using Microsoft.VisualStudio.TestTools.UnitTesting;\n\n" +
			"namespace TestProject\n" +
			"{\n" +
			"    [TestClass]\n" +
			"    public class UnitTest1\n" +
			"    {\n" +
			"        [TestMethod]\n" +
			"        public void TestMethod1()\n" +
			"        {\n" +
			"            int expected = 5;\n" +
			"            int actual = 2 + 3;\n" +
			"            Assert.AreEqual(expected, actual, \"Values are not equal\");\n" +
			"        }\n" +
			"    }\n" +
			"}\n"
				};
			
		}
		else  
		{
			return new StandaloneEditorConstructionOptions
				{
					Language = "csharp",
					GlyphMargin = true,
					Value = "using System;\n\n" +
								"public class Program\n" +
								"{\n" +
								"    public static void Main()\n" +
								"    {\n" +
								"        Console.WriteLine(\"Hello, world!\");\n" +
								"    }\n" +
								"}\n"
				};
		}
	}
	private async Task EditorOnDidInit1()
	{
		if (_editor1 != null)
		{
			await EditorOnDidInit(_editor1);
			_newTest = await _editor1.GetValue();
		}
	}

	private async Task EditorOnDidInit2()
	{
		if (_editor2 != null)
		{
			await EditorOnDidInit(_editor2);
			_newTemplate = await _editor2.GetValue();
		}
	}

	private async void OnContextMenu(EditorMouseEvent eventArg)
	{
		Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
	}
	private async Task EditorOnDidInit(StandaloneCodeEditor editor)
	{
		await editor.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.KeyH, (args) =>
		{
			Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
		});
	}
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        Clear();
        StateHasChanged();
    }

    private bool _isDialogOpen;
    private string _itemSlugToDelete;

    void OnDeleteClick(string slug)
    {
        _itemSlugToDelete = slug;
        _isDialogOpen = true;
    }

    private async Task DeleteItem()
    {
        _isDialogOpen = false;
        await LoadData();
        try
        {
            var result = await InternshipService.Delete(_itemSlugToDelete);
            if (result.IsSuccessStatusCode)
            {
                Snackbar.Add($"Deleted", Severity.Success);
            }
            else
            {
                Snackbar.Add((await result.Content.ReadFromJsonAsync<CustomProblemDetails>()).Detail, Severity.Error);
            }
            await LoadData();
            Clear();
        }
        catch (Exception)
        {
            Snackbar.Add("Server is not responding, try latter", Severity.Error);
        }
    }

    private async Task OnEditClick(string slug)
    {
        var vacancy = await InternshipService.GetBySlug(slug);
        if (vacancy != null)
        {
            _createOrEditHeader = $"Edit {vacancy.Title}";
            InternshipService.createCommand.Title = vacancy.Title;
            InternshipService.createCommand.ShortDescription = vacancy.ShortDescription;
            InternshipService.createCommand.Description = vacancy.Description;
            InternshipService.createCommand.ApplicationDeadline = vacancy.ApplicationDeadline;
            InternshipService.createCommand.Stipend = vacancy.Stipend;
            InternshipService.createCommand.Duration = vacancy.Duration;
            InternshipService.createCommand.EndDate = vacancy.EndDate;
            InternshipService.createCommand.PublishDate = vacancy.PublishDate;
            InternshipService.createCommand.CategoryId = vacancy.CategoryId;
            _selectedCategory = _categories.FirstOrDefault(c => c.Id == vacancy.CategoryId)?.Name;
            _isInserting = true;
            _isUpdating = false;
            _panelOpenState = true;
            _updateSlug = slug;
            _questions = vacancy.VacancyQuestions.Select(v =>
                new VacancyQuestionDto
                {
                    Question = v.Question
                }
                ).ToList();
            _tasks = vacancy.VacancyTasks.Select(v =>
                new VacancyTaskDto
                {
                    Title = v.Title,
                    Description = v.Description,
                    Template = v.Template,
                    Test = v.Test
                }).ToList();
        }
    }

    private void RemoveQuestion(string question)
    {
        var q = _questions.FirstOrDefault(t => t.Question == question);
        _questions.Remove(q);
    }

    private async Task LoadData()
    {
        try
        {
            _internships = await InternshipService.GetAll();
            _categories = await CategoryService.GetAllCategory();
        }
        catch (Exception)
        {
            _serverError = true;
            StateHasChanged();
        }
    }

    private void RemoveTask(string title)
    {
        var r = _tasks.FirstOrDefault(t => t.Title == title);
        _tasks.Remove(r);
    }

    private async Task HandleSubmit()
    {
        var catId = _categories.FirstOrDefault(c => c.Name == _selectedCategory)!.Id;
        InternshipService.createCommand.CategoryId = catId;
        InternshipService.createCommand.VacancyQuestions = _questions;

        if (_applicationDeadlineTime.HasValue)
            InternshipService.createCommand.ApplicationDeadline += _applicationDeadlineTime.Value;

        if (_endDateTime.HasValue)
            InternshipService.createCommand.EndDate += _endDateTime.Value;

        if (_publishDateTime.HasValue)
            InternshipService.createCommand.PublishDate += _publishDateTime.Value;
        try
        {
            InternshipService.createCommand.VacancyTasks = _tasks;
            var result = await InternshipService.Create();
            if (result.IsSuccessStatusCode)
            {
                Snackbar.Add($"{InternshipService.createCommand.Title} created", Severity.Success);
            }
            else
            {
                Snackbar.Add((await result.Content.ReadFromJsonAsync<CustomProblemDetails>()).Detail, Severity.Error);
            }
            await LoadData();
            Clear();
        }
        catch (Exception)
        {
            Snackbar.Add("Server is not responding, try latter", Severity.Error);
        }
    }

    private async Task HandleUpdate()
    {
        InternshipService.createCommand.VacancyQuestions = _questions;
        InternshipService.createCommand.VacancyTasks = _tasks;
        if (_applicationDeadlineTime.HasValue)
            InternshipService.createCommand.ApplicationDeadline += _applicationDeadlineTime.Value;

        if (_endDateTime.HasValue)
            InternshipService.createCommand.EndDate += _endDateTime.Value;

        if (_publishDateTime.HasValue)
            InternshipService.createCommand.PublishDate += _publishDateTime.Value;
        var catId = _categories.FirstOrDefault(c => c.Name == _selectedCategory)!.Id;
        InternshipService.createCommand.CategoryId = catId;
        try
        {
            var result = await InternshipService.Update(_updateSlug);
            if (result.StatusCode == System.Net.HttpStatusCode.Created)
            {
                Snackbar.Add("Updated", Severity.Success);
            }
            else
            {
                Snackbar.Add((await result.Content.ReadFromJsonAsync<CustomProblemDetails>()).Detail, Severity.Error);
            }
            await LoadData();
            Clear();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Snackbar.Add("Server is not responding, try latter", Severity.Error);
        }
    }

    public void AddQuestions()
    {
        if (_newQuestion.Trim() != "")
        {
            _questions.Add(new VacancyQuestionDto { Question = _newQuestion });
            _newQuestion = "";
        }
    }

    public void AddTask()
    {
        _tasks.Add(new VacancyTaskDto
        {
            Title = _newTitle,
            Description = _newDescription,
            Template = _newTemplate,
            Test = _newTest
        });
        _newTitle = "";
        _newDescription = "";
        _newTemplate = "";
        _newTest = "";
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            await Task.Delay(1);
            AddQuestions();
            AddTask();
        }
    }

    void HandleCancel()
    {
        Clear();
    }

    private void Clear()
    {
        _createOrEditHeader = "New Internship Vacancy";
        InternshipService.createCommand.Title = string.Empty;
        InternshipService.createCommand.ShortDescription = string.Empty;
        InternshipService.createCommand.Description = string.Empty;
        InternshipService.createCommand.ApplicationDeadline = DateTime.Now;
        InternshipService.createCommand.Stipend = 0;
        InternshipService.createCommand.Duration = 0;
        InternshipService.createCommand.EndDate = DateTime.Now;
        InternshipService.createCommand.PublishDate = DateTime.Now;
        _isInserting = false;
        _isUpdating = true;
        _panelOpenState = false;
        _updateSlug = string.Empty;
        _questions.Clear();
        _applicationDeadlineTime = DateTime.Now.TimeOfDay;
        _publishDateTime = DateTime.Now.TimeOfDay;
        _endDateTime = DateTime.Now.TimeOfDay;
        _tasks.Clear();
    }

}