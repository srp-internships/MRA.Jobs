@page "/dashboard/internship"
@layout Dashboard
@using MRA.Jobs.Application.Contracts.VacancyCategories.Responses;
@using MRA.Jobs.Client.Components.Dialogs;
@inject IJSRuntime JS

@inject IInternshipService internshipService
@inject ICategoryService categoryService

<MudText Typo="Typo.h4" Color="Color.Primary">Internships Vacancy</MudText>
@if (serverError)
{
	<ServerErrorComponent />
}
else
{
	<style>
		.mud-input-control {
			margin-bottom: 10px;
		}
	</style>

	@if (categories == null)
	{
		<div class="loader"></div>
	}
	else
	{

		<MudGrid>
			<MudItem Class="d-flex justify-end flex-grow-1 gap-4" Elevation="0" hidden="@panelOpenState" lg="12">
				<MudCardHeader>
				<MudButton Justify="Justify.FlexEnd" Color="Color.Primary" Variant="Variant.Filled" OnClick="@(()=>panelOpenState=true)">
					<MudText>Create New Internship Vacancy</MudText>
				</MudButton>
				</MudCardHeader>
			</MudItem>
			<MudItem lg="12" hidden="@(!panelOpenState)">
				<EditForm Model="@internshipService.createCommand">
					<FluentValidationValidator />
					<MudText Style="color:gray" Typo="Typo.h6"><b>New Internship Vacancy</b></MudText><br />
					<MudGrid>
						<MudItem xs="12">
							<MudCard>
								<MudCardContent>
									<MudTextField @bind-Value="@internshipService.createCommand.Title" Label="Title"
												  Variant="Variant.Outlined" For="@(()=>internshipService.createCommand.Title)" />
									<MudTextField Lines="2" @bind-Value="@internshipService.createCommand.ShortDescription" Label="ShortDescription"
												  Variant="Variant.Outlined" For="@(()=>internshipService.createCommand.ShortDescription)" />
									<MudTextField Lines="5" @bind-Value="@internshipService.createCommand.Description" Label="Description"
												  Variant="Variant.Outlined" For="@(()=>internshipService.createCommand.Description)" />
								</MudCardContent>
							</MudCard>
						</MudItem>
						<MudItem xs="12" lg="6">
							<MudCard>
								<MudCardContent>
									<MudGrid>
										<MudItem xs=12 lg="12">
											<MudText Style="color:gray" Typo="Typo.body2">Category</MudText>
											<MudSelect T="string" @bind-Value="@selectedCategory"
													   Variant="Variant.Outlined">
												@foreach (var cat in categories)
												{
													<MudSelectItem Value="@cat.Name" />
												}
											</MudSelect>
										</MudItem>
										<MudItem xs="12" lg="6">
											<MudTextField @bind-Value="@internshipService.createCommand.Duration" Label="Duration"
														  Variant="Variant.Outlined" For="@(()=>internshipService.createCommand.Duration)" />
										</MudItem>
										<MudItem xs="12" lg="6">
											<MudTextField @bind-Value="@internshipService.createCommand.Stipend" Label="Stipend"
														  Variant="Variant.Outlined" For="@(()=>internshipService.createCommand.Stipend)" />
										</MudItem>
										<MudItem xs=12 lg="12">
											<MudText Style="color:gray" Typo="Typo.body2">Publish Date</MudText>
											<MudGrid>
												<MudItem xs=12 lg="6">
													<MudDatePicker @bind-Date="@internshipService.createCommand.PublishDate" Variant="Variant.Outlined"
																   Label="Date" For="@(()=>internshipService.createCommand.PublishDate)" />
												</MudItem>
												<MudItem xs=12 lg="6">
													<MudTimePicker AmPm="true" @bind-Time="applicationDeadlineTime" Variant="Variant.Outlined" Label="Time" />
												</MudItem>
											</MudGrid>
										</MudItem>
										<MudItem xs=12 lg="12">
											<MudText Style="color:gray" Typo="Typo.body2">Application Deadline</MudText>
											<MudGrid>
												<MudItem xs=12 lg="6">
													<MudDatePicker @bind-Date="@internshipService.createCommand.ApplicationDeadline" Variant="Variant.Outlined"
																   Label="Date" For="@(()=>internshipService.createCommand.ApplicationDeadline)" />
												</MudItem>
												<MudItem xs=12 lg="6">
													<MudTimePicker AmPm="true" @bind-Time="applicationDeadlineTime" Variant="Variant.Outlined" Label="Time" />
												</MudItem>
											</MudGrid>
										</MudItem>
										<MudItem xs=12 lg="12">
											<MudText Style="color:gray" Typo="Typo.body2">End Date</MudText>
											<MudGrid>
												<MudItem xs=12 lg="6">
													<MudDatePicker @bind-Date="@internshipService.createCommand.EndDate" Variant="Variant.Outlined"
																   Label="Date" For="@(()=>internshipService.createCommand.EndDate)" />

												</MudItem>
												<MudItem xs=12 lg="6">
													<MudTimePicker AmPm="true" @bind-Time="applicationDeadlineTime" Variant="Variant.Outlined" Label="Time" />
												</MudItem>
											</MudGrid>
										</MudItem>
									</MudGrid>
								</MudCardContent>
							</MudCard>
						</MudItem>
						<MudItem xs="12" lg="6">
							<MudCard>
								<MudCardHeader>
									<CardHeaderContent>
										<MudText Style="color:gray">Vacancy questions</MudText>
									</CardHeaderContent>
								</MudCardHeader>
								<MudCardContent>
									@foreach (var ques in Questions)
									{
										<MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Outlined.QuestionAnswer" /> @ques.Question<MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveQuestion(ques.Question)" aria-label="delete"></MudIconButton></MudText>
									}
									<MudTextField @bind-Value="newQuestion" OnKeyDown="@OnKeyDown" OnAdornmentClick="AddQuestions" Label="New question" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon=@Icons.Material.Filled.Add AdornmentColor="Color.Secondary" />
								</MudCardContent>
							</MudCard>
						</MudItem>
						<MudItem xs="12" lg="12" Class="d-flex justify-end flex-grow-1 gap-4" Elevation="0">
							<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" @onclick="@HandleSubmit" Id="btnInsert" hidden="@isInserting">Insert</MudButton>
							<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning" @onclick="@HandleUpdate" Id="btnUpdate" hidden="@isUpdating">Update</MudButton>
							<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Surface" @onclick="@HandleCancel" Id="btnUpdate">Cancel</MudButton>
						</MudItem>
					</MudGrid>

				</EditForm>
			</MudItem>
		</MudGrid>

		<DeleteConfirmation @bind-IsOpen="@isDialogOpen" OnConfirm="DeleteItem" />
		<MudTable Items="@interships" Class="text-center" Breakpoint="Breakpoint.Md">
			<HeaderContent>
				<MudTh>Title</MudTh>
				<MudTh>Short description</MudTh>
				<MudTh>Application deadline</MudTh>
				<MudTh>Duration</MudTh>
				<MudTh>Stipend</MudTh>
				<MudTh>Category</MudTh>
				<MudTh>End date</MudTh>
				<MudTh>Publish date</MudTh>
				<MudTh></MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Title">@context.Title</MudTd>
				<MudTd DataLabel="Short description">
					@(context.ShortDescription.Count() > 50 ? context.ShortDescription.Substring(0, 50) : context.ShortDescription)
				</MudTd>
				<MudTd DataLabel="Application deadline">@context.ApplicationDeadline</MudTd>
				<MudTd DataLabel="Duration">@context.Duration</MudTd>
				<MudTd DataLabel="Stipend">@context.Stipend</MudTd>
				<MudTd DataLabel="Category">@context.Category</MudTd>
				<MudTd DataLabel="EndDate">@context.EndDate.ToString("D")</MudTd>
				<MudTd DataLabel="PublishDate">@context.PublishDate.ToString("D")</MudTd>
				<MudTd DataLabel="Action">
					<MudButton @onclick="()=>OnDeleteClick(context.Slug)" Style="color:#2094CC" Icon="delete">Delete</MudButton>
					<MudButton @onclick="()=>OnEditClick(context.Slug)" Style="color:#2094CC" Icon="edit">Edit</MudButton>
				</MudTd>
			</RowTemplate>
			<PagerContent>
				<MudTablePager />
			</PagerContent>
		</MudTable>
	}
}

@code {
	private bool serverError;
	bool panelOpenState;
	bool isInserting;
	bool isUpdating = true;
	string UpdateSlug;
	private string selectedCategory { get; set; } = "";
	private string newQuestion = string.Empty;

	private List<VacancyQuestionDto> Questions = new();
	private List<CategoryResponse> categories;
	private List<InternshipVacancyListResponse> interships;

	private TimeSpan? applicationDeadlineTime;

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
		applicationDeadlineTime = DateTime.Now.TimeOfDay;
		StateHasChanged();
	}

	private bool isDialogOpen = false;
	private string itemSlugToDelete;

	void OnDeleteClick(string slug)
	{
		itemSlugToDelete = slug;
		isDialogOpen = true;
	}
	private async Task DeleteItem()
	{
		await internshipService.Delete(itemSlugToDelete);
		isDialogOpen = false;
		await LoadData();
	}

	private async Task OnEditClick(string slug)
	{
		var vacancy = await internshipService.GetBySlug(slug);
		if (vacancy != null)
		{
			internshipService.createCommand.Title = vacancy.Title;
			internshipService.createCommand.ShortDescription = vacancy.ShortDescription;
			internshipService.createCommand.Description = vacancy.Description;
			internshipService.createCommand.ApplicationDeadline = vacancy.ApplicationDeadline;
			internshipService.createCommand.Stipend = vacancy.Stipend;
			internshipService.createCommand.Duration = vacancy.Duration;
			internshipService.createCommand.EndDate = vacancy.EndDate;
			internshipService.createCommand.PublishDate = vacancy.PublishDate;
			internshipService.createCommand.CategoryId = vacancy.CategoryId;
			selectedCategory = categories.FirstOrDefault(c => c.Id == vacancy.CategoryId).Name;
			isInserting = true;
			isUpdating = false;
			panelOpenState = true;
			UpdateSlug = slug;
			Questions = vacancy.VacancyQuestions.Select(v =>

				new VacancyQuestionDto
					{
						Question = v.Question
					}
			).ToList();
		}
	}

	private void RemoveQuestion(string question)
	{
		var q = Questions.FirstOrDefault(t => t.Question == question);
		Questions.Remove(q);
	}

	private async Task LoadData()
	{
		try
		{
			interships = await internshipService.GetAll();
			categories = await categoryService.GetAllCategory();
		}
		catch (Exception)
		{

			serverError = true;
			StateHasChanged();
		}

	}

	private async Task HandleSubmit()
	{
		var catId = categories.FirstOrDefault(c => c.Name == selectedCategory).Id;
		internshipService.createCommand.CategoryId = catId;
		internshipService.createCommand.VacancyQuestions = Questions;
		if (applicationDeadlineTime.HasValue)
		{
			internshipService.createCommand.ApplicationDeadline = internshipService.createCommand.ApplicationDeadline + applicationDeadlineTime.Value;
		}



		await internshipService.Create();
		await LoadData();
		Clear();
	}

	private async Task HandleUpdate()
	{
		internshipService.createCommand.VacancyQuestions = Questions;
		var catId = categories.FirstOrDefault(c => c.Name == selectedCategory).Id;
		internshipService.createCommand.CategoryId = catId;
		await internshipService.Update(UpdateSlug);
		await LoadData();
		Clear();
	}

	public void AddQuestions()
	{
		Questions.Add(new VacancyQuestionDto { Question = newQuestion });
		newQuestion = "";
	}

	private async Task OnKeyDown(KeyboardEventArgs e)
	{
		if (e.Code == "Enter")
		{
			await Task.Delay(1);
			AddQuestions();
		}
	}

	void HandleCancel()
	{
		Clear();
	}

	private void Clear()
	{
		internshipService.createCommand.Title = string.Empty;
		internshipService.createCommand.ShortDescription = string.Empty;
		internshipService.createCommand.Description = string.Empty;
		internshipService.createCommand.ApplicationDeadline = DateTime.Now;
		internshipService.createCommand.Stipend = 0;
		internshipService.createCommand.Duration = 0;
		internshipService.createCommand.EndDate = DateTime.Now;
		internshipService.createCommand.PublishDate = DateTime.Now;
		isInserting = false;
		isUpdating = true;
		panelOpenState = false;
		UpdateSlug = string.Empty;
		Questions.Clear();
	}
}
