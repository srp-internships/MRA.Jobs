@page "/dashboard/internship"
@layout Dashboard
@using MRA.Jobs.Application.Contracts.VacancyCategories.Responses;
@using MRA.Jobs.Client.Components.Dialogs;
@using MRA.Jobs.Client.Identity;
@inject IJSRuntime JS
@inject ISnackbar Snackbar;

@inject IInternshipService internshipService
@inject ICategoryService categoryService

<MudText Typo="Typo.h4" Color="Color.Primary">Internships Vacancy</MudText>
@if (serverError)
{
    <ServerErrorComponent/>
}
else
{
    <style>
		.mud-input-control {
			margin-bottom: 10px;
		}
	</style>

    @if (categories == null)
    {
        <div class="loader"></div>
    }
    else
    {
        <MudGrid>
        <MudItem Class="d-flex justify-end flex-grow-1 gap-4" Elevation="0" lg="12">
            <MudCardHeader>
                <MudButton hidden="@panelOpenState" Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => panelOpenState = true)">
                    <MudText>Create New Internship Vacancy</MudText>
                </MudButton>
            </MudCardHeader>
        </MudItem>
        <MudItem lg="12" hidden="@(!panelOpenState)">
            <EditForm Model="@internshipService.createCommand">
                <FluentValidationValidator/>

                <MudGrid>
                    <MudItem xs="12" lg="6">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Style="color:gray">
                                        <b>@createOrEditHeader</b>
                                    </MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudTextField @bind-Value="@internshipService.createCommand.Title" Label="Title"
                                              Variant="Variant.Outlined" For="@(() => internshipService.createCommand.Title)"/>
                                <MudTextField Lines="5" @bind-Value="@internshipService.createCommand.ShortDescription" Label="ShortDescription"
                                              Variant="Variant.Outlined" For="@(() => internshipService.createCommand.ShortDescription)"/>
                                <MudTextField Lines="13" @bind-Value="@internshipService.createCommand.Description" Label="Description"
                                              Variant="Variant.Outlined" For="@(() => internshipService.createCommand.Description)"/>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" lg="6">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Style="color:gray">
                                        <b>Vacancy details</b>
                                    </MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs=12 lg="12">
                                        <MudText Style="color:gray" Typo="Typo.body2">Category</MudText>
                                        <MudSelect T="string" @bind-Value="@selectedCategory"
                                                   Variant="Variant.Outlined">
                                            @foreach (var cat in categories)
                                            {
                                                <MudSelectItem Value="@cat.Name"/>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12" lg="6">
                                        <MudTextField @bind-Value="@internshipService.createCommand.Duration" Label="Duration"
                                                      Variant="Variant.Outlined" For="@(() => internshipService.createCommand.Duration)"/>
                                    </MudItem>
                                    <MudItem xs="12" lg="6">
                                        <MudTextField @bind-Value="@internshipService.createCommand.Stipend" Label="Stipend"
                                                      Variant="Variant.Outlined" For="@(() => internshipService.createCommand.Stipend)"/>
                                    </MudItem>
                                    <MudItem xs=12 lg="12">
                                        <MudText Style="color:gray" Typo="Typo.body2">Publish Date</MudText>
                                        <MudGrid>
                                            <MudItem xs=12 lg="6">
                                                <MudDatePicker @bind-Date="@internshipService.createCommand.PublishDate" Variant="Variant.Outlined"
                                                               Label="Date" For="@(() => internshipService.createCommand.PublishDate)"/>
                                            </MudItem>
                                            <MudItem xs=12 lg="6">
                                                <MudTimePicker AmPm="true" @bind-Time="publishDate_Time" Variant="Variant.Outlined" Label="Time"/>
                                            </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                    <MudItem xs=12 lg="12">
                                        <MudText Style="color:gray" Typo="Typo.body2">Application Deadline</MudText>
                                        <MudGrid>
                                            <MudItem xs=12 lg="6">
                                                <MudDatePicker @bind-Date="@internshipService.createCommand.ApplicationDeadline" Variant="Variant.Outlined"
                                                               Label="Date" For="@(() => internshipService.createCommand.ApplicationDeadline)"/>
                                            </MudItem>
                                            <MudItem xs=12 lg="6">
                                                <MudTimePicker AmPm="true" @bind-Time="applicationDeadlineTime" Variant="Variant.Outlined" Label="Time"/>
                                            </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                    <MudItem xs=12 lg="12">
                                        <MudText Style="color:gray" Typo="Typo.body2">End Date</MudText>
                                        <MudGrid>
                                            <MudItem xs=12 lg="6">
                                                <MudDatePicker @bind-Date="@internshipService.createCommand.EndDate" Variant="Variant.Outlined"
                                                               Label="Date" For="@(() => internshipService.createCommand.EndDate)"/>

                                            </MudItem>
                                            <MudItem xs=12 lg="6">
                                                <MudTimePicker AmPm="true" @bind-Time="endDate_Time" Variant="Variant.Outlined" Label="Time"/>
                                            </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
                <MudGrid>
                    <MudItem xs="12" lg="6">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Style="color:gray">
                                        <b>Vacancy questions</b>
                                    </MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                @foreach (var ques in Questions)
                                {
                                    <MudText Typo="Typo.subtitle1">
                                        <MudChip>
                                            <MudIcon Icon="@Icons.Material.Filled.QuestionMark"/>
                                        </MudChip>

                                        @ques.Question
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveQuestion(ques.Question)" aria-label="delete"></MudIconButton>
                                    </MudText>
                                    <MudDivider/>
                                }
                                <MudTextField @bind-Value="newQuestion" OnKeyDown="@OnKeyDown" OnAdornmentClick="AddQuestions" Label="New question" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon=@Icons.Material.Filled.Add AdornmentColor="Color.Secondary"/>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" lg="6">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderCont>
                                    <MudText Style="color:gray">
                                        <b>Tasks</b>
                                    </MudText>
                                </CardHeaderCont>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudExpansionPanels MultiExpansion="true">

                                    @foreach (var task in Tasks)
                                    {
                                        <MudExpansionPanel Text="@task.Title">
                                            <MudText> Description: @task.Description</MudText>
                                            <MudText>Template: @task.Template</MudText>
                                            <MudElement HtmlTag="pre">
                                                <MudElement HtmlTag="code">
                                                    @task.Template
                                                </MudElement>
                                            </MudElement>
                                            <MudElement HtmlTag="pre">
                                                <MudElement HtmlTag="code">
                                                    @task.Test
                                                </MudElement>
                                            </MudElement>
                                            <MudIconButton
                                                Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                                OnClick="() => RemoveTask(task.Title)" aria-label="delete">
                                            </MudIconButton>
                                        </MudExpansionPanel>
                                    }
                                </MudExpansionPanels>
                                <MudTextField @bind-Value="newTitle" OnKeyDown="@OnKeyDown" Label="Title"
                                              Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary"/>
                                <MudTextField Lines="5" @bind-Value="newDescription" OnKeyDown="@OnKeyDown" Label="Description"
                                              Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary"/>
                                <MudTextField Lines="5" @bind-Value="newTemplate" OnKeyDown="@OnKeyDown" Label="Template"
                                              Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary"/>
                                <MudTextField Lines="5" @bind-Value="newTest" OnKeyDown="@OnKeyDown" Label="Test"
                                              Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary"/>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                           @onclick="@AddTask" Id="AddTask">
                                    <MudText>Add Task</MudText>
                                </MudButton>

                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" lg="12">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@HandleSubmit"
                                   Id="btnInsert" hidden="@isInserting">
                            <MudText>
                                Create
                            </MudText>
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Warning" @onclick="@HandleUpdate"
                                   Id="btnUpdate" hidden="@isUpdating">
                            <MudText>
                                Update
                            </MudText>
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Dark" @onclick="@HandleCancel"
                                   Id="btnUpdate">
                            <MudText>
                                Cancel
                            </MudText>
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudItem>
        </MudGrid>
        <DeleteConfirmation @bind-IsOpen="@isDialogOpen" OnConfirm="DeleteItem"/>
        <MudTable Items="@interships" Class="text-center" Breakpoint="Breakpoint.Md" hidden="@panelOpenState">
            <HeaderContent>
                <MudTh>Title</MudTh>
                <MudTh>Short description</MudTh>
                <MudTh>Duration</MudTh>
                <MudTh>Stipend</MudTh>
                <MudTh>Category</MudTh>
                <MudTh>Publish date</MudTh>
                <MudTh>Application deadline</MudTh>
                <MudTh>End date</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Short description">
                    @(context.ShortDescription.Count() > 50 ? context.ShortDescription.Substring(0, 50) : context.ShortDescription)
                </MudTd>
                <MudTd DataLabel="Duration">@context.Duration</MudTd>
                <MudTd DataLabel="Stipend">@context.Stipend</MudTd>
                <MudTd DataLabel="Category">@context.Category</MudTd>
                <MudTd DataLabel="PublishDate">@context.PublishDate.ToString("D")</MudTd>
                <MudTd DataLabel="Application deadline">@context.ApplicationDeadline</MudTd>
                <MudTd DataLabel="EndDate">@context.EndDate.ToString("D")</MudTd>
                <MudTd DataLabel="Action">
                    <MudButton @onclick="() => OnDeleteClick(context.Slug)" Style="color:red" Icon="delete">Delete</MudButton>
                    <MudButton @onclick="() => OnEditClick(context.Slug)" Style="color:#2094CC" Icon="edit">Edit</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
        </MudTable>
    }
}

@code {
    private bool serverError;
    bool panelOpenState;
    bool isInserting;
    bool isUpdating = true;
    string UpdateSlug;
    private string selectedCategory { get; set; } = "";
    private string newQuestion = string.Empty;
    private string newDescription = string.Empty;
    private string newTemplate = string.Empty;
    private string newTest = string.Empty;
    private string newTitle = string.Empty;
    private List<VacancyQuestionDto> Questions = new();
    private List<CategoryResponse> categories;
    private List<InternshipVacancyListResponse> interships;
    private List<VacancyTaskDto> Tasks = new();


    private TimeSpan? applicationDeadlineTime;
    private TimeSpan? publishDate_Time;
    private TimeSpan? endDate_Time;
    private string createOrEditHeader = "New Internship Vacancy";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        Clear();
        StateHasChanged();
    }

    private bool isDialogOpen = false;
    private string itemSlugToDelete;

    void OnDeleteClick(string slug)
    {
        itemSlugToDelete = slug;
        isDialogOpen = true;
    }

    private async Task DeleteItem()
    {
        isDialogOpen = false;
        await LoadData();
        try
        {
            var result = await internshipService.Delete(itemSlugToDelete);
            if (result.IsSuccessStatusCode)
            {
                Snackbar.Add($"Deleted", Severity.Success);
            }
            else
            {
                Snackbar.Add((await result.Content.ReadFromJsonAsync<CustomProblemDetails>()).Detail, Severity.Error);
            }
            await LoadData();
            Clear();
        }
        catch (Exception)
        {
            Snackbar.Add("Server is not responding, try latter", Severity.Error);
        }
    }

    private async Task OnEditClick(string slug)
    {
        var vacancy = await internshipService.GetBySlug(slug);
        if (vacancy != null)
        {
            createOrEditHeader = $"Edit {vacancy.Title}";
            internshipService.createCommand.Title = vacancy.Title;
            internshipService.createCommand.ShortDescription = vacancy.ShortDescription;
            internshipService.createCommand.Description = vacancy.Description;
            internshipService.createCommand.ApplicationDeadline = vacancy.ApplicationDeadline;
            internshipService.createCommand.Stipend = vacancy.Stipend;
            internshipService.createCommand.Duration = vacancy.Duration;
            internshipService.createCommand.EndDate = vacancy.EndDate;
            internshipService.createCommand.PublishDate = vacancy.PublishDate;
            internshipService.createCommand.CategoryId = vacancy.CategoryId;
            selectedCategory = categories.FirstOrDefault(c => c.Id == vacancy.CategoryId).Name;
            isInserting = true;
            isUpdating = false;
            panelOpenState = true;
            UpdateSlug = slug;
            Questions = vacancy.VacancyQuestions.Select(v =>
                new VacancyQuestionDto
                {
                    Question = v.Question
                }
                ).ToList();
            Tasks = vacancy.VacancyTasks.Select(v =>
                new VacancyTaskDto
                {
                    Title = v.Title,
                    Description = v.Description,
                    Template = v.Template,
                    Test = v.Test
                }).ToList();
        }
    }

    private void RemoveQuestion(string question)
    {
        var q = Questions.FirstOrDefault(t => t.Question == question);
        Questions.Remove(q);
    }

    private async Task LoadData()
    {
        try
        {
            interships = await internshipService.GetAll();
            categories = await categoryService.GetAllCategory();
        }
        catch (Exception)
        {
            serverError = true;
            StateHasChanged();
        }
    }

    private void RemoveTask(string title)
    {
        var r = Tasks.FirstOrDefault(t => t.Title == title);
        Tasks.Remove(r);
    }

    private async Task HandleSubmit()
    {
        var catId = categories.FirstOrDefault(c => c.Name == selectedCategory).Id;
        internshipService.createCommand.CategoryId = catId;
        internshipService.createCommand.VacancyQuestions = Questions;

        if (applicationDeadlineTime.HasValue)
            internshipService.createCommand.ApplicationDeadline = internshipService.createCommand.ApplicationDeadline + applicationDeadlineTime.Value;

        if (endDate_Time.HasValue)
            internshipService.createCommand.ApplicationDeadline = internshipService.createCommand.EndDate + endDate_Time.Value;

        if (publishDate_Time.HasValue)
            internshipService.createCommand.ApplicationDeadline = internshipService.createCommand.PublishDate + publishDate_Time.Value;
        try
        {
            internshipService.createCommand.VacancyTasks = Tasks;
            var result = await internshipService.Create();
            if (result.IsSuccessStatusCode)
            {
                Snackbar.Add($"{internshipService.createCommand.Title} created", Severity.Success);
            }
            else
            {
                Snackbar.Add((await result.Content.ReadFromJsonAsync<CustomProblemDetails>()).Detail, Severity.Error);
            }
            await LoadData();
            Clear();
        }
        catch (Exception)
        {
            Snackbar.Add("Server is not responding, try latter", Severity.Error);
        }
    }

    private async Task HandleUpdate()
    {
        internshipService.createCommand.VacancyQuestions = Questions;
        internshipService.createCommand.VacancyTasks = Tasks;
        var catId = categories.FirstOrDefault(c => c.Name == selectedCategory).Id;
        internshipService.createCommand.CategoryId = catId;
        try
        {
            var result = await internshipService.Update(UpdateSlug);
            if (result.StatusCode == System.Net.HttpStatusCode.Created)
            {
                Snackbar.Add("Updated", Severity.Success);
            }
            else
            {
                Snackbar.Add((await result.Content.ReadFromJsonAsync<CustomProblemDetails>()).Detail, Severity.Error);
            }
            await LoadData();
            Clear();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Snackbar.Add("Server is not responding, try latter", Severity.Error);
        }
    }

    public void AddQuestions()
    {
        if (newQuestion.Trim() != "")
        {
            Questions.Add(new VacancyQuestionDto { Question = newQuestion });
            newQuestion = "";
        }
    }

    public void AddTask()
    {
        Tasks.Add(new VacancyTaskDto
        {
            Title = newTitle,
            Description = newDescription,
            Template = newTemplate,
            Test = newTest
        });
        newTitle = "";
        newDescription = "";
        newTemplate = "";
        newTest = "";
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            await Task.Delay(1);
            AddQuestions();
            AddTask();
        }
    }

    void HandleCancel()
    {
        Clear();
    }

    private void Clear()
    {
        createOrEditHeader = "New Internship Vacancy";
        internshipService.createCommand.Title = string.Empty;
        internshipService.createCommand.ShortDescription = string.Empty;
        internshipService.createCommand.Description = string.Empty;
        internshipService.createCommand.ApplicationDeadline = DateTime.Now;
        internshipService.createCommand.Stipend = 0;
        internshipService.createCommand.Duration = 0;
        internshipService.createCommand.EndDate = DateTime.Now;
        internshipService.createCommand.PublishDate = DateTime.Now;
        isInserting = false;
        isUpdating = true;
        panelOpenState = false;
        UpdateSlug = string.Empty;
        Questions.Clear();
        applicationDeadlineTime = DateTime.Now.TimeOfDay;
        publishDate_Time = DateTime.Now.TimeOfDay;
        endDate_Time = DateTime.Now.TimeOfDay;
        Tasks.Clear();
    }

}