@page "/dashboard/trainings"
@layout Dashboard
@using MRA.Jobs.Application.Contracts.TrainingVacancies.Responses;
@using MRA.Jobs.Client.Components.Dialogs;
@using MRA.Jobs.Application.Contracts.VacancyCategories.Responses;
@inject ITrainingService trainingService
@inject ICategoryService categoryService


<MudText Typo="Typo.h3" Style="margin:50px; color: #129fd7; text-align: center; font-weight: 900">Trainings</MudText>
@if (serverError)
{
	<ServerErrorComponent/>
}
else
{
	<style>
		.mud-input-control {
			margin-bottom: 10px;
		}
	</style>
<style>
	.mud-input-control {
		margin-bottom: 10px;
	}
</style>

	@if (categories == null)
	{
		<div class="loader"></div>
	}
	else
	{
		<MudExpansionPanels>
			<MudExpansionPanel Text="Create new Training" @bind-IsExpanded="@panelOpenState">
				<MudTextField @bind-Value="@trainingService.createCommand.Title" Label="Title" Variant="Variant.Outlined"></MudTextField>
				<MudTextField Lines="5" @bind-Value="@trainingService.createCommand.ShortDescription" Variant="Variant.Outlined" Label="ShortDescription"></MudTextField>
				<MudTextField Lines="5" @bind-Value="@trainingService.createCommand.Description" Label="Description" Variant="Variant.Outlined"></MudTextField>
				<div class="row">
					<div class="col-md-4">
						<MudTextField @bind-Value="@trainingService.createCommand.Duration" Variant="Variant.Outlined" Label="Duration"></MudTextField>
					</div>
					<div class="col-md-4">
						<MudTextField @bind-Value="@trainingService.createCommand.Fees" Label="Fees" Variant="Variant.Outlined"></MudTextField>
					</div>
					<div class="col-md-4">
						<MudSelect T="string" Label="@selectedCategory" @bind-Value="@selectedCategory" Variant="Variant.Outlined">
							@foreach (var cat in categories)
							{
								<MudSelectItem Value="@cat.Name" />
							}
						</MudSelect>
					</div>
				</div>
				<div class="row">
					<div class="col-md-6">
						<MudDatePicker @bind-Date="@trainingService.createCommand.EndDate" Variant="Variant.Outlined" Label="End date" />
					</div>
					<div class="col-md-6">
						<MudDatePicker @bind-Date="@trainingService.createCommand.PublishDate" Variant="Variant.Outlined" Label="Publish date" />
					</div>
				</div>
				<MudPaper Class="p-2 mb-2">
					<MudText Typo="Typo.caption">Vacancy questions</MudText>
					@foreach (var ques in Questions)
					{
						<MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.QuestionMark" /> @ques.Question<MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveQuestion(ques.Question)" aria-label="delete"></MudIconButton></MudText>
@if (categories == null)
{
	<div>loading....</div>
}
else
{
	<MudExpansionPanels>
		<MudExpansionPanel Text="Create new Training" @bind-IsExpanded="@panelOpenState">
			<MudTextField @bind-Value="@trainingService.createCommand.Title" Label="Title" Variant="Variant.Outlined"></MudTextField>
			<MudTextField Lines="5" @bind-Value="@trainingService.createCommand.ShortDescription" Variant="Variant.Outlined" Label="ShortDescription"></MudTextField>
			<MudTextField Lines="5" @bind-Value="@trainingService.createCommand.Description" Label="Description" Variant="Variant.Outlined"></MudTextField>
			<div class="row">
				<div class="col-md-4">
					<MudTextField @bind-Value="@trainingService.createCommand.Duration" Variant="Variant.Outlined" Label="Duration"></MudTextField>
				</div>
				<div class="col-md-4">
					<MudTextField @bind-Value="@trainingService.createCommand.Fees" Label="Fees" Variant="Variant.Outlined"></MudTextField>
				</div>
				<div class="col-md-4">
					<MudSelect T="string" Label="@selectedCategory" @bind-Value="@selectedCategory" Variant="Variant.Outlined">
						@foreach (var cat in categories)
						{
							<MudSelectItem Value="@cat.Name" />
						}
					</MudSelect>
				</div>
			</div>
			<div class="row">
				<div class="col-md-6">
					<MudDatePicker @bind-Date="@trainingService.createCommand.EndDate" Variant="Variant.Outlined" Label="End date" />
				</div>
				<div class="col-md-6">
					<MudDatePicker @bind-Date="@trainingService.createCommand.PublishDate" Variant="Variant.Outlined" Label="Publish date" />
				</div>
			</div>
			<MudPaper Class="p-2 mb-2">
				<MudText Typo="Typo.caption">Vacancy questions</MudText>
				@foreach (var ques in Questions)
				{
					<MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.QuestionMark" /> @ques.Question<MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveQuestion(ques.Question)" aria-label="delete"></MudIconButton></MudText>

					}
					<MudTextField @bind-Value="newQuestion" OnKeyDown="@OnKeyDown" OnAdornmentClick="AddQuestions" Label="New question" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon=@Icons.Material.Filled.Add AdornmentColor="Color.Secondary" />
				</MudPaper>
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" @onclick="@HandleSubmit" Id="btnInsert" hidden="@isInserting">Insert</MudButton>
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning" @onclick="@HandleUpdate" Id="btnUpdate" hidden="@isUpdating">Update</MudButton>
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Surface" @onclick="@HandleCancel" Id="btnUpdate">Cancel</MudButton>
			</MudExpansionPanel>
		</MudExpansionPanels>
				}
				<MudTextField @bind-Value="newQuestion" OnKeyDown="@OnKeyDown" OnAdornmentClick="AddQuestions" Label="New question" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon=@Icons.Material.Filled.Add AdornmentColor="Color.Secondary" />
			</MudPaper>
			<MudPaper Class="p-2 mb-2">
				<MudText Typo="Typo.caption">Vacancy Tasks</MudText>
				@foreach (var task in Tasks)
				{
					<MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Task" /> @task.Title<MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveTask(task.Title)" aria-label="delete"></MudIconButton></MudText>
					<MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Task" /> @task.Description</MudText>
					<MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Task" /> @task.Template</MudText>
					<MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Task" /> @task.Test</MudText>

				}
				<MudTextField @bind-Value="newTitle" OnKeyDown="@OnKeyDown" Label="New Title" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary" />
				<MudTextField Lines="5" @bind-Value="newDescription" OnKeyDown="@OnKeyDown" Label="New Description" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary" />
				<MudTextField Lines="5" @bind-Value="newTemplate" OnKeyDown="@OnKeyDown" Label="New Template" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary" />
				<MudTextField Lines="5" @bind-Value="newTest" OnKeyDown="@OnKeyDown" Label="New Test" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentColor="Color.Secondary" />
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Surface" @onclick="@AddTask" Id="AddTask">Add Task</MudButton>
			</MudPaper>
			<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" @onclick="@HandleSubmit" Id="btnInsert" hidden="@isInserting">Insert</MudButton>
			<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning" @onclick="@HandleUpdate" Id="btnUpdate" hidden="@isUpdating">Update</MudButton>
			<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Surface" @onclick="@HandleCancel" Id="btnUpdate">Cancel</MudButton>
		</MudExpansionPanel>
	</MudExpansionPanels>

		<DeleteConfirmation @bind-IsOpen="@isDialogOpen" OnConfirm="DeleteItem" />
		<MudTable Items="@trainings" Class="text-center" Breakpoint="Breakpoint.Md">
			<HeaderContent>
				<MudTh>Title</MudTh>
				<MudTh>Short description</MudTh>
				<MudTh>Category</MudTh>
				<MudTh>Publish date</MudTh>
				<MudTh>End date</MudTh>
				<MudTh>Duration</MudTh>
				<MudTh>Fees</MudTh>
				<MudTh></MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Title">@context.Title</MudTd>
				<MudTd DataLabel="Short description">
					@(context.ShortDescription.Count() > 50 ? context.ShortDescription.Substring(0, 50) : context.ShortDescription)
				</MudTd>
				<MudTd DataLabel="Category">@context.Category</MudTd>
				<MudTd DataLabel="PublishDate">@context.PublishDate.ToString("D")</MudTd>
				<MudTd DataLabel="EndDate">@context.EndDate.ToString("D")</MudTd>
				<MudTd DataLabel="Duration">@context.Duration</MudTd>
				<MudTd DataLabel="Fees">@context.Fees</MudTd>
				<MudTd DataLabel="Action">
					<MudButton @onclick="()=>OnDeleteClick(context.Slug)" Style="color:#2094CC" Icon="delete">Delete</MudButton>
					<MudButton @onclick="()=>OnEditClick(context.Slug)" Style="color:#2094CC" Icon="edit">Edit</MudButton>
				</MudTd>
			</RowTemplate>
			<PagerContent>
				<MudTablePager />
			</PagerContent>
		</MudTable>
	<DeleteConfirmation @bind-IsOpen="@isDialogOpen" OnConfirm="DeleteItem" />
	<MudTable Items="@trainings" Class="text-center" Breakpoint="Breakpoint.Md">
		<HeaderContent>
			<MudTh>Title</MudTh>
			<MudTh>Short description</MudTh>
			<MudTh>Category</MudTh>
			<MudTh>Publish date</MudTh>
			<MudTh>End date</MudTh>
			<MudTh>Duration</MudTh>
			<MudTh>Fees</MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Title">@context.Title</MudTd>
			<MudTd DataLabel="Short description">
				@(context.ShortDescription.Count() > 50 ? context.ShortDescription.Substring(0, 50) : context.ShortDescription)
			</MudTd>
			<MudTd DataLabel="Category">@context.Category</MudTd>
			<MudTd DataLabel="PublishDate">@context.PublishDate.ToString("D")</MudTd>
			<MudTd DataLabel="EndDate">@context.EndDate.ToString("D")</MudTd>
			<MudTd DataLabel="Duration">@context.Duration</MudTd>
			<MudTd DataLabel="Fees">@context.Fees</MudTd>
			<MudTd DataLabel="Action">
				<MudButton @onclick="()=>OnDeleteClick(context.Slug)" Style="color:#2094CC" Icon="delete">Delete</MudButton>
				<MudButton @onclick="()=>OnEditClick(context.Slug)" Style="color:#2094CC" Icon="edit">Edit</MudButton>
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager />
		</PagerContent>
	</MudTable>


	}}

}

@code {
	private bool serverError;
	bool panelOpenState;
	bool isInserting;
	bool isUpdating = true;
	string UpdateSlug;
	string selectedCategory = "Select category";
	private string newQuestion = string.Empty;
	bool panelOpenState;
	bool isInserting;
	bool isUpdating = true;
	string UpdateSlug;
	string selectedCategory = "Select category";
	private string newQuestion = string.Empty;
	private string newDescription = string.Empty;
	private string newTemplate = string.Empty;
	private string newTest = string.Empty;
	private string newTitle = string.Empty;

	private List<VacancyQuestionDto> Questions = new();
	private List<CategoryResponse> categories;
	private List<TrainingVacancyListDto> trainings;
	private List<VacancyQuestionDto> Questions = new();
	private List<VacancyTaskDto> Tasks = new();
	private List<CategoryResponse> categories;
	private List<TrainingVacancyListDto> trainings;

	protected override async Task OnInitializedAsync()
	{

		await LoadData();
	}

	private bool isDialogOpen;
	private string itemSlugToDelete;

	void OnDeleteClick(string slug)
	{
		itemSlugToDelete = slug;
		isDialogOpen = true;
	}
	private async Task DeleteItem()
	{
		await trainingService.Delete(itemSlugToDelete);
		isDialogOpen = false;
		await LoadData();
	}

	private async Task OnEditClick(string slug)
	{
		var vacancy = await trainingService.GetBySlug(slug);
		if (vacancy != null)
		{
			trainingService.createCommand.Title = vacancy.Title;
			trainingService.createCommand.ShortDescription = vacancy.ShortDescription;
			trainingService.createCommand.Description = vacancy.Description;
			trainingService.createCommand.Duration = vacancy.Duration;
			trainingService.createCommand.EndDate = vacancy.EndDate;
			trainingService.createCommand.PublishDate = vacancy.PublishDate;
			trainingService.createCommand.CategoryId = vacancy.CategoryId;
			trainingService.createCommand.Fees = vacancy.Fees;
			isInserting = true;
			isUpdating = false;
			panelOpenState = true;
			UpdateSlug = slug;
			Questions = vacancy.VacancyQuestions.Select(v =>

				new VacancyQuestionDto
					{
						Question = v.Question
					}
			).ToList();
		}
	}
				new VacancyQuestionDto
					{
						Question = v.Question
					}
			).ToList();
			Tasks = vacancy.VacancyTasks.Select(v =>
				new VacancyTaskDto
					{
						Title = v.Title,
						Description = v.Description,
						Template = v.Template,
						Test = v.Test
					}).ToList();
		}
	}

	private void RemoveQuestion(string question)
	{
		var q = Questions.FirstOrDefault(t => t.Question == question);
		Questions.Remove(q);
	}
	private void RemoveQuestion(string question)
	{
		var q = Questions.FirstOrDefault(t => t.Question == question);
		Questions.Remove(q);
	}
	private void RemoveTask(string title)
	{
		var r = Tasks.FirstOrDefault(t => t.Title == title);
		Tasks.Remove(r);
	}

	private async Task LoadData()
	{
		try
		{
			trainings = (await trainingService.GetAll()).Items;
			categories = await categoryService.GetAllCategory();
		}
		catch (Exception)
		{

			serverError = true;
			StateHasChanged();
		}

	}
	private async Task LoadData()
	{
		trainings = (await trainingService.GetAll()).Items;
		categories = await categoryService.GetAllCategory();
	}

	private async Task HandleSubmit()
	{
		var catId = categories.FirstOrDefault(c => c.Name == selectedCategory).Id;
		trainingService.createCommand.CategoryId = catId;
		trainingService.createCommand.VacancyQuestions = Questions;
		await trainingService.Create();
		await LoadData();
		Clear();
	}
	private async Task HandleSubmit()
	{
		var catId = categories.FirstOrDefault(c => c.Name == selectedCategory).Id;
		trainingService.createCommand.CategoryId = catId;
		trainingService.createCommand.VacancyQuestions = Questions;
		trainingService.createCommand.VacancyTasks = Tasks;
		await trainingService.Create();
		await LoadData();
		Clear();
	}

	private async Task HandleUpdate()
	{
		trainingService.createCommand.VacancyQuestions = Questions;
		var catId = categories.FirstOrDefault(c => c.Name == selectedCategory).Id;
		trainingService.createCommand.CategoryId = catId;
		await trainingService.Update(UpdateSlug);
		await LoadData();
		Clear();
	}
	private async Task HandleUpdate()
	{
		trainingService.createCommand.VacancyQuestions = Questions;
		trainingService.createCommand.VacancyTasks = Tasks;
		var catId = categories.FirstOrDefault(c => c.Name == selectedCategory).Id;
		trainingService.createCommand.CategoryId = catId;
		await trainingService.Update(UpdateSlug);
		await LoadData();
		Clear();
	}

	public void AddQuestions()
	{
		Questions.Add(new VacancyQuestionDto { Question = newQuestion });
		newQuestion = "";
	}

	private async Task OnKeyDown(KeyboardEventArgs e)
	{
		if (e.Code == "Enter")
		{
			await Task.Delay(1);
			AddQuestions();
		}
	}
	public void AddQuestions()
	{
		Questions.Add(new VacancyQuestionDto { Question = newQuestion });
		newQuestion = "";
	}
	public void AddTask()
	{
		Tasks.Add(new VacancyTaskDto
			{
				Title = newTitle,
				Description = newDescription,
				Template = newTemplate,
				Test = newTest
			});
		newTitle = "";
		newDescription = "";
		newTemplate = "";
		newTest = "";
	}
	private async Task OnKeyDown(KeyboardEventArgs e)
	{
		if (e.Code == "Enter")
		{
			await Task.Delay(1);
			AddQuestions();
			AddTask();
		}
	}

	void HandleCancel()
	{
		Clear();
	}

	private void Clear()
	{
		trainingService.createCommand.Title = string.Empty;
		trainingService.createCommand.ShortDescription = string.Empty;
		trainingService.createCommand.Description = string.Empty;
		trainingService.createCommand.Fees = 0;
		trainingService.createCommand.Duration = 0;
		trainingService.createCommand.EndDate = DateTime.Now;
		trainingService.createCommand.PublishDate = DateTime.Now;
		isInserting = false;
		isUpdating = true;
		panelOpenState = false;
		UpdateSlug = string.Empty;
		Questions.Clear();
	}
	private void Clear()
	{
		trainingService.createCommand.Title = string.Empty;
		trainingService.createCommand.ShortDescription = string.Empty;
		trainingService.createCommand.Description = string.Empty;
		trainingService.createCommand.Fees = 0;
		trainingService.createCommand.Duration = 0;
		trainingService.createCommand.EndDate = DateTime.Now;
		trainingService.createCommand.PublishDate = DateTime.Now;
		isInserting = false;
		isUpdating = true;
		panelOpenState = false;
		UpdateSlug = string.Empty;
		Questions.Clear();
		Tasks.Clear();
	}

}
