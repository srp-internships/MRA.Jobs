@page "/profile"
@using MRA.Identity.Application.Contract.Educations.Command.Create;
@using MRA.Identity.Application.Contract.Educations.Command.Update;
@using MRA.Identity.Application.Contract.Educations.Responses;
@using MRA.Identity.Application.Contract.Experiences.Commands.Create;
@using MRA.Identity.Application.Contract.Experiences.Commands.Update;
@using MRA.Identity.Application.Contract.Experiences.Responses;
@using MRA.Identity.Application.Contract.Profile.Commands.UpdateProfile;
@using MRA.Identity.Application.Contract.Profile.Responses;
@using MRA.Identity.Application.Contract.Profile;
@using MRA.Identity.Application.Contract.Skills.Command;
@using MRA.Identity.Application.Contract.Skills.Responses;
@using MRA.Jobs.Client.Components.Dialogs;
@using MRA.Jobs.Client.Services.Profile;
@using MudBlazor;
@using FluentValidation;
@inject ISnackbar Snackbar

@inject IDialogService DialogService;
@inject IUserProfileService UserProfileService;

<div class="container m-0">
	<div class="row">
		<div class="col-md-4">
			<MudPaper Width="250px" Class="py-3" Elevation="0">
				<MudNavMenu>
					<MudText Typo="Typo.h6" Class="px-4">My Profile</MudText>

					<MudDivider Class="my-2" />

					<MudNavLink Class="@((Active == 0) ? "active" : "")" OnClick="()=> Active=0">Personal Information</MudNavLink>
					<MudNavLink Class="@((Active == 1) ? "active" : "")" OnClick="()=> Active=1">Educations </MudNavLink>
					<MudNavLink Class="@((Active == 2) ? "active" : "")" OnClick="()=> Active=2">Experience </MudNavLink>
					<MudNavLink Class="@((Active == 3) ? "active" : "")" OnClick="()=> Active=3">Skills</MudNavLink>

				</MudNavMenu>
			</MudPaper>
		</div>
		<div class="col-md-8" style="padding:10px;">
			@switch (Active)
			{
				case 0:
					<MudText Typo="Typo.h4"> Personal Information</MudText> <br />
					if (updateProfileCommand == null)
					{
						<MudCard>
							<MudCardHeader>

							</MudCardHeader>
							<MudCardContent>
								<MudSkeleton Width="30%" />
								<MudSkeleton Width="40%" Height="42px;" />
								<MudSkeleton Width="30%" />
								<MudSkeleton Width="60%" Height="42px;" />
								<MudSkeleton Width="30%" />
								<MudSkeleton Width="50%" Height="42px;" />
								<MudSkeleton Width="30%" />
								<MudSkeleton Width="100%" Height="42px;" />
								<MudSkeleton Width="100%" Height="42px;" />
								<MudSkeleton Width="100%" Height="42px;" />
								<MudSkeleton Width="50%" Height="42px;" />
								<MudCardActions>
									<MudSkeleton Width="50px" Class="ml-1" />
									<MudSkeleton Width="40px" Height="42px" Class="ml-2" />
								</MudCardActions>
							</MudCardContent>
							<MudCardActions>
								<MudSkeleton Width="64px" Height="40px" Class="ml-2" />
								<MudSkeleton Width="105px" Height="40px" Class="ml-3" />
							</MudCardActions>
						</MudCard>
					}
					else
					{
						<EditForm Model="@updateProfileCommand" OnValidSubmit="UpdateProfile">
							<FluentValidationValidator />

							<MudCard>
								<MudCardContent>
									<MudText Typo="Typo.body2" Class="mud-text-secondary">First Name</MudText>
									<MudTextField @bind-Value="@updateProfileCommand.FirstName" Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => updateProfileCommand.FirstName)" />
									<br />
									<MudText Typo="Typo.body2" Class="mud-text-secondary">Last Name</MudText>
									<MudTextField @bind-Value="@updateProfileCommand.LastName" Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => updateProfileCommand.LastName)" />
									<br />
									<MudText Typo="Typo.body2" Class="mud-text-secondary">UserName</MudText>
									<MudTextField @bind-Value="@profile.UserName" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true" />
									<br />
									<MudText Typo="Typo.body2" Class="mud-text-secondary">Email</MudText>
									<MudTextField @bind-Value="@updateProfileCommand.Email" Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => updateProfileCommand.Email)" />
									<br />
									<MudText Typo="Typo.body2" Class="mud-text-secondary">Date Of Birth</MudText>
									<MudDatePicker @bind-Value="@updateProfileCommand.DateOfBirth" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => updateProfileCommand.DateOfBirth)" />
									<br />
									<MudText Typo="Typo.body2" Class="mud-text-secondary">Phone Number</MudText>
									<MudTextField @bind-Value="@updateProfileCommand.PhoneNumber" Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => updateProfileCommand.PhoneNumber)" />
									<br />
									<MudText Typo="Typo.body2" Class="mud-text-secondary">About Myself</MudText>
									<MudTextField T="string" @bind-Value="@updateProfileCommand.AboutMyself" Variant="Variant.Outlined" Margin="Margin.Dense" Lines="5" For="@(() => updateProfileCommand.AboutMyself)" />
									<br />
									<MudSelect T="Gender" Label="Select Gender" @bind-Value="@updateProfileCommand.Gender" Variant="Variant.Outlined" For="@(() => updateProfileCommand.Gender)">
										<MudSelectItem Value="Gender.Male" />
										<MudSelectItem Value="Gender.Female" />
									</MudSelect>
								</MudCardContent>
								<MudCardActions>
									<MudButton Color="Color.Primary" Variant="Variant.Filled" Type="submit" OnClick="UpdateProfile">Update Profile</MudButton>
								</MudCardActions>
							</MudCard>
						</EditForm>
					}
					break;
				case 1:
					<MudText Typo="Typo.h4"> Educations</MudText>

					<br />
					<div class="row">
						@if (educations == null)
						{
							@for (int i = 0; i < 5; i++)
							{
								<MudItem xs="6">
									<MudCard>
										<MudCardHeader>
											<MudSkeleton Width="40%" Height="50px" />
										</MudCardHeader>
										<MudCardContent>
											<MudSkeleton Width="100%" />
											<MudSkeleton Width="100%" />
											<MudSkeleton Width="70%" />
										</MudCardContent>
										<MudCardActions>
											<MudSkeleton Width="36px" Height="36px" Class="ml-2" />
											<MudSkeleton Width="36px" Height="36px" Class="ml-3" />
										</MudCardActions>
									</MudCard>
								</MudItem>
							}
						}
						else
						{
							@foreach (UserEducationResponse education in educations)
							{
								Guid cardId = education.Id;
								<div class="col-md-6 mb-3">
									<MudCard>
										<!-- Edit Education -->
										@if (editingCardId == cardId)
										{
											<MudCardHeader>
												<CardHeaderContent>
													<MudTextField @bind-Value="@education.Speciality" Variant="Variant.Outlined" Margin="Margin.Dense" />
												</CardHeaderContent>
											</MudCardHeader>
											<MudCardContent>
												<MudTextField @bind-Value="@education.University" Variant="Variant.Outlined" Label="University" Margin="Margin.Dense" />
												<MudDatePicker Label="Start Date" @bind-Date="education.StartDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" />
												@if (education.UntilNow == false)
												{
													<MudDatePicker Label="End Date" @bind-Date="education.EndDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" />
												}
												<MudCheckBox @bind-Checked="@education.UntilNow" Label="Until Now" Color="Color.Primary"></MudCheckBox>
											</MudCardContent>
											<MudCardActions>
												<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(()=>UpdateEducationHandle(education))">
													Update
												</MudButton>
												<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CancelButtonClicked_UpdateEducation">
													Cancel
												</MudButton>
											</MudCardActions>
										}
										else
										{
											<MudCardHeader>
												<CardHeaderContent>
													<MudText Typo="Typo.h6"><strong>@education.Speciality</strong></MudText>
												</CardHeaderContent>
												<CardHeaderActions>
													<MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" OnClick="() => EditButtonClicked(cardId, education)" />
													<MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" Color="Color.Error" Size="Size.Small" OnClick="(()=>ConfirmDelete(educations,education))" />
												</CardHeaderActions>
											</MudCardHeader>
											<MudCardContent>
												<MudText>@education.University</MudText>
												@if (education.UntilNow == false)
												{
													<MudText>
														@education.StartDate?.ToString("MMM. yyyy") - @education.EndDate?.ToString("MMM. yyyy")
													</MudText>
												}
												else
												{
													<MudText>
														@education.StartDate?.ToString("MMM. yyyy")  - <MudChip Icon="@Icons.Material.Filled.School" Disabled="true" Color="Color.Success">Present</MudChip>
													</MudText>
												}


											</MudCardContent>
										}
									</MudCard>
								</div>
							}

						}
						<!--Add new Education-->
						<div class="col-md-6 mb-3">
							<MudCard>
								@if (addEducation == false)
								{
									<MudCardHeader>
										<CardHeaderContent>
											<MudText Typo="Typo.h6"><strong>Add New Education</strong></MudText>

										</CardHeaderContent>
									</MudCardHeader>
									<MatCardContent>
										<div class="d-flex align-center justify-center mud-width-full py-8">
											<MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@(()=>addEducation=true)" />
										</div>
									</MatCardContent>
								}
								else
								{
									<EditForm Model="createEducation" OnInvalidSubmit="CreateEducationHandle">
										<MudCardHeader>
											<CardHeaderContent>
												<MudTextField @bind-Value="@createEducation.Speciality" Variant="Variant.Outlined" Label="Specialty" Margin="Margin.Dense" />
											</CardHeaderContent>
										</MudCardHeader>
										<MudCardContent>
											<MudTextField @bind-Value="@createEducation.University" Variant="Variant.Outlined" Label="University" Margin="Margin.Dense" />
											<MudDatePicker Label="Start Date" @bind-Date="createEducation.StartDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" />
											@if (createEducation.UntilNow == false)
											{
												<MudDatePicker Label="End Date" @bind-Date="createEducation.EndDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" />
											}
											<MudCheckBox @bind-Checked="@createEducation.UntilNow" Label="Until Now" Color="Color.Primary"></MudCheckBox>
										</MudCardContent>
										<MudCardActions>
											<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateEducationHandle">
												Save
											</MudButton>
											<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CancelButtonClicked_CreateEducation">
												Cancel
											</MudButton>
										</MudCardActions>
									</EditForm>
								}
							</MudCard>
						</div>
						<!--------------------->
					</div>
					break;
				case 2:
					<MudText Typo="Typo.h4"> Experiences</MudText>

					<br />
					<MudGrid>
						@if (experiences == null)
						{
							@for (int i = 0; i < 5; i++)
							{
								<MudItem xs="6">
									<MudCard>
										<MudCardHeader>
											<MudSkeleton Width="40%" Height="50px" />
										</MudCardHeader>
										<MudCardContent>
											<MudSkeleton Width="100%" />
											<MudSkeleton Width="100%" />
											<MudSkeleton Width="70%" />
										</MudCardContent>
										<MudCardActions>
											<MudSkeleton Width="36px" Height="36px" Class="ml-2" />
											<MudSkeleton Width="36px" Height="36px" Class="ml-3" />
										</MudCardActions>
									</MudCard>
								</MudItem>
							}
						}
						else
						{
							@foreach (UserExperienceResponse experience in experiences)
							{
								Guid cardExperienceId = experience.Id;
								<div class="col-md-6 mb-3">
									<MudCard>
										<!-- Edit Education -->
										@if (editingCardExperienceId == cardExperienceId)
										{
											<MudCardHeader>
												<CardHeaderContent>
													<MudTextField @bind-Value="@experience.JobTitle" Variant="Variant.Outlined" Label="Job Title" Margin="Margin.Dense" />
												</CardHeaderContent>
											</MudCardHeader>
											<MudCardContent>
												<MudTextField @bind-Value="@experience.CompanyName" Variant="Variant.Outlined" Label="Company Name" Margin="Margin.Dense" />
												<MudDatePicker Label="Start Date" @bind-Date="experience.StartDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" />
												@if (experience.IsCurrentJob == false)
												{
													<MudDatePicker Label="End Date" @bind-Date="experience.EndDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" />
												}
												<MudCheckBox @bind-Checked="@experience.IsCurrentJob" Label="Until Now" Color="Color.Primary"></MudCheckBox>
												<MudTextField @bind-Value="@experience.Address" Label="Address" Variant="Variant.Outlined"></MudTextField>
												<MudTextField T="string" @bind-Value="@experience.Description" Label="Description" Lines="5" Variant="Variant.Outlined"></MudTextField>

											</MudCardContent>
											<MudCardActions>
												<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(()=>UpdateExperienceHandle(experience))">
													Update
												</MudButton>
												<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CancelButtonClicked_UpdateExperience">
													Cancel
												</MudButton>
											</MudCardActions>
										}
										else
										{
											<MudCardHeader>
												<CardHeaderContent>
													<MudText Typo="Typo.h6"><strong>@experience.JobTitle</strong></MudText>
												</CardHeaderContent>
												<CardHeaderActions>
													<MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" OnClick="(() => EditCardExperienceButtonClicked(cardExperienceId))" />
													<MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" Color="Color.Error" Size="Size.Small" OnClick="(()=>ConfirmDelete(experiences,experience))" />
												</CardHeaderActions>
											</MudCardHeader>
											<MudCardContent>
												<MudText><MudIcon Icon="@Icons.Material.Filled.Work"></MudIcon>@experience.CompanyName</MudText>
												@if (experience.IsCurrentJob == false)
												{
													<MudText>
														<MudIcon Icon="@Icons.Material.Filled.CalendarMonth"></MudIcon>
														@experience.StartDate?.ToString("MMM. yyyy") - @experience.EndDate?.ToString("MMM. yyyy")
													</MudText>
												}
												else
												{
													<MudText>
														<MudIcon Icon="@Icons.Material.Filled.CalendarMonth"></MudIcon>
														@experience.StartDate?.ToString("MMM. yyyy")  - <MudChip Icon="@Icons.Material.Filled.WorkHistory" Disabled="true" Color="Color.Success">Current Job</MudChip>
													</MudText>
												}
												<MudText><MudIcon Icon="@Icons.Material.Filled.Map"></MudIcon>@experience.Address</MudText>
												<MudText style="text-align: justify;"><MudIcon Icon="@Icons.Material.Filled.TextFields"></MudIcon>@experience.Description</MudText>

											</MudCardContent>
										}
									</MudCard>
								</div>
							}

						}
						<!--Add new Experience-->
						<div class="col-md-6 mb-3">
							<MudCard>
								@if (addExperience == false)
								{
									<MudCardHeader>
										<CardHeaderContent>
											<MudText Typo="Typo.h6"><strong>Add New Experience</strong></MudText>

										</CardHeaderContent>
									</MudCardHeader>
									<MatCardContent>
										<div class="d-flex align-center justify-center mud-width-full py-8">
											<MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@(()=>addExperience=true)" />
										</div>
									</MatCardContent>
								}
								else
								{
									<EditForm Model="createExperience" OnInvalidSubmit="CreateExperienceHandle">
										<MudCardHeader>
											<CardHeaderContent>
												<MudTextField @bind-Value="@createExperience.JobTitle" Variant="Variant.Outlined" Label="Job Title" Margin="Margin.Dense" />
											</CardHeaderContent>
										</MudCardHeader>
										<MudCardContent>
											<MudTextField @bind-Value="@createExperience.CompanyName" Variant="Variant.Outlined" Label="Company Name" Margin="Margin.Dense" />
											<MudDatePicker Label="Start Date" @bind-Date="createExperience.StartDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" />
											@if (createExperience.IsCurrentJob == false)
											{
												<MudDatePicker Label="End Date" @bind-Date="createExperience.EndDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" />
											}
											<MudCheckBox @bind-Checked="@createExperience.IsCurrentJob" Label="Is Current Job" Color="Color.Primary"></MudCheckBox>
											<MudTextField @bind-Value="@createExperience.Address" Label="Address" Variant="Variant.Outlined"></MudTextField>
											<MudTextField T="string" @bind-Value="@createExperience.Description" Label="Description" Lines="5" Variant="Variant.Outlined"></MudTextField>
										</MudCardContent>
										<MudCardActions>
											<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateExperienceHandle">
												Save
											</MudButton>
											<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CancelButtonClicked_CreateExperience">
												Cancel
											</MudButton>
										</MudCardActions>
									</EditForm>
								}
							</MudCard>
						</div>
						<!--------------------->
					</MudGrid>
					break;
				case 3:
					<MudText Typo="Typo.h4"> Skills</MudText>

					<br />
					<MudGrid>

						<div class="col-md-12 mb-6">
							<MudCard>
								<MudCardContent>
									<div>
										@foreach (string skill in UserSkills.Skills)
										{
											<MudChip Color="Color.Default" OnClose="Closed" Text="@skill">@skill</MudChip>
										}
										@if (isEditing)
										{
											<MudTextField @onkeydown="KeyDown" @onblur="AddSkills" @bind-Value="newSkills" Variant="Variant.Outlined" Label="Skills" Class="form-control" />
										}
										else
										{
											<MudFab Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add" OnClick="()=> isEditing = true" />
										}
									</div>
								</MudCardContent>
							</MudCard>
						</div>

					</MudGrid>
					break;
			}
		</div>
	</div>
</div>

@code {
	private int Active = 0;

	#region education
	List<UserEducationResponse> educations = new List<UserEducationResponse>();
	private bool addEducation = false;
	CreateEducationDetailCommand createEducation = new CreateEducationDetailCommand();

	Guid editingCardId = new Guid();
	UpdateEducationDetailCommand educationUpdate = null;

	private async Task GetEducations()
	{
		educations = await UserProfileService.GetEducations();
	}

	private void EditButtonClicked(Guid cardId, UserEducationResponse educationResponse)
	{
		editingCardId = cardId;
		educationUpdate = new UpdateEducationDetailCommand()
			{
				EndDate = educationResponse.EndDate.HasValue ? educationResponse.EndDate.Value : default(DateTime),
				StartDate = educationResponse.StartDate.HasValue ? educationResponse.StartDate.Value : default(DateTime),
				University = educationResponse.University,
				Speciality = educationResponse.Speciality,
				Id = educationResponse.Id,
				UntilNow = educationResponse.UntilNow
			};
	}

	private async Task CreateEducationHandle()
	{
		if (createEducation.EndDate == null)
			createEducation.EndDate = default(DateTime);

		var response = await UserProfileService.CreateEducationAsуnc(createEducation);
		if (response.IsSuccessStatusCode)
		{
			addEducation = false;
			createEducation = new CreateEducationDetailCommand();
			await GetEducations();
		}
	}

	private void CancelButtonClicked_CreateEducation()
	{
		addEducation = false;
		createEducation = new CreateEducationDetailCommand();
	}

	private async void CancelButtonClicked_UpdateEducation()
	{
		editingCardId = Guid.NewGuid();
		await GetEducations();
		StateHasChanged();
	}

	private async void UpdateEducationHandle(UserEducationResponse education)
	{
		var updateEducation = new UpdateEducationDetailCommand()
			{
				Id = education.Id,
				StartDate = education.StartDate.HasValue ? education.StartDate.Value : default(DateTime),
				EndDate = education.EndDate.HasValue ? education.EndDate.Value : default(DateTime),
				Speciality = education.Speciality,
				University = education.University,
				UntilNow = education.UntilNow
			};

		var result = await UserProfileService.UpdateEducationAsync(updateEducation);
		if (result.IsSuccessStatusCode)
		{
			editingCardId = Guid.NewGuid();
			StateHasChanged();
		}
	}

	#endregion

	#region Experience

	List<UserExperienceResponse> experiences = new List<UserExperienceResponse>();
	private bool addExperience = false;
	CreateExperienceDetailCommand createExperience = new CreateExperienceDetailCommand();
	private Guid editingCardExperienceId;

	private async Task GetExperiences()
	{
		experiences = await UserProfileService.GetExperiences();
	}

	private async Task CreateExperienceHandle()
	{
		if (createExperience.EndDate == null)
			createExperience.EndDate = default(DateTime);

		var response = await UserProfileService.CreateExperienceAsycn(createExperience);
		if (response.IsSuccessStatusCode)
		{
			addExperience = false;
			createExperience = new CreateExperienceDetailCommand();
			await GetExperiences();
		}
	}

	private async void CancelButtonClicked_CreateExperience()
	{
		addExperience = false;
		createExperience = new CreateExperienceDetailCommand();
		await GetExperiences();
	}

	private async void CancelButtonClicked_UpdateExperience()
	{
		editingCardExperienceId = Guid.NewGuid();
		await GetExperiences();
		StateHasChanged();
	}

	private void EditCardExperienceButtonClicked(Guid cardExperienceId)
	{
		editingCardExperienceId = cardExperienceId;
	}

	private async void UpdateExperienceHandle(UserExperienceResponse experience)
	{
		var updateExperience = new UpdateExperienceDetailCommand()
			{
				Id = experience.Id,
				StartDate = experience.StartDate.HasValue ? experience.StartDate.Value : default(DateTime),
				EndDate = experience.EndDate.HasValue ? experience.EndDate.Value : default(DateTime),
				CompanyName = experience.CompanyName,
				JobTitle = experience.JobTitle,
				IsCurrentJob = experience.IsCurrentJob,
				Description = experience.Description,
				Address = experience.Address
			};

		var result = await UserProfileService.UpdateExperienceAsync(updateExperience);
		if (result.IsSuccessStatusCode)
		{
			editingCardExperienceId = Guid.NewGuid();
			StateHasChanged();
		}
	}



	#endregion

	#region Skills

	private UserSkillsResponse UserSkills;
	bool isEditing = false;
	string newSkills = "";
	bool isAdding = false;

	private async Task GetSkills()
	{
		UserSkills = await UserProfileService.GetSkills();
	}

	async void Closed(MudChip chip)
	{
		await ConfirmDelete(UserSkills.Skills, chip.Text);
	}

	private async Task KeyDown(KeyboardEventArgs e)
	{
		if (e.Key == "Enter")
		{
			await Task.Delay(1);
			if (!isAdding)
			{
				isAdding = true;
				AddSkills();
			}
		}
	}


	private async void AddSkills()
	{
		if (!string.IsNullOrWhiteSpace(newSkills))
		{
			var userSkillsCommand = new AddSkillsCommand();
			var skills = newSkills.Split(',', StringSplitOptions.RemoveEmptyEntries);
			foreach (var skill in skills)
			{
				var trimmedSkill = skill.Trim();
				if (!string.IsNullOrWhiteSpace(trimmedSkill))
				{
					userSkillsCommand.Skills.Add(trimmedSkill);
				}
			}
			var result = await UserProfileService.AddSkills(userSkillsCommand);
			if (result != null)
			{
				newSkills = "";
				isEditing = false;
				UserSkills = result;
				StateHasChanged();
			}
			isAdding = false;
		}
	}

	#endregion

	UserProfileResponse profile = null;
	UpdateProfileCommand updateProfileCommand = new UpdateProfileCommand();
	protected override async void OnInitialized()
	{
		profile = await UserProfileService.Get();

		updateProfileCommand.AboutMyself = profile.AboutMyself;
		updateProfileCommand.DateOfBirth = profile.DateOfBirth.HasValue ? profile.DateOfBirth.Value : default(DateTime);
		updateProfileCommand.Email = profile.Email;
		updateProfileCommand.FirstName = profile.FirstName;
		updateProfileCommand.LastName = profile.LastName;
		updateProfileCommand.Gender = profile.Gender;
		updateProfileCommand.PhoneNumber = profile.PhoneNumber;

		await GetEducations();

		await GetExperiences();

		await GetSkills();

		StateHasChanged();
	}





	private async Task ConfirmDelete<T>(IList<T> collection, T item)
	{
		var parameters = new DialogParameters<DialogMudBlazor>();
		parameters.Add(x => x.ContentText, "Do you really want to delete these records? This process cannot be undone.");
		parameters.Add(x => x.ButtonText, "Delete");
		parameters.Add(x => x.Color, Color.Error);

		var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

		var dialog = DialogService.Show<DialogMudBlazor>("Delete", parameters, options);
		var result = await dialog.Result;

		if (!result.Cancelled)
		{
			Delete(collection, item);
		}
	}

	private async void Delete<T>(ICollection<T> collection, T item)
	{
		if (collection.Contains(item))
		{
			Type itemType = item.GetType();
			var idProperty = itemType.GetProperty("Id");
			var result = new HttpResponseMessage();
			if (idProperty != null || itemType.Name == "String")
			{
				if (itemType.Name == "String")
				{
					result = await UserProfileService.RemoveSkillAync(item.ToString());
				}
				else
				{
					Guid id = (Guid)idProperty.GetValue(item);

					switch (itemType.Name)
					{
						case "UserEducationResponse":
							result = await UserProfileService.DeleteEducationAync(id);
							break;
						case "UserExperienceResponse":
							result = await UserProfileService.DeleteExperienceAync(id);
							break;
						default:
							break;
					}

				}
				if (result.IsSuccessStatusCode)
				{
					collection.Remove(item);
					StateHasChanged();
				}
			}
		}
	}





	private async void UpdateProfile()
	{
		var result = await UserProfileService.Update(updateProfileCommand);
		if (result.IsSuccessStatusCode)
		{
			Snackbar.Add("Profile updated successfully.", MudBlazor.Severity.Success);
		}
	}
}