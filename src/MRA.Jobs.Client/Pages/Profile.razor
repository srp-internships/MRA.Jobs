@page "/profile"
@using MRA.Identity.Application.Contract.Educations.Responses;
@using MRA.Identity.Application.Contract.Experiences.Responses;
@using MRA.Identity.Application.Contract.Profile;
@using MRA.Jobs.Client.Pages.Auth
@using MRA.Jobs.Client.Services.Profile;

@inject ISnackbar Snackbar

@inject NavigationManager Navigation
@inject IDialogService DialogService;
@inject IUserProfileService UserProfileService;
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (_tryButton)
{
    <div style="text-align: center;">

        <MudText Typo="Typo.h4" Color="Color.Error">
            <b>Server is not responding</b>
        </MudText><br/>

        <MudButton Variant="Variant.Filled" OnClick="Load">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" Style="color:#fff"/>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Refresh"/>
                <MudText>Try Again</MudText>
            }
        </MudButton>
    </div>
}
else
{
    <MudGrid>
    <MudItem xs="12" sm="12" md="4" lg="3">
        <MudCard Class="rounded-lg mud-evaluation-4">
            <MudCardContent>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <MudNavMenu>
                        <MudText>My Profile</MudText>

                        <MudDivider Class="my-2"/>

                        <MudNavLink Class="@((_active == 0) ? "mud-chip-text mud-chip-color-primary" : "")" OnClick="() => ActiveNavLink(0)">Personal Information</MudNavLink>
                        <MudNavLink Class="@((_active == 1) ? "mud-chip-text mud-chip-color-primary" : "")" OnClick="() => ActiveNavLink(1)">Educations </MudNavLink>
                        <MudNavLink Class="@((_active == 2) ? "mud-chip-text mud-chip-color-primary" : "")" OnClick="() => ActiveNavLink(2)">Experience </MudNavLink>
                        <MudNavLink Class="@((_active == 3) ? "mud-chip-text mud-chip-color-primary" : "")" OnClick="() => ActiveNavLink(3)">Skills</MudNavLink>
                        <MudNavLink Class="@((_active == 4) ? "mud-chip-text mud-chip-color-primary" : "")" OnClick="() => ActiveNavLink(4)">Change Password</MudNavLink>
                    </MudNavMenu>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.MdAndUp">
                    <MudExpansionPanel Text="My Profile">
                        <MudNavMenu>

                            <MudNavLink Class="@((_active == 0) ? "mud-chip-text mud-chip-color-primary" : "")" OnClick="() => ActiveNavLink(0)">Personal Information</MudNavLink>
                            <MudNavLink Class="@((_active == 1) ? "mud-chip-text mud-chip-color-primary" : "")" OnClick="() => ActiveNavLink(1)">Educations </MudNavLink>
                            <MudNavLink Class="@((_active == 2) ? "mud-chip-text mud-chip-color-primary" : "")" OnClick="() => ActiveNavLink(2)">Experience </MudNavLink>
                            <MudNavLink Class="@((_active == 3) ? "mud-chip-text mud-chip-color-primary" : "")" OnClick="() => ActiveNavLink(3)">Skills</MudNavLink>
                            <MudNavLink Class="@((_active == 4) ? "mud-chip-text mud-chip-color-primary" : "")" OnClick="() => ActiveNavLink(4)">Change Password</MudNavLink>
                        </MudNavMenu>
                    </MudExpansionPanel>
                </MudHidden>

            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="12" md="8" lg="9">
    @switch (_active)
    {
        case 0:
            <MudText Typo="Typo.h4"> Personal Information</MudText>
            <br/>
            if (_profile == null)
            {
                <MudCard>
                    <MudCardHeader>

                    </MudCardHeader>
                    <MudCardContent>
                        <MudSkeleton Width="30%"/>
                        <MudSkeleton Width="40%" Height="42px;"/>
                        <MudSkeleton Width="30%"/>
                        <MudSkeleton Width="60%" Height="42px;"/>
                        <MudSkeleton Width="30%"/>
                        <MudSkeleton Width="50%" Height="42px;"/>
                        <MudSkeleton Width="30%"/>
                        <MudSkeleton Width="100%" Height="42px;"/>
                        <MudSkeleton Width="100%" Height="42px;"/>
                        <MudSkeleton Width="100%" Height="42px;"/>
                        <MudSkeleton Width="50%" Height="42px;"/>
                        <MudCardActions>
                            <MudSkeleton Width="50px" Class="ml-1"/>
                            <MudSkeleton Width="40px" Height="42px" Class="ml-2"/>
                        </MudCardActions>
                    </MudCardContent>
                    <MudCardActions>
                        <MudSkeleton Width="64px" Height="40px" Class="ml-2"/>
                        <MudSkeleton Width="105px" Height="40px" Class="ml-3"/>
                    </MudCardActions>
                </MudCard>
            }
            else
            {
                <EditForm Model="@_updateProfileCommand" OnValidSubmit="UpdateProfile">
                    <FluentValidationValidator/>

                    <MudCard Class="rounded-lg mud-elevation-4">
                        <MudCardContent>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">First Name</MudText>
                            <MudTextField @bind-Value="@_updateProfileCommand.FirstName" Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => _updateProfileCommand.FirstName)"/>
                            <br/>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">Last Name</MudText>
                            <MudTextField @bind-Value="@_updateProfileCommand.LastName" Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => _updateProfileCommand.LastName)"/>
                            <br/>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">Username</MudText>
                            <MudTextField @bind-Value="@_profile.UserName" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true"/>
                            <br/>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">Email</MudText>
                            <div class="row">
                                <div class="col">
                                    <MudTextField @bind-Value="@_updateProfileCommand.Email" Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => _updateProfileCommand.Email)"/>
                                </div>
                                <div class="col-4" style="align-content:end; padding-top:10px;">
                                    @if (!_profile.EmailConfirmed)
                                    {
                                        <MudText Typo="Typo.body2" Color="Color.Warning">
                                            <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning"/>
                                            Email is not Confirmed!
                                        </MudText>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2" Color="Color.Success">
                                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"/>
                                            Confirmed
                                        </MudText>
                                    }
                                </div>
                            </div>
                            <br/>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">Date Of Birth</MudText>
                            <MudDatePicker @bind-Date="@_updateProfileCommand.DateOfBirth" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                            <br/>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">Phone Number</MudText>
                            <div class="row align-items-center">
                                <div class="col">
                                    <MudTextField @bind-Value="@_updateProfileCommand.PhoneNumber" Variant="Variant.Outlined"
                                                  Margin="Margin.Dense" For="@(() => _updateProfileCommand.PhoneNumber)" Disabled="_isPhoneNumberNull"/>
                                </div>
                                <div class="col-4" style="align-content:end; padding-top:10px;">
                                    @if (!_profile.PhoneNumberConfirmed)
                                    {
                                        <MudText Typo="Typo.body2" Color="Color.Warning">
                                            <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning"/>
                                            Phone Number is not Confirmed!
                                        </MudText>
                                        if (!_codeSent)
                                        {
                                            <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="SendCode">Send confirmation code</MudButton>
                                        }
                                        else
                                        {
                                            <MudButton Variant="Variant.Text" Color="Color.Info" Disabled>Code sent</MudButton>
                                        }
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2" Color="Color.Success">
                                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"/>
                                            Confirmed
                                        </MudText>
                                    }
                                </div>
                                @if (_codeSent)
                                {
                                    <div class="d-flex flex-row align-items-center">
                                        <div class="m-1">
                                            <MudTextField Label="Confirmation code" MaxLength="4" Required Style="width:200px" @bind-Value="@_confirmationCode" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true"/>
                                        </div>
                                        <div class="m-1">
                                            <MudButton OnClick="Verify" Variant="Variant.Filled" Color="Color.Info" Style="width: 100px">Confirm</MudButton>
                                        </div>
                                    </div>
                                }
                            </div>
                            <br/>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">About Myself</MudText>
                            <MudTextField T="string" @bind-Value="@_updateProfileCommand.AboutMyself" Variant="Variant.Outlined" Margin="Margin.Dense" Lines="5" For="@(() => _updateProfileCommand.AboutMyself)"/>
                            <br/>
                            <MudSelect T="Gender" Label="Select Gender" @bind-Value="@_updateProfileCommand.Gender" Variant="Variant.Outlined" For="@(() => _updateProfileCommand.Gender)">
                                <MudSelectItem Value="Gender.Male"/>
                                <MudSelectItem Value="Gender.Female"/>
                            </MudSelect>
                        </MudCardContent>
                        <MudCardActions Class="d-flex justify-content-center">
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" Style="color:#fff"/>
                                }
                                else
                                {
                                    <MudText>Save changes</MudText>
                                }
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </EditForm>
            }
            break;
        case 1:
            <MudText Typo="Typo.h4"> Educations</MudText>

            <br/>
            <MudGrid>
                @if (educations == null)
                {
                    @for (int i = 0; i < 5; i++)
                    {
                        <MudItem xs="6">
                            <MudCard Class="rounded-lg mud-elevation-4">
                                <MudCardHeader>
                                    <MudSkeleton Width="40%" Height="50px"/>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudSkeleton Width="100%"/>
                                    <MudSkeleton Width="100%"/>
                                    <MudSkeleton Width="70%"/>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudSkeleton Width="36px" Height="36px" Class="ml-2"/>
                                    <MudSkeleton Width="36px" Height="36px" Class="ml-3"/>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                }
                else
                {
                    @foreach (UserEducationResponse education in educations)
                    {
                        Guid cardId = education.Id;
                        <MudItem xs="12" sm="12" md="6" lg="4">
                            <MudCard Class="rounded-lg mud-elevation-4">
                                <!-- Edit Education -->
                                @if (editingCardId == cardId)
                                {
                                    <EditForm Model="educationUpdate" OnInvalidSubmit="UpdateEducationHandle">
                                        <FluentValidationValidator/>
                                        <MudCardHeader>
                                            <CardHeaderContent>
                                                <MudAutocomplete T="string" @bind-Value="@educationUpdate.Speciality"
                                                                 SearchFunc="@SearchEducation" Variant="Variant.Outlined" Label="Specialty"
                                                                 Margin="Margin.Dense" For="(() => educationUpdate.Speciality)" CoerceValue="true" Adornment="Adornment.None"/>
                                            </CardHeaderContent>
                                        </MudCardHeader>
                                        <MudCardContent>
                                            <MudAutocomplete T="string" @bind-Value="@educationUpdate.University" Variant="Variant.Outlined"
                                                             Label="University" Margin="Margin.Dense" For="(() => educationUpdate.University)"
                                                             SearchFunc="SearchUniversity" Adornment="Adornment.None" CoerceValue="true"/>
                                            <MudDatePicker Label="Start Date" @bind-Date="@educationUpdate.StartDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" For="(() => educationUpdate.StartDate)"/>
                                            @if (educationUpdate.UntilNow == false)
                                            {
                                                <MudDatePicker Label="End Date" @bind-Date="@educationUpdate.EndDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" For="(() => educationUpdate.EndDate)"/>
                                            }
                                            <MudCheckBox @bind-Checked="@educationUpdate.UntilNow" Label="Until Now" Color="Color.Primary"></MudCheckBox>
                                        </MudCardContent>
                                        <MudCardActions>
                                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateEducationHandle">
                                                @if (_processing)
                                                {
                                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                                }
                                                else
                                                {
                                                    <MudText>Update</MudText>
                                                }
                                            </MudButton>
                                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CancelButtonClicked_UpdateEducation">
                                                Cancel
                                            </MudButton>
                                        </MudCardActions>
                                    </EditForm>
                                }
                                else
                                {
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">
                                                <strong>@education.Speciality</strong>
                                            </MudText>
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" OnClick="() => EditButtonClicked(cardId, education)"/>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" Color="Color.Error" Size="Size.Small" OnClick="(() => ConfirmDelete(educations, education))"/>
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <MudText>@education.University</MudText>
                                        @if (education.UntilNow == false)
                                        {
                                            <MudText>
                                                @education.StartDate?.ToString("MMM. yyyy") - @education.EndDate?.ToString("MMM. yyyy")
                                            </MudText>
                                        }
                                        else
                                        {
                                            <MudText>
                                                @education.StartDate?.ToString("MMM. yyyy") - <MudChip Icon="@Icons.Material.Filled.School" Disabled="true" Color="Color.Success">Present</MudChip>
                                            </MudText>
                                        }


                                    </MudCardContent>
                                }
                            </MudCard>
                        </MudItem>
                    }
                }
                <!--Add new Education-->
                <MudItem xs="12" sm="12" md="6" lg="4">

                    @if (addEducation == false)
                    {
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="@(() => addEducation = true)">
                            <MudText>
                                Add New Education
                            </MudText>
                        </MudButton>
                    }
                    else
                    {
                        <EditForm Model="createEducation" OnInvalidSubmit="CreateEducationHandle">
                            <FluentValidationValidator/>
                            <MudCard Class="rounded-lg mud-elevation-4">

                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">
                                            <strong>New Education</strong>
                                        </MudText>
                                        <MudAutocomplete T="string" @bind-Value="@createEducation.Speciality" SearchFunc="@SearchEducation"
                                                         Variant="Variant.Outlined" Label="Specialty" Margin="Margin.Dense"
                                                         For="(() => createEducation.Speciality)" CoerceValue="true" Adornment="Adornment.None"/>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudAutocomplete T="string" @bind-Value="@createEducation.University" Variant="Variant.Outlined"
                                                     Label="University" Margin="Margin.Dense" For="(() => createEducation.University)"
                                                     SearchFunc="SearchUniversity" CoerceValue="true" Adornment="Adornment.None"/>
                                    <MudDatePicker Label="Start Date" @bind-Date="createEducation.StartDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" For="(() => createEducation.StartDate)"/>
                                    <small>
                                        <ValidationMessage For="(() => createEducation.StartDate)" class="text-danger"></ValidationMessage>
                                    </small>
                                    @if (createEducation.UntilNow == false)
                                    {
                                        <MudDatePicker Label="End Date" @bind-Date="createEducation.EndDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" For="(() => createEducation.EndDate)"/>
                                        <small>
                                            <ValidationMessage For="(() => createEducation.StartDate)" class="text-danger"></ValidationMessage>
                                        </small>
                                    }
                                    <MudCheckBox @bind-Checked="@createEducation.UntilNow" Label="Until Now" Color="Color.Primary"></MudCheckBox>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateEducationHandle">
                                        @if (_processing)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                        }
                                        else
                                        {
                                            <MudText>Save</MudText>
                                        }
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Surface" OnClick="CancelButtonClicked_CreateEducation">
                                        <MudText>Cancel</MudText>
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        </EditForm>
                    }

                </MudItem>
                <!--------------------->
            </MudGrid>
            break;
        case 2:
            <MudText Typo="Typo.h4"> Experiences</MudText>
            <br/>
            <MudGrid>
                @if (experiences == null)
                {
                    @for (int i = 0; i < 5; i++)
                    {
                        <MudItem xs="12" sm="12" md="6" lg="4">
                            <MudCard Class="rounded-lg mud-elevation-4">
                                <MudCardHeader>
                                    <MudSkeleton Width="40%" Height="50px"/>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudSkeleton Width="100%"/>
                                    <MudSkeleton Width="100%"/>
                                    <MudSkeleton Width="70%"/>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudSkeleton Width="36px" Height="36px" Class="ml-2"/>
                                    <MudSkeleton Width="36px" Height="36px" Class="ml-3"/>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                }
                else
                {
                    @foreach (UserExperienceResponse experience in experiences)
                    {
                        Guid cardExperienceId = experience.Id;
                        <MudItem xs="12" sm="12" md="6" lg="4">
                            <MudCard Class="rounded-lg mud-evaluation-4">
                                <!-- Edit Experience -->
                                @if (editingCardExperienceId == cardExperienceId)
                                {
                                    <EditForm Model="experienceUpdate" OnInvalidSubmit="UpdateExperienceHandle">
                                        <FluentValidationValidator/>
                                        <MudCardHeader>
                                            <CardHeaderContent>
                                                <MudAutocomplete T="string" @bind-Value="@experienceUpdate.JobTitle" Variant="Variant.Outlined" Label="Job Title"
                                                                 Margin="Margin.Dense" For="(() => experienceUpdate.JobTitle)"
                                                                 Adornment="Adornment.None" CoerceValue="true" SearchFunc="SearchJobTitle"/>
                                            </CardHeaderContent>
                                        </MudCardHeader>
                                        <MudCardContent>
                                            <MudAutocomplete @bind-Value="@experienceUpdate.CompanyName" Variant="Variant.Outlined" Label="Company Name"
                                                             Margin="Margin.Dense" For="(() => experienceUpdate.CompanyName)"
                                                             Adornment="Adornment.None" CoerceValue="true" SearchFunc="SearchCompanyName"/>
                                            <MudDatePicker Label="Start Date" @bind-Date="experienceUpdate.StartDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" For="(() => experienceUpdate.StartDate)"/>
                                            @if (experienceUpdate.IsCurrentJob == false)
                                            {
                                                <MudDatePicker Label="End Date" @bind-Date="experienceUpdate.EndDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" For="(() => experienceUpdate.EndDate)"/>
                                            }
                                            <MudCheckBox @bind-Checked="@experienceUpdate.IsCurrentJob" Label="Until Now" Color="Color.Primary"></MudCheckBox>
                                            <MudAutocomplete @bind-Value="@experienceUpdate.Address" Label="Address" Variant="Variant.Outlined"
                                                             For="(() => experienceUpdate.Address)" Adornment="Adornment.None" CoerceValue="true" SearchFunc="SearchAddress"/>
                                            <MudTextField T="string" @bind-Value="@experienceUpdate.Description" Label="Description" Lines="5" Variant="Variant.Outlined" For="(() => experienceUpdate.Description)"></MudTextField>

                                        </MudCardContent>
                                        <MudCardActions>
                                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateExperienceHandle">
                                                @if (_processing)
                                                {
                                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                                }
                                                else
                                                {
                                                    <MudText>Update</MudText>
                                                }
                                            </MudButton>
                                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CancelButtonClicked_UpdateExperience">
                                                Cancel
                                            </MudButton>
                                        </MudCardActions>
                                    </EditForm>
                                }
                                else
                                {
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">
                                                <strong>@experience.JobTitle</strong>
                                            </MudText>
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" OnClick="(() => EditCardExperienceButtonClicked(cardExperienceId, experience))"/>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" Color="Color.Error" Size="Size.Small" OnClick="(() => ConfirmDelete(experiences, experience))"/>
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <MudText>
                                            <MudIcon Icon="@Icons.Material.Filled.Work"></MudIcon>@experience.CompanyName
                                        </MudText>
                                        @if (experience.IsCurrentJob == false)
                                        {
                                            <MudText>
                                                <MudIcon Icon="@Icons.Material.Filled.CalendarMonth"></MudIcon>
                                                @experience.StartDate?.ToString("MMM. yyyy") - @experience.EndDate?.ToString("MMM. yyyy")
                                            </MudText>
                                        }
                                        else
                                        {
                                            <MudText>
                                                <MudIcon Icon="@Icons.Material.Filled.CalendarMonth"></MudIcon>
                                                @experience.StartDate?.ToString("MMM. yyyy") - <MudChip Icon="@Icons.Material.Filled.WorkHistory" Disabled="true" Color="Color.Success">Current Job</MudChip>
                                            </MudText>
                                        }
                                        <MudText>
                                            <MudIcon Icon="@Icons.Material.Filled.Map"></MudIcon>@experience.Address
                                        </MudText>
                                        <MudText style="text-align: justify;">
                                            <MudIcon Icon="@Icons.Material.Filled.TextFields"></MudIcon>@experience.Description
                                        </MudText>

                                    </MudCardContent>
                                }
                            </MudCard>
                        </MudItem>
                    }
                }
                <!--Add new Experience-->
                <MudItem xs="12" sm="12" md="6" lg="4">

                    @if (addExperience == false)
                    {
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="@(() => addExperience = true)">
                            <MudText> Add New Experience</MudText>
                        </MudButton>
                    }
                    else
                    { <EditForm Model="createExperience" OnInvalidSubmit="CreateExperienceHandle">
                                                     <FluentValidationValidator/>
                        <MudCard Class="rounded-lg mud-evaluation-4">
                           
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">
                                            <strong>New Experience</strong>
                                        </MudText>
                                        <MudAutocomplete @bind-Value="@createExperience.JobTitle" Variant="Variant.Outlined" Label="Job Title"
                                                         Margin="Margin.Dense" For="(() => createExperience.JobTitle)"
                                                         Adornment="Adornment.None" CoerceValue="true" SearchFunc="SearchJobTitle"/>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudAutocomplete @bind-Value="@createExperience.CompanyName" Variant="Variant.Outlined" Label="Company Name"
                                                     Margin="Margin.Dense" For="(() => createExperience.CompanyName)"
                                                     Adornment="Adornment.None" CoerceValue="true" SearchFunc="SearchCompanyName"/>
                                    <MudDatePicker Label="Start Date" @bind-Date="createExperience.StartDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" For="(() => createExperience.StartDate)"/>
                                    @if (createExperience.IsCurrentJob == false)
                                    {
                                        <MudDatePicker Label="End Date" @bind-Date="createExperience.EndDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" For="(() => createExperience.EndDate)"/>
                                    }
                                    <MudCheckBox @bind-Checked="@createExperience.IsCurrentJob" Label="Is Current Job" Color="Color.Primary"></MudCheckBox>
                                    <MudAutocomplete @bind-Value="@createExperience.Address" Label="Address" Variant="Variant.Outlined"
                                                     For="(() => createExperience.Address)" Margin="Margin.Dense"
                                                     Adornment="Adornment.None" CoerceValue="true" SearchFunc="SearchAddress"/>
                                    <MudTextField T="string" @bind-Value="@createExperience.Description" Label="Description" Lines="5" Variant="Variant.Outlined" For="(() => createExperience.Description)"></MudTextField>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateExperienceHandle">
                                        @if (_processing)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                        }
                                        else
                                        {
                                            <MudText>Save</MudText>
                                        }
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CancelButtonClicked_CreateExperience">
                                      <MudText>Cancel</MudText>  
                                    </MudButton>
                                </MudCardActions>
                        </MudCard> </EditForm>
                    }

                </MudItem>
                <!--------------------->
            </MudGrid>
            break;
        case 3:
            <MudText Typo="Typo.h4"> Skills</MudText>

            <br/>
            <MudGrid>
                <MudItem xs="12">
                    <MudCard>
                        <MudCardContent>
                            <MudStack Row="true">
                                <MudAutocomplete T="string" @bind-Value="newSkills" Immediate="true"
                                                 CoerceValue="true" Adornment="Adornment.None"
                                                 Variant="Variant.Outlined" Label="Add Skill"
                                                 SearchFunc="@SearchSkills" Margin="Margin.Dense">
                                </MudAutocomplete>
                                <MudButton Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add"
                                           OnClick="OnBlur"/>
                            </MudStack>


                            @foreach (string skill in UserSkills.Skills)
                            {
                                <MudChip Color="Color.Default" OnClose="Closed" Text="@skill">@skill</MudChip>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>

            </MudGrid>
            break;
        case 4:
            <ChangePassword/>
            break;
    }
    </MudItem>
    </MudGrid>
}