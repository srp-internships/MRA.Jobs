@page "/profile"
@using MRA.Identity.Application.Contract.Educations.Command.Create;
@using MRA.Identity.Application.Contract.Educations.Command.Update;
@using MRA.Identity.Application.Contract.Educations.Responses;
@using MRA.Identity.Application.Contract.Experiences.Responses;
@using MRA.Identity.Application.Contract.Profile.Commands.UpdateProfile;
@using MRA.Identity.Application.Contract.Profile.Responses;
@using MRA.Jobs.Client.Components.Dialogs;
@using MRA.Jobs.Client.Services.Profile;
@using MudBlazor;
@using FluentValidation;

@inject IDialogService DialogService;
@inject IUserProfileService UserProfileService;

<div class="container m-0">
	<div class="row">
		<div class="col-md-4">
			<MudPaper Width="250px" Class="py-3" Elevation="0">
				<MudNavMenu>
					<MudText Typo="Typo.h6" Class="px-4">My Profile</MudText>
					<MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Secondary Text</MudText>
					<MudDivider Class="my-2" />

					<MudNavLink Class="@((Active == 0) ? "active" : "")" OnClick="()=> Active=0">Personal Information</MudNavLink>
					<MudNavLink Class="@((Active == 1) ? "active" : "")" OnClick="()=> Active=1">Educations </MudNavLink>
					<MudNavLink Class="@((Active == 2) ? "active" : "")" OnClick="()=> Active=2">Experience </MudNavLink>
					<MudNavLink Class="@((Active == 3) ? "active" : "")" OnClick="()=> Active=3">Skills</MudNavLink>

				</MudNavMenu>
			</MudPaper>
		</div>
		<div class="col-md-8" style="padding:10px;">
			@switch (Active)
			{
				case 0:
					<MudText Typo="Typo.h4"> Personal Information</MudText> <br />
					if (profile == null)
					{
						<MudCard>
							<MudCardHeader>

							</MudCardHeader>
							<MudCardContent>
								<MudSkeleton Width="30%" />
								<MudSkeleton Width="40%" Height="42px;" />
								<MudSkeleton Width="30%" />
								<MudSkeleton Width="60%" Height="42px;" />
								<MudSkeleton Width="30%" />
								<MudSkeleton Width="50%" Height="42px;" />
								<MudSkeleton Width="30%" />
								<MudSkeleton Width="100%" Height="42px;" />
								<MudSkeleton Width="100%" Height="42px;" />
								<MudSkeleton Width="100%" Height="42px;" />
								<MudSkeleton Width="50%" Height="42px;" />
								<MudCardActions>
									<MudSkeleton Width="50px" Class="ml-1" />
									<MudSkeleton Width="40px" Height="42px" Class="ml-2" />
								</MudCardActions>
							</MudCardContent>
							<MudCardActions>
								<MudSkeleton Width="64px" Height="40px" Class="ml-2" />
								<MudSkeleton Width="105px" Height="40px" Class="ml-3" />
							</MudCardActions>
						</MudCard>
					}
					else
					{
						<EditForm Model="@profile" OnValidSubmit="UpdateProfile">
							<FluentValidationValidator />

							<MudCard>
								<MudCardContent>
									<MudText Typo="Typo.body2" Class="mud-text-secondary">First Name</MudText>
									<MudTextField @bind-Value="@profile.FirstName" Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => profile.FirstName)" />

									<br />
									<MudText Typo="Typo.body2" Class="mud-text-secondary">Last Name</MudText>
									<MudTextField @bind-Value="@profile.LastName" Variant="Variant.Outlined" Margin="Margin.Dense" />
									<br />
									<MudText Typo="Typo.body2" Class="mud-text-secondary">UserName</MudText>
									<MudTextField @bind-Value="@profile.UserName" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true" />
									<br />
									<MudText Typo="Typo.body2" Class="mud-text-secondary">Email</MudText>
									<MudTextField @bind-Value="@profile.Email" Variant="Variant.Outlined" Margin="Margin.Dense" />
									<br />
									<MudText Typo="Typo.body2" Class="mud-text-secondary">Date Of Birth</MudText>
									<MudDatePicker @bind-Date="@profile.DateOfBirth" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" />
									<br />
									<MudText Typo="Typo.body2" Class="mud-text-secondary">Phone Number</MudText>
									<MudTextField @bind-Value="@profile.PhoneNumber" Variant="Variant.Outlined" Margin="Margin.Dense" />
									<br />
									<MudText Typo="Typo.body2" Class="mud-text-secondary">About Myself</MudText>
									<MudTextField T="string" @bind-Value="@profile.AboutMyself" Variant="Variant.Outlined" Margin="Margin.Dense" Lines="5" />
									<br />
									<MudText Typo="Typo.body2" Class="mud-text-secondary">Gender</MudText>
									<MudText>@profile.Gender</MudText>
								</MudCardContent>
								<MudCardActions>
									<MudButton Color="Color.Primary" Type="submit" OnClick="UpdateProfile">Update Profile</MudButton>
								</MudCardActions>
							</MudCard>
						</EditForm>
					}
					break;
				case 1:
					<MudText Typo="Typo.h4"> Educations</MudText>

					<br />
					<div class="row">
						@if (educations == null)
						{
							@for (int i = 0; i < 5; i++)
							{
								<MudItem xs="6">
									<MudCard>
										<MudCardHeader>
											<MudSkeleton Width="40%" Height="50px" />
										</MudCardHeader>
										<MudCardContent>
											<MudSkeleton Width="100%" />
											<MudSkeleton Width="100%" />
											<MudSkeleton Width="70%" />
										</MudCardContent>
										<MudCardActions>
											<MudSkeleton Width="36px" Height="36px" Class="ml-2" />
											<MudSkeleton Width="36px" Height="36px" Class="ml-3" />
										</MudCardActions>
									</MudCard>
								</MudItem>
							}
						}
						else
						{
							@foreach (UserEducationResponse education in educations)
							{
								Guid cardId = education.Id;
								<div class="col-md-6 mb-3">
									<MudCard>
										<!-- Edit Education -->
										@if (editingCardId == cardId)
										{
											<MudCardHeader>
												<CardHeaderContent>
													<MudTextField @bind-Value="@education.Speciality" Variant="Variant.Outlined" Margin="Margin.Dense" />
												</CardHeaderContent>
											</MudCardHeader>
											<MudCardContent>
												<MudTextField @bind-Value="@education.University" Variant="Variant.Outlined" Label="University" Margin="Margin.Dense" />
												<MudDatePicker Label="Start Date" @bind-Date="education.StartDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" />
												@if (education.UntilNow == false)
												{
													<MudDatePicker Label="End Date" @bind-Date="education.EndDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" />
												}
												<MudCheckBox @bind-Checked="@education.UntilNow" Label="Until Now" Color="Color.Primary"></MudCheckBox>
											</MudCardContent>
											<MudCardActions>
												<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(()=>UpdateEducationHandle(education))">
													Update
												</MudButton>
												<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CancelButtonClicked_UpdateEducation">
													Cancel
												</MudButton>
											</MudCardActions>
										}
										else
										{
											<MudCardHeader>
												<CardHeaderContent>
													<MudText Typo="Typo.h6"><strong>@education.Speciality</strong></MudText>
												</CardHeaderContent>
												<CardHeaderActions>
													<MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" OnClick="() => EditButtonClicked(cardId)" />
													<MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" Color="Color.Error" Size="Size.Small" OnClick="Delete" />
												</CardHeaderActions>
											</MudCardHeader>
											<MudCardContent>
												<MudText>@education.University</MudText>
												@if (education.UntilNow == false)
												{
													<MudText>
														@education.StartDate?.ToString("MMM. yyyy") - @education.EndDate?.ToString("MMM. yyyy")
													</MudText>
												}
												else
												{
													<MudText>
														@education.StartDate?.ToString("MMM. yyyy")  - <MudChip Icon="@Icons.Material.Filled.School" Disabled="true" Color="Color.Success">Present</MudChip>
													</MudText>
												}


											</MudCardContent>
										}



									</MudCard>
								</div>
							}
							<!--Add new Education-->
							<div class="col-md-6 mb-3">
								<MudCard>
									@if (addEducation == false)
									{
										<MudCardHeader>
											<CardHeaderContent>
												<MudText Typo="Typo.h6"><strong>Add New Education</strong></MudText>

											</CardHeaderContent>
										</MudCardHeader>
										<MatCardContent>
											<div class="d-flex align-center justify-center mud-width-full py-8">
												<MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@(()=>addEducation=true)" />
											</div>
										</MatCardContent>
									}
									else
									{
										<EditForm Model="createEducation" OnInvalidSubmit="CreateEducationHandle">
											<MudCardHeader>
												<CardHeaderContent>
													<MudTextField @bind-Value="@createEducation.Speciality" Variant="Variant.Outlined" Label="Specialty" Margin="Margin.Dense" />
												</CardHeaderContent>
											</MudCardHeader>
											<MudCardContent>
												<MudTextField @bind-Value="@createEducation.University" Variant="Variant.Outlined" Label="University" Margin="Margin.Dense" />
												<MudDatePicker Label="Start Date" @bind-Date="createEducation.StartDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" />
												@if (createEducation.UntilNow == false)
												{
													<MudDatePicker Label="End Date" @bind-Date="createEducation.EndDate" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" />
												}
												<MudCheckBox @bind-Checked="@createEducation.UntilNow" Label="Until Now" Color="Color.Primary"></MudCheckBox>
											</MudCardContent>
											<MudCardActions>
												<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateEducationHandle">
													Save
												</MudButton>
												<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CancelButtonClicked_CreateEducation">
													Cancel
												</MudButton>
											</MudCardActions>
										</EditForm>
									}
								</MudCard>
							</div>
							<!--------------------->
						}
					</div>
					break;
				case 2:
					<MudText Typo="Typo.h4"> Experiences</MudText>

					<br />
					<MudGrid>
						@if (experiences.Count == 0)
						{
							@for (int i = 0; i < 5; i++)
							{
								<MudItem xs="6">
									<MudCard>
										<MudCardHeader>
											<MudSkeleton Width="40%" Height="50px" />
										</MudCardHeader>
										<MudCardContent>
											<MudSkeleton Width="100%" />
											<MudSkeleton Width="100%" />
											<MudSkeleton Width="70%" />
										</MudCardContent>
										<MudCardActions>
											<MudSkeleton Width="36px" Height="36px" Class="ml-2" />
											<MudSkeleton Width="36px" Height="36px" Class="ml-3" />
										</MudCardActions>
									</MudCard>
								</MudItem>
							}
						}
						else
						{
							@foreach (UserExperienceResponse experience in experiences)
							{
								<MudItem xs="6">
									<MudCard>
										<MudCardHeader>
											<CardHeaderContent>
												<MudText Typo="Typo.h6"><strong>@experience.JobTitle</strong></MudText>
											</CardHeaderContent>
											<CardHeaderActions>
												<MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" />
												<MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" Color="Color.Error" Size="Size.Small" OnClick="Delete" />
											</CardHeaderActions>
										</MudCardHeader>
										<MudCardContent>
											<MudText><MudIcon Icon="@Icons.Material.Filled.Work"></MudIcon>@experience.CompanyName</MudText>
											@if (experience.IsCurrentJob == false)
											{
												<MudText>
													<MudIcon Icon="@Icons.Material.Filled.CalendarMonth"></MudIcon>
													@experience.StartDate.ToString("MMM. yyyy") - @experience.EndDate.ToString("MMM. yyyy")
												</MudText>
											}
											else
											{
												<MudText>
													<MudIcon Icon="@Icons.Material.Filled.CalendarMonth"></MudIcon>
													@experience.StartDate.ToString("MMM. yyyy")  - <MudChip Icon="@Icons.Material.Filled.WorkHistory" Disabled="true" Color="Color.Success">Current Job</MudChip>
												</MudText>
											}
											<MudText><MudIcon Icon="@Icons.Material.Filled.Map"></MudIcon>@experience.Address</MudText>
											<MudText style="text-align: justify;"><MudIcon Icon="@Icons.Material.Filled.TextFields"></MudIcon>@experience.Description</MudText>

										</MudCardContent>

									</MudCard>
								</MudItem>
							}
						}
					</MudGrid>
					break;
				case 3:
					<MudText Typo="Typo.h4"> Skills</MudText>

					<br />
					<MudGrid>

						@for (int i = 0; i < 10; i++)
						{
							<MudItem xs="3">
								<MudCard>
									<MudCardHeader>
										<CardHeaderContent>
											<MudSkeleton Width="40%" Height="50px" />
										</CardHeaderContent>
										<CardHeaderActions>
											<MudSkeleton Width="25px" Height="25px" />
										</CardHeaderActions>
									</MudCardHeader>
									<MudCardContent>
										<MudSkeleton Width="70%" />
									</MudCardContent>
								</MudCard>
							</MudItem>
						}

					</MudGrid>
					break;
			}
		</div>
	</div>
</div>

@code {
	private int Active = 0;
	Guid editingCardId = new Guid();

	public void EditButtonClicked(Guid cardId)
	{
		editingCardId = cardId;
	}

	#region education

	private bool addEducation = false;
	CreateEducationDetailCommand createEducation = new CreateEducationDetailCommand();

	public async Task CreateEducationHandle()
	{
		if (createEducation.EndDate == null)
			createEducation.EndDate = default(DateTime);

		var response = await UserProfileService.CreateEducationAsуnc(createEducation);
		if (response.IsSuccessStatusCode)
		{
			addEducation = false;
			createEducation = new CreateEducationDetailCommand();
			educations = await UserProfileService.GetEducations();
		}
	}

	private void CancelButtonClicked_CreateEducation()
	{
		addEducation = false;
		createEducation = new CreateEducationDetailCommand();
	}

	private void CancelButtonClicked_UpdateEducation() { }

	private async void UpdateEducationHandle(UserEducationResponse education)
	{
		var updateEducation = new UpdateEducationDetailCommand()
			{
				Id = education.Id,
				StartDate = education.StartDate.HasValue ? education.StartDate.Value : default(DateTime),
				EndDate = education.EndDate.HasValue ? education.EndDate.Value : default(DateTime),
				Speciality = education.Speciality,
				University = education.University,
				UntilNow = education.UntilNow
			};

		var result = await UserProfileService.UpdateEducationAsync(updateEducation);
		if (result.IsSuccessStatusCode)
		{
			editingCardId = Guid.NewGuid();
			StateHasChanged();
		}
	}


	#endregion


	UserProfileResponse profile = null;
	List<UserEducationResponse> educations = new List<UserEducationResponse>();
	List<UserExperienceResponse> experiences = new List<UserExperienceResponse>();

	protected override async void OnInitialized()
	{
		profile = await UserProfileService.Get();

		educations = await UserProfileService.GetEducations();

		experiences = new List<UserExperienceResponse>()
		{
			new UserExperienceResponse()
			{
				CompanyName="IO",
				JobTitle="Front-end Developer",
				Address="Ismoili Somoli Street",
				Description="w djajdawd awjndaj d edkajhd ejeefnsejfse fesfseljfsejfnesfjeskfjseekjf sekfjf eslfjsefsefj slkfjbsfkjsf jsefseflsfljhf flksfs fksjbfskejf sfsj sjfhsufhhfbsf ;akjdjs flesehe sbnfjhliuese fa eufh efbksajfhiuwhdkjbfquwefq fqiufhqkehfbqliuiefq eflqeufh qefqli uehfquef  ",
				StartDate=DateTime.Now.AddYears(-3),
				EndDate=DateTime.Now.AddYears(-1),
				IsCurrentJob=false,
			},
			new UserExperienceResponse()
			{
				CompanyName="Alif",
				JobTitle="Back-end Developer",
				Address="Ismoili Somoli Street",
				Description="w djajdawd awjndaj d edkajhd ejeefnsejfse fesfseljfsejfnesfjeskfjseekjf sekfjf eslfjsefsefj slkfjbsfkjsf jsefseflsfljhf flksfs fksjbfskejf sfsj sjfhsufhhfbsf ;akjdjs flesehe sbnfjhliuese fa eufh efbksajfhiuwhdkjbfquwefq fqiufhqkehfbqliuiefq eflqeufh qefqli uehfquef  ",
				StartDate=DateTime.Now.AddYears(-1),
				IsCurrentJob=true,
			}
		};

		StateHasChanged();
	}

	private void Delete()
	{
		var parameters = new DialogParameters<DialogMudBlazor>();
		parameters.Add(x => x.ContentText, "Do you really want to delete these records? This process cannot be undone.");
		parameters.Add(x => x.ButtonText, "Delete");
		parameters.Add(x => x.Color, Color.Error);

		var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

		DialogService.Show<DialogMudBlazor>("Delete", parameters, options);
	}

	private async void UpdateProfile()
	{
		var command = new UpdateProfileCommand
			{
				DateOfBirth = profile.DateOfBirth.HasValue ? profile.DateOfBirth.Value : default(DateTime),
				FirstName = profile.FirstName,
				LastName = profile.LastName,
				Email = profile.Email,
				PhoneNumber = profile.PhoneNumber,
				Gender = profile.Gender,
				AboutMyself = profile.AboutMyself
			};

		var result = await UserProfileService.Update(command);
	}
}