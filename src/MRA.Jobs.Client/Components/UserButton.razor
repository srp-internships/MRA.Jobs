@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<div class="dropdown">
	<button @onclick="ToggleUserMenu"
	@onfocusout="HideUserMenu"
			class="btn btn-secondary dropdown-toggle user-button">
		<i class="oi oi-person"></i>
	</button>
	<div class="dropdown-menu dropdown-menu-right @UserMenuCssClass">
		<CascadingAuthenticationState>
			<AuthorizeView>
				<Authorized>
					<a href="profile" class="dropdown-item">Profile</a>
					<hr />
					<button class="dropdown-item" @onclick="Logout">Logout</button>
				</Authorized>
				<NotAuthorized>
					<a href="login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)" class="dropdown-item">Login</a>
					<a href="register" class="dropdown-item">Register</a>
				</NotAuthorized>
			</AuthorizeView>
		</CascadingAuthenticationState>
	</div>
</div>

@code {
	private bool showUserMenu = false;
	private string UserMenuCssClass => showUserMenu ? "show-menu" : null;

	private void ToggleUserMenu()
	{
		showUserMenu = !showUserMenu;
	}
	private async Task HideUserMenu()
	{
		await Task.Delay(200);
		showUserMenu = false;
	}
	private async Task Logout()
	{
		await LocalStorage.RemoveItemAsync("authToken");
		await AuthenticationStateProvider.GetAuthenticationStateAsync();
		NavigationManager.NavigateTo("");
	}
}
