@using MRA.Jobs.Application.Contracts.Vacancies.Tags.Commands
@using MRA.Jobs.Client.Services.VacanciesServices
@inject IVacancyService VacancyService

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <div class="d-flex flex-grow-1 gap-2">
                    <MudAutocomplete T="string" @bind-Value="_newTags" Immediate="true"
                                     CoerceValue="true" Adornment="Adornment.None"
                                     Variant="Variant.Outlined" Label="" Clearable="true"
                                     SearchFunc="@SearchTags" Margin="Margin.Dense">
                    </MudAutocomplete>
                    <div style="padding-top: 4px; margin-left: 10px;">
                        <ProgressTaskButton OnClick="@AddTagsAsync" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium">
                            <MudText>Add</MudText>
                        </ProgressTaskButton>
                    </div>
                </div>
            </MudItem>
        </MudGrid>
        <div>
            @foreach (var tag in Tags)
            {
                <MudChip CloseIcon="@Icons.Material.Filled.Close" OnClose="RemoveTag" Text="@tag"/>
            }
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Default" OnClick="Close">
            <MudText>Close</MudText>
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Guid VacancyId { get; set; }
    [Parameter] public List<string> Tags { get; set; } = new();

    private string _newTags = "";
    private List<string> _allTags;

    void Close() => MudDialog.Close(DialogResult.Ok(Tags));

    protected override async Task OnInitializedAsync()
    {
        _allTags = await VacancyService.GetAllTagsAsync();
    }

    private async Task AddTagsAsync()
    {
        var newTags = _newTags.Split(',')
            .Where(tagName => !string.IsNullOrWhiteSpace(tagName))
            .Select(tagName => tagName.Trim())
            .Distinct()
            .Where(tag => !Tags.Any(existingTag => string.Equals(existingTag, tag, StringComparison.OrdinalIgnoreCase)))
            .ToArray();

        if (newTags.Any())
        {
            var command = new AddTagsToVacancyCommand()
            {
                VacancyId = VacancyId,
                Tags = newTags
            };

            var result = await VacancyService.AddTagsToVacancyAsync(command);
            if (result)
            {
                Tags.AddRange(newTags);
                _newTags = "";
            }
        }
    }


    private async Task RemoveTag(MudChip chip)
    {
        var command = new RemoveTagsFromVacancyCommand()
        {
            VacancyId = VacancyId,
            Tags = [chip.Text]
        };
        var result = await VacancyService.RemoveTagsFromVacancyAsync(command);
        if (result == null) return;

        Tags.Remove(chip.Text);
        StateHasChanged();
    }

    private async Task<IEnumerable<string>> SearchTags(string value)
    {
        await Task.Delay(5);
        return _allTags
            .Where(s => s.Contains(value, StringComparison.InvariantCultureIgnoreCase) && !Tags.Contains(s))
            .ToList();
    }

}