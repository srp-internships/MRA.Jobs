@using MRA.Jobs.Application.Contracts.Vacancies.Tags.Commands
@using System.Net
@using MRA.BlazorComponents.Configuration
@using MRA.Jobs.Client.Services.VacanciesServices
@inject IVacancyService VacancyService

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudStack Row="true">
                    <MudTextField Variant="Variant.Filled" @bind-Value="_newTags" T="string"/>
                    <ProgressTaskButton Function="@SaveChangesAsync" Variant="Variant.Filled" Color="Color.Primary">
                        <MudText>Save Changes</MudText>
                    </ProgressTaskButton>
                </MudStack>
            </MudItem>
            <MudItem xs="12">
                @foreach (var tag in Tags)
                {
                    <MudChip>@tag</MudChip>
                }
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Close">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Guid VacancyId { get; set; }
    [Parameter] public List<string> Tags { get; set; } = new();

    private string _newTags = "";
    private List<string> _removedTags = new();
    
    void Close() => MudDialog.Close(DialogResult.Ok(true));

    private async Task SaveChangesAsync()
    {
        if (_removedTags != null) await RemovedTagsAsync();
        await AddTagsAsync();
    }

    private async Task<bool> AddTagsAsync()
    {
        Tags ??= new List<string>();
        var newTags = _newTags.Split(',')
            .Where(tagName => !string.IsNullOrWhiteSpace(tagName))
            .Select(tagName => tagName.Trim())
            .Where(newTagName => Tags.All(tag => tag != newTagName))
            .ToArray();

        var command = new AddTagsToVacancyCommand()
        {
            VacancyId = VacancyId,
            Tags = newTags
        };

        var result = await VacancyService.AddTagsToVacancyAsync(command);
        if (result)
        {
            Tags.AddRange(newTags);
            _newTags = "";
        }
        return result;
    }

    private async Task<bool> RemovedTagsAsync()
    {
        var command = new RemoveTagsFromVacancyCommand()
        {
            VacancyId = VacancyId,
            Tags = _removedTags.ToArray()
        };
        var result = await VacancyService.RemoveTagsFromVacancyAsync(command);
        if (result == null) return false;
       
        Tags = result;
        return true;

    }

}