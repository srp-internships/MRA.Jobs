@using MRA.Jobs.Client.Enums
@using MRA.Jobs.Client.Services.Profile
@using Anchor = MudBlazor.Anchor
@using Breakpoint = MudBlazor.Breakpoint
@using Color = MudBlazor.Color
@using DividerType = MudBlazor.DividerType
@using Microsoft.FeatureManagement
@using MRA.Jobs.Client.Identity
@inject NavigationManager NavigationManager
@inject LayoutService LayoutService
@inject IUserProfileService UserProfileService
@inject IFeatureManager FeatureManager
@inject IConfiguration Configuration

<CascadingAuthenticationState>
    <AuthorizeView Policy="@ApplicationPolicies.Reviewer">
        <Authorized>
            <MudToolBar Class="toolbar-fixed-blur">
                <MudHidden Breakpoint="Breakpoint.MdAndUp">
                    <MudIconButton Icon="@Icons.Material.Filled.Notes" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
                </MudHidden>
                <a href="">
                    <MudHidden Breakpoint="Breakpoint.MdAndDown">
                        <MudStack Row="true">
                            <MudItem Style="padding-right:5px;">
                                <MudImage src="/images/srp/srp_icon.png" Style="width: 50px"/>
                            </MudItem>
                            <MudItem Style="padding-left:0; margin-right: 40px;">
                                <MudText Style="font-size: 21.5px;">
                                    <b>SILK ROAD</b>
                                </MudText>
                                <MudText Style="margin-top: -10px;">
                                    <small>
                                        <b>PROFESSIONALS</b>
                                    </small>
                                </MudText>
                            </MudItem>
                        </MudStack>
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.LgAndUp">
                        <MudStack Row="true">
                            <MudItem Style="padding-right:5px;">
                                <MudImage src="/images/srp/srp_icon.png" Style="width: 30px"/>
                            </MudItem>
                            <MudItem Style="padding-left:0; margin-right: 40px;">
                                <MudText Style="font-size: 21.5px;">
                                    <b>SRP</b>
                                </MudText>
                            </MudItem>
                        </MudStack>
                    </MudHidden>
                </a>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">

                    <MudButton Href="/dashboard/categories" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Categories)">
                        <MudText>
                            <b>@ContentService["Header:Category"]</b>
                        </MudText>
                    </MudButton>
                    <MudButton Href="/dashboard/applications" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Applications)">
                        <MudText>
                            <b>@ContentService["UserButton:Applications"]</b>
                        </MudText>
                    </MudButton>
                    <MudButton Href="/dashboard/jobs" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Jobs)">
                        <MudText>
                            <b>@ContentService["Header:Jobs"]</b>
                        </MudText>
                    </MudButton>
                    <MudButton Href="/dashboard/internship" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Internships)">
                        <MudText>
                            <b>@ContentService["Header:Internships"]</b>
                        </MudText>
                    </MudButton>
                    <MudButton Href="/dashboard/trainings" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Trainings)">
                        <MudText>
                            <b>@ContentService["Header:Trainings"]</b>
                        </MudText>
                    </MudButton>
                    <AuthorizeView Roles="@ApplicationClaimValues.Administrator" Context="admin">
                        <MudButton Href=@linkToUserManager Color="Color.Inherit" Target="_blank" Variant="Variant.Text" Class="@GetActiveClass(DocPages.UserManager)">
                            <MudText>
                                <b>@ContentService["Header:Usersmanager"]</b>
                            </MudText>
                        </MudButton>
                    </AuthorizeView>
                    <MudButton Color="Color.Inherit" Variant="Variant.Text" Href="/Candidates"  Class="@GetActiveClass(DocPages.Candidates)">
                        <MudText>
                            <b>@ContentService["Candidates"]</b>
                        </MudText>
                    </MudButton>
                </MudHidden>
                <MudSpacer/>
                <MudHidden Breakpoint="Breakpoint.Xs">
                    @if (_betaVersion)
                    {
                        <a href="@Configuration["Beta:Address"]" target="_blank">
                            <MudChip Color="Color.Primary">Beta</MudChip>
                        </a>
                    }
                    <MudDivider Vertical="true" DividerType="DividerType.Middle" FlexItem="true" Class="mx-4 my-4"/>
                    <ToolBarSettingsButtons/>
                </MudHidden>
                <UserButton/>
            </MudToolBar>

            <MudDrawer @bind-Open="@_open" Anchor="Anchor.Start" Elevation="2" Style="position:fixed;height: 100%">
                <MudToolBar Dense="true" Class="docs-gray-bg">
                    <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
                    <MudSpacer/>
                    <ToolBarSettingsButtons/>
                </MudToolBar>

                <MudNavMenu Rounded="true" Dense="true" Color="Color.Primary" Class="pa-2">
                    <MudNavLink Match="NavLinkMatch.All" Href="dashboard/categories">@ContentService["Header:Category"]</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Href="/dashboard/applications">@ContentService["UserButton:Applications"]</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Href="/dashboard/jobs">@ContentService["Header:Jobs"]</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Href="/dashboard/internship">@ContentService["Header:Internships"]</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Href="/dashboard/trainings">@ContentService["Header:Trainings"]</MudNavLink>

                    <AuthorizeView Roles="@ApplicationClaimValues.Administrator" Context="admin">
                        <MudNavLink Match="NavLinkMatch.All" Href=@linkToUserManager>@ContentService["Header:Usersmanager"]</MudNavLink>
                    </AuthorizeView>
                </MudNavMenu>
                @if (_betaVersion)
                {
                    <a href="@Configuration["Beta:Address"]" target="_blank">
                        <MudChip Color="Color.Primary">Beta</MudChip>
                    </a>
                }
            </MudDrawer>
        </Authorized>
        <NotAuthorized>

        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {

    private string linkToUserManager => $"{Configuration["IdentityClient"]}/userManager";

    bool _open = false;

    private bool _betaVersion;

    void ToggleDrawer()
    {
        _open = !_open;
    }

    private string _currentPage;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            LayoutService.User = await UserProfileService.Get();
            var uriSegments = NavigationManager.Uri.Split('/');
            _currentPage = uriSegments.Last();
            StateHasChanged();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        _betaVersion = await FeatureManager.IsEnabledAsync(FeatureFlags.BetaVersion);
        StateHasChanged();
        NavigationManager.LocationChanged += HandleLocationChanged;
        await base.OnInitializedAsync();
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        _currentPage = DocPages.GetPageFromUrl(NavigationManager.Uri);
        StateHasChanged();
    }

    private string GetActiveClass(string page)
    {
        return page == _currentPage ? "mud-chip-text mud-chip-color-primary mx-1 px-3" : "mx-1 px-3";
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }


}