@using MRA.Jobs.Application.Contracts.Applications.Commands.CreateApplication;
@using MRA.Jobs.Application.Contracts.VacancyClient;
@layout MainLayout
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IInternshipService InternshipService
@inject IApplicationService ApplicationService

<div class="container w-75 mt-4">
	@if (vacancy is null)
	{
		if (showLoader)
		{
			<div class="loader"></div>
		}
	}
	else
	{
		<MudCard>
			<MudCardContent>
				<MudText Style="color:gray"><b>Vacancy Details</b></MudText>
				<MudText Typo="Typo.h5">
					<b>
						@vacancy.Title
					</b>
				</MudText>
				<br />
				<MudText>@vacancy.Description</MudText>
			</MudCardContent>
		</MudCard>
		<br />

		<EditForm Model="@application" OnValidSubmit="CreateApplication">
			<FluentValidationValidator />

			<MudCard>
				<MudCardContent>
					<MudText Style="color:gray"><b>Additional Details</b></MudText>
					<MudText Typo="Typo.h6"><b><span class="text-danger">*</span>Cover Letter</b></MudText>
					<MudTextField T="string" Lines="7" Variant="Variant.Outlined" @bind-Value="@application.CoverLetter"
								  For="@(() =>application.CoverLetter)" />
				</MudCardContent>
			</MudCard>

			<br />

			@if (vacancy.VacancyQuestions.Count() > 0)
			{
				<MudCard>
					<MudCardContent>
						<MudText Style="color:gray"><b>Questions</b></MudText>
						<br />
						@foreach (var question in vacancy.VacancyQuestions)
						{
							<MudDivider />
							<label for="question" class="form-label"><span class="text-danger">*</span>@question.Question</label>
							<div class="input-group">
								<input type="text" class="form-control" id="question_@question.Id" required="required" @bind="questionResponses[question.Question]">
							</div>
						}
					</MudCardContent>
				</MudCard>
			}

			@if (vacancy.VacancyTasks.Count() > 0)
			{
				<MudCard>
					<MudCardContent>
						<MudText Style="color:gray"><b>vacancy.VacancyTasks</b></MudText>
						<br />
						@foreach (var task in vacancy.VacancyTasks)
						{
							<MudDivider />
							<p><label for="Title" class="form-label"><span class="text-danger">*</span>@task.Title</label></p>
							<p><label for="Description" class="form-label"><span class="text-danger">*</span>@task.Description</label></p>
							<MudTextField T="string" Label="Code" Variant="Variant.Outlined" Lines="8" @bind-Value=@taskResponses[task.Title] />
						}
					</MudCardContent>
				</MudCard>
			}
			<button type="submit" class="btn mt-3" style="background-color: #129fd7;">Apply</button>
		</EditForm>
	}
</div>

@code {
	
	private bool showLoader = false;

	[Parameter]
	public VacancyApplicationResponse vacancy { get; set; }

	[Parameter]
	public CreateApplicationCommand application { get; set; }

	[Parameter]
	public string Slug { get; set; }

	[Parameter]
	public Dictionary<string, string> questionResponses { get; set; }
	[Parameter]
	public Dictionary<string, string> taskResponses { get; set; }

	protected override async void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			await Task.Delay(1000);
			showLoader = true;
			StateHasChanged();
		}
	}

	private async Task CreateApplication()
	{

		if (string.IsNullOrWhiteSpace(application.CoverLetter) || questionResponses.Any(qr => string.IsNullOrWhiteSpace(qr.Value)))
		{
			return; // Do not proceed with submission if any required fields are empty.
		}

		var updatedResponses = new List<VacancyResponseDto>();
		foreach (var vr in application.VacancyResponses)
		{
			var updatedResponse = new VacancyResponseDto
				{
					VacancyQuestion = vr.VacancyQuestion,
					Response = questionResponses[vr.VacancyQuestion.Question]
				};

			updatedResponses.Add(updatedResponse);
		}

		application.VacancyResponses = updatedResponses;

		var updateTaskResponses = new List<TaskResponseDto>();
		foreach (var task in vacancy.VacancyTasks)
		{
			var updateTaskResponse = new TaskResponseDto
				{
					TaskId = task.Id,
					Code=taskResponses[task.Title]
				};
			updateTaskResponses.Add(updateTaskResponse);
		}
		application.TaskResponses = updateTaskResponses;
		var success = await ApplicationService.CreateApplication(application);

		if (success)
		{
			Snackbar.Add("Applications sent successfully!", Severity.Success);
			NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
		}
		else
		{
			Snackbar.Add("Something went wrong", Severity.Error);
		}
	}
}
