@using MRA.Jobs.Application.Contracts.Applications.Commands.CreateApplication;
@using MRA.Jobs.Application.Contracts.VacancyClient;
@using MRA.Jobs.Client.Services.FileService
@layout MainLayout
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IInternshipService InternshipService
@inject IApplicationService ApplicationService

<div class="container w-75 mt-4">
    @if (vacancy is null)
    {
        if (_showLoader)
        {
            <div class="loader"></div>
        }
    }
    else
    {
        <MudCard>
            <MudCardContent>
                <MudText Style="color:gray">
                    <b>Vacancy Details</b>
                </MudText>
                <MudText Typo="Typo.h5">
                    <b>
                        @vacancy.Title
                    </b>
                </MudText>
                <br/>
                <MudText>@vacancy.Description</MudText>
            </MudCardContent>
        </MudCard>
        <br/>

        <EditForm Model="@application" OnValidSubmit="CreateApplication">
            <FluentValidationValidator/>

            <MudCard>
                <MudCardContent>
                    <MudText Style="color:gray">
                        <b>Additional Details</b>
                    </MudText>
                    <MudText Typo="Typo.h6">
                        <b><span class="text-danger">*</span>Cover Letter</b>
                    </MudText>
                    <MudTextField T="string" Lines="7" Variant="Variant.Outlined" @bind-Value="@application.CoverLetter"
                                  For="@(() => application.CoverLetter)"/>
                </MudCardContent>
            </MudCard>
            <br/>
            @if (vacancy.VacancyQuestions.Any())
            {
                <MudCard>
                    <MudCardContent>
                        <MudText Style="color:gray">
                            <b>Questions</b>
                        </MudText>
                        <br/>
                        @foreach (var question in vacancy.VacancyQuestions)
                        {
                            <MudDivider/>
                            <label for="question" class="form-label">
                                <span class="text-danger">*</span>@question.Question
                            </label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="question_@question.Id" required="required" @bind="questionResponses[question.Question]">
                            </div>
                        }
                    </MudCardContent>
                </MudCard>
            }
            <MudFileUpload T="IBrowserFile" OnFilesChanged="args => _cv = args.File" Accept="@Configuration["CvSettings:ExceptedFormats"]">
                <ButtonTemplate Context="anotherContext">
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload"
                               for="@anotherContext">
                        Upload your CV
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>

            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Apply</MudText>
                    }
                </MudButton>

            </MudCardActions>
        </EditForm>
    }
</div>

@code {
    private bool _showLoader = false;

    [Parameter]
    public VacancyApplicationResponse vacancy { get; set; }

    [Parameter]
    public CreateApplicationCommand application { get; set; }

    [Parameter]
    public string Slug { get; set; }

    [Parameter]
    public Dictionary<string, string> questionResponses { get; set; }

    [Inject]
    public IConfiguration Configuration { get; set; }

    private IBrowserFile _cv;
    private bool _processing;

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            _showLoader = true;
            StateHasChanged();
        }
    }

    private async Task CreateApplication()
    {
        if (string.IsNullOrWhiteSpace(application.CoverLetter) || questionResponses.Any(qr => string.IsNullOrWhiteSpace(qr.Value)) || _cv == null)
        {
            return; // Do not proceed with submission if any required fields are empty.
        }

        var updatedResponses = application.VacancyResponses.Select(vr => new VacancyResponseDto
        {
            VacancyQuestion = vr.VacancyQuestion, Response = questionResponses[vr.VacancyQuestion.Question]
        }).ToList();

        application.VacancyResponses = updatedResponses;
        _processing = true;
        await ApplicationService.CreateApplication(application, _cv);
        Console.WriteLine(1+1);
        _processing = false;
    }
}