@using MRA.Jobs.Application.Contracts.Applications.Commands.CreateApplication;
@using MRA.Jobs.Application.Contracts.VacancyClient;
@using MRA.Jobs.Client.CustomMethods
@using MRA.Jobs.Client.Services.FileService
@layout MainLayout
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IInternshipService InternshipService
@inject IApplicationService ApplicationService
@inject IJSRuntime jsRuntime

<div class="container w-75 mt-4">
    @if (vacancy is null)
    {
        if (_showLoader)
        {
            <div class="loader"></div>
        }
    }
    else
    {
        <MudCard>
            <MudCardContent>

                <MudText Typo="Typo.h5">
                    <b>
                        <MudLink Href="@(vacancyType + "/" + Slug)">
                            <MudIcon Icon="@Icons.Material.Filled.ChevronLeft" Size="Size.Large" Style="margin-top: -5px;"></MudIcon>
                        </MudLink>
                        @vacancy.Title
                    </b>
                </MudText>
                <MudText Typo="Typo.body2" Style="color:rgb(128,128,128)">
                    <small>
                        <b>Posted @CustomConverter.GetDisplayPostedDate(vacancy.PublishDate)</b>
                    </small>
                </MudText>

                <br/>
                <MudDivider Style="padding:10px;"/>
                <MudText Typo="Typo.body2">
                    Style="color:rgb(128,128,128)"
                    <small>
                        <b>Vacancy Details</b>
                    </small>
                </MudText>
                <MudText>@vacancy.Description</MudText>
                <MudDivider Style="padding:10px"/>
                <MudGrid Style="padding:10px 10px; color:rgb(128,128,128);">
                    @if (vacancy.Duration != 0)
                    {
                        <MudItem lg="4" md="6" xs="6">
                            <MudGrid>
                                <MudItem Style="padding:0;">
                                    <MudIcon Icon="@Icons.Material.Outlined.Timelapse"/>
                                </MudItem>
                                <MudItem Style="padding:0;">
                                    <MudText>
                                        <b>@vacancy.Duration month(s)</b>
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        <small>Duration</small>
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    }
                    @if (vacancy.Deadline != default(DateTime))
                    {
                        <MudItem lg="4" md="6" xs="6">
                            @{
                                var deadlineResult = CustomConverter.GetDeadlineOrEndDateDisplayDate(vacancy.Deadline);
                                var deadlineStyle = $"color:{deadlineResult.Color}";

                                <MudGrid Style="@deadlineStyle">
                                    <MudItem Style="padding:0;">
                                        <MudIcon Icon="@Icons.Material.Outlined.Alarm"/>
                                    </MudItem>
                                    <MudItem Style="padding:0;">
                                        <MudText>
                                            <b>@deadlineResult.DisplayDate</b>
                                        </MudText>
                                        <MudText Typo="Typo.body2">
                                            <small>Deadline</small>
                                        </MudText>
                                    </MudItem>
                                </MudGrid>
                            }
                        </MudItem>
                    }

                    @if (vacancy.RequiredYearOfExperience != 0)
                    {
                        <MudItem lg="4" md="6" xs="6">
                            <MudGrid>
                                <MudItem Style="padding:0;">
                                    <MudIcon Icon="@Icons.Material.Outlined.Work"/>
                                </MudItem>
                                <MudItem Style="padding:0;">
                                    <MudText>
                                        <b>@vacancy.RequiredYearOfExperience year(s)</b>
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        <small>Required year of experience</small>
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    }
                    @if (vacancy.Fees != 0)
                    {
                        <MudItem lg="4" md="6" xs="6">
                            <MudGrid>
                                <MudItem Style="padding:0;">
                                    <MudIcon Icon="@Icons.Material.Outlined.AttachMoney"/>
                                </MudItem>
                                <MudItem Style="padding:0;">
                                    <MudText>
                                        <b>@vacancy.Fees</b>
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        <small>Fees</small>
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    }

                    <MudItem lg="4" md="6" xs="6">
                        @{
                            var endDateResult = CustomConverter.GetDeadlineOrEndDateDisplayDate(vacancy.EndDate);
                            var endDatelineStyle = $"color:{endDateResult.Color}";

                            <MudGrid Style="@endDatelineStyle">
                                <MudItem Style="padding:0;">
                                    <MudIcon Icon="@Icons.Material.Outlined.DateRange"/>
                                </MudItem>
                                <MudItem Style="padding:0;">
                                    <MudText>
                                        <b>@endDateResult.DisplayDate</b>
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        <small>End Date</small>
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        }
                    </MudItem>

                </MudGrid>
            </MudCardContent>
        </MudCard>
        <br/>

        <EditForm Model="@application" OnValidSubmit="CreateApplication">
            <FluentValidationValidator/>

            <MudCard>
                <MudCardContent>
                    <MudText Style="color:rgb(128,128,128)">
                        <b>Additional Details</b>
                    </MudText>
                    <MudText Typo="Typo.h6">
                        <b><span class="text-danger">*</span>Cover Letter</b>
                    </MudText>
                    <MudTextField T="string" Lines="7" Variant="Variant.Outlined" @bind-Value="@application.CoverLetter"
                                  For="@(() => application.CoverLetter)"/>
                </MudCardContent>
            </MudCard>

            <br/>

            @if (vacancy.VacancyQuestions.Any())
            {
                <MudCard>
                    <MudCardContent>
                        <MudText Style="color:rgb(128,128,128)">
                            <b>Questions</b>
                        </MudText>
                        <br/>
                        @foreach (var question in vacancy.VacancyQuestions)
                        {
                            <MudDivider/>
                            <label class="form-label">
                                <span class="text-danger">*</span>@question.Question
                            </label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="question_@question.Id" required="required" @bind="questionResponses[question.Question]">
                            </div>
                        }
                    </MudCardContent>
                </MudCard>
            }
			@if (vacancy.VacancyTasks.Count() > 0)
			{
				<MudCard>
					<MudCardContent>
						<MudText Style="color:gray"><b>VacancyTasks</b></MudText>
						<br />
						@foreach (var task in vacancy.VacancyTasks)
						{
							<MudDivider />
							<p><label for="Title" class="form-label"><span class="text-danger">*</span>@task.Title</label></p>
							<p><label for="Description" class="form-label"><span class="text-danger">*</span>@task.Description</label></p>
							@* @if(task.Template!=null){
								SetValue(task.Template);
							} *@
							<StandaloneCodeEditor @ref="_editor" Id="sample-code-editor-123" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" OnContextMenu="OnContextMenu" SetValue(task.Template) />
							UpdateTaskResponse(task.Title);
						}
					</MudCardContent>
				</MudCard>
			}
            @* cv *@
            <MudRadioGroup @bind-SelectedOption="_isUploadCvMode">
                <MudRadio Option="@(false)" Color="Color.Primary">Apply using profile</MudRadio>
                <MudRadio Option="@(true)" Color="Color.Primary">Apply with uploading file</MudRadio>
            </MudRadioGroup>
            @if (_isUploadCvMode)
            {
                <MudFileUpload T="IBrowserFile" OnFilesChanged="args => _cv = args.File" Accept="@Configuration["CvSettings:ExceptedFormats"]">
                    <ButtonTemplate Context="anotherContext">
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@anotherContext">
                            Upload your CV
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            }
            @* cv *@

            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Apply</MudText>
                    }
                </MudButton>

            </MudCardActions>
        </EditForm>
    }
</div>

@code {
	private StandaloneCodeEditor _editor = null!;
	private string _valueToSet = "";
    private bool _isUploadCvMode = true;
    private bool _showLoader = false;

    [Parameter]
    public VacancyApplicationResponse vacancy { get; set; }

    [Parameter]
    public CreateApplicationCommand application { get; set; }

    [Parameter]
    public string Slug { get; set; }

    [Parameter]
    public Dictionary<string, string> questionResponses { get; set; }

    [Parameter]
    public Dictionary<string, string> taskResponses { get; set; }

    [Parameter]
    public string vacancyType { get; set; }

    [Inject]
    public IConfiguration Configuration { get; set; }

    private IBrowserFile _cv;
    private bool _processing;

	private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
	{
		return new StandaloneEditorConstructionOptions
			{
				Language = "javascript",
				GlyphMargin = true,
				Value = "\"use strict\";\n" +
						"function Person(age) {\n" +
						"	if (age) {\n" +
						"		this.age = age;\n" +
						"	}\n" +
						"}\n" +
						"Person.prototype.getAge = function () {\n" +
						"	return this.age;\n" +
						"};\n"
			};
	}
	private async Task UpdateTaskResponse(string taskTitle)
	{
		taskResponses[taskTitle] = await _editor.GetValue();
	}
	private async Task EditorOnDidInit()
	{
		await _editor.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.KeyH, (args) =>
		{
			Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
		});

		var newDecorations = new ModelDeltaDecoration[]
		{
			new ModelDeltaDecoration
			{
				Range = new BlazorMonaco.Range(3,1,3,1),
				Options = new ModelDecorationOptions
				{
					IsWholeLine = true,
					ClassName = "decorationContentClass",
					GlyphMarginClassName = "decorationGlyphMarginClass"
				}
			}
		};

		decorationIds = await _editor.DeltaDecorations(null, newDecorations);
		// You can now use 'decorationIds' to change or remove the decorations
	}

	private string[] decorationIds = new string[0];

	private void OnContextMenu(EditorMouseEvent eventArg)
	{
		Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
	}
	private async Task SetValue(string s)
	{
		Console.WriteLine($"setting value to: {s}");
		await _editor.SetValue(s);
	}
    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            _showLoader = true;
            StateHasChanged();
        }
    }

    private async Task CreateApplication()
    {
        if (string.IsNullOrWhiteSpace(application.CoverLetter) || questionResponses.Any(qr => string.IsNullOrWhiteSpace(qr.Value)) || (_cv == null && _isUploadCvMode))
        {
            return; // Do not proceed with submission if any required fields are empty.
        }

        var updatedResponses = application.VacancyResponses.Select(vr => new VacancyResponseDto
        {
            VacancyQuestion = vr.VacancyQuestion,
            Response = questionResponses[vr.VacancyQuestion.Question]
        }).ToList();
        var updateTaskResponses = vacancy.VacancyTasks.Select(task => new TaskResponseDto
        {
            TaskId = task.Id, Code = taskResponses[task.Title]
        }).ToList();
        application.TaskResponses = updateTaskResponses;
        application.VacancyResponses = updatedResponses;
        application.Cv.IsUploadCvMode = _isUploadCvMode;
        _processing = true;
        await ApplicationService.CreateApplication(application, _cv);
        _processing = false;
    }

}