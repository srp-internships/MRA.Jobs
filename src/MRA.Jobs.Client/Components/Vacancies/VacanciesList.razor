@using MRA.Jobs.Application.Contracts.InternshipVacancies.Responses;
@using MRA.Jobs.Application.Contracts.VacancyClient;
@inject ICategoryService categoryService
@inject IVacancyService vacancyService

<style>
    .job-card:hover {
        background-color: #F5F5F5; /* Change to desired hover color */
    }
</style>

@if (Vacancies is null)
{
    <MudText Typo="Typo.h5">@message</MudText>

}
else
{
    <MudContainer>
        <MudGrid Spacing="4">
            <MudItem xs="12" md="3">
                <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                    <MudTabs Color="Color.Info" MinimumTabWidth="200px" Rounded="true" Elevation="4" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
                        <MudTabPanel Icon="@Icons.Material.Filled.Category" Text="All Internships" />
                        @foreach (var jobCats in VacancyCategories)
                        {
                            <MudTabPanel Text="@jobCats" BadgeData="@GetVacancyCategoryCount(jobCats)" BadgeColor="Color.Info"/>
                        }
                    </MudTabs>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Sm" Invert="true">
                    <MudTabs Color="Color.Info" MinimumTabWidth="200px" Rounded="true" Elevation="4" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
                        <MudTabPanel Icon="@Icons.Material.Filled.Category" Text="All Internships" />
                        @foreach (var jobCats in VacancyCategories)
                        {
                            <MudTabPanel Text="@jobCats" BadgeData="@GetVacancyCategoryCount(jobCats)" BadgeColor="Color.Info" />
                        }
                    </MudTabs>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Md" Invert="true">
                    <MudTabs Color="Color.Info" Outlined="true" MinimumTabWidth="250px" Position="Position.Left" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
                        <MudTabPanel Icon="@Icons.Material.Filled.Category" Text="All Internships" />
                        @foreach (var jobCats in VacancyCategories)
                        {
                            <MudTabPanel Text="@jobCats" BadgeData="@GetVacancyCategoryCount(jobCats)" BadgeColor="Color.Info" />
                        }
                    </MudTabs>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Lg" Invert="true">
                    <MudTabs Color="Color.Info" Outlined="true" MinimumTabWidth="250px" Position="Position.Left" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
                        <MudTabPanel Icon="@Icons.Material.Filled.Category" Text="All Internships" />
                        @foreach (var jobCats in VacancyCategories)
                        {
                            <MudTabPanel Text="@jobCats" BadgeData="@GetVacancyCategoryCount(jobCats)" BadgeColor="Color.Info" />
                        }
                    </MudTabs>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Xl" Invert="true">
                    <MudTabs Color="Color.Info" Outlined="true" MinimumTabWidth="250px" Position="Position.Left" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
                        <MudTabPanel Icon="@Icons.Material.Filled.Category" Text="All Internships" />
                        @foreach (var jobCats in VacancyCategories)
                        {
                            <MudTabPanel Text="@jobCats" BadgeData="@GetVacancyCategoryCount(jobCats)" BadgeColor="Color.Info" />
                        }
                    </MudTabs>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Xxl" Invert="true">
                    <MudTabs Color="Color.Info" Outlined="true" MinimumTabWidth="250px" Position="Position.Left" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
                        <MudTabPanel Icon="@Icons.Material.Filled.Category" Text="All Internships" />
                        @foreach (var jobCats in VacancyCategories)
                        {
                            <MudTabPanel Text="@jobCats" BadgeData="@GetVacancyCategoryCount(jobCats)" BadgeColor="Color.Info" />
                        }
                    </MudTabs>
                </MudHidden>
            </MudItem>
            @if (VacancyCategories.Count == 0)
            {
                <MudText Typo="Typo.h5" Style="margin:50px;">There are currently no job vacancies available. Please check back later :)</MudText>
            }
            else
            {
                <MudItem xs="12" md="9">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="Search" TextChanged="SearchVacancy" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
                        </MudItem>
                        @foreach (var Vacancy in GetVisibleVacancies())
                        {
                            <MudItem xs="12">
                                <a href="/@Route/@Vacancy.Slug">
                                    <MudCard Class="job-card">
                                        <MudCardHeader>
                                            <MudText Style="color: #129fd7;" Typo="Typo.h5">@Vacancy.Title</MudText>
                                        </MudCardHeader>
                                        <MudCardContent>
                                            @Vacancy.ShortDescription
                                        </MudCardContent>
                                    </MudCard>
                                </a>
                            </MudItem>
                        }
                        <MudItem xs="12" Class="d-flex justify-content-center">
                            <MudPagination Style="color: #129fd7;" Count="@GetTotalPages()" @bind-Selected="@_selected" />
                        </MudItem>
                    </MudGrid>
                </MudItem>
            }
        </MudGrid>
    </MudContainer>

}

@code {
    private int _selected = 1;
    private string message = "Loading...";
    public string Search { get; set; }
    [Parameter]
    public List<string> VacancyCategories { get; set; }

    [Parameter]
    public List<VacancyClientResponse> Vacancies { get; set; }

    [Parameter]
    public string Route { get; set; }

    [Parameter]
    public List<VacancyClientResponse> filteredVacancies { get; set; }
    private int activeIndex = 0;
    private string selectedCategoryText = "All Internships";
    private int ItemsPerPage = 5;

    private async Task HandleTabSelection(int index)
    {
        activeIndex = index;

        if (index == 0)
        {
            filteredVacancies = Vacancies;
        }
        else if (index > 0 && index <= VacancyCategories.Count)
        {
            selectedCategoryText = VacancyCategories[index - 1];
            filteredVacancies = Vacancies.Where(j => j.Category == selectedCategoryText).ToList();
        }

        // Reset pagination on tab change
        _selected = 1;
    }

    private int GetVacancyCategoryCount(string category)
    {
        return Vacancies.Count(j => j.Category == category);
    }

    private void ApplySearchFilter(string query)
    {
        if (!string.IsNullOrEmpty(query))
        {
            Console.WriteLine(query);
            filteredVacancies = Vacancies
                .Where(j => j.Title.Contains(Search, StringComparison.OrdinalIgnoreCase)
                            || j.ShortDescription.Contains(query, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            filteredVacancies = Vacancies;
        }

        // Reset pagination on search
        _selected = 1;
    }

    private void SearchVacancy()
    {
        ApplySearchFilter(Search);
    }

    private List<VacancyClientResponse> GetVisibleVacancies()
    {
        int startIndex = (_selected - 1) * ItemsPerPage;
        return filteredVacancies.Skip(startIndex).Take(ItemsPerPage).ToList();
    }

    private int GetTotalPages()
    {
        return (int)Math.Ceiling((double)filteredVacancies.Count / ItemsPerPage);
    }
}
