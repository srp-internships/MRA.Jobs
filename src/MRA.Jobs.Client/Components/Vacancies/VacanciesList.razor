@using MRA.Jobs.Application.Contracts.InternshipVacancies.Responses;
@using MRA.Jobs.Application.Contracts.VacancyClient;
@using MRA.Jobs.Client.CustomMethods;
@using MRA.Jobs.Application.Contracts.HiddenVacancies.Responses
@using MRA.Jobs.Client.Services.HiddenVacancies
@inject ICategoryService CategoryService
@inject IVacancyService VacancyService
@inject NavigationManager NavigationManager
@inject IHiddenVacancyService HiddenVacancyService

<style>
	.job-card:hover {
		background-color: #F5F5F5; /* Change to desired hover color */
	}
	.customTabContainer{
	    display: flex;
	    width: 100%;
	    justify-content: space-between;
	}
	.customTabContainerLeft{
	    margin-right: 10px ;
	    margin-left: 10px;
	}
	.customTabContainerRight{
	    margin-right: 20px;
	    margin-left: 10px;
	    display:flex;
	}
</style>

@if (Vacancies is null)
{
    if (showLoader)
    {
        <div class="loader"></div>
    }
}
else
{
    <MudContainer>
        <MudGrid Spacing="4">
            <MudItem xs="12" md="3">
                <MudGrid>
                    <MudItem xs="12">
                        <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                            <MudTabs MinimumTabWidth="200px" Rounded="true" Elevation="4" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
                                <MudTabPanel Text="All"/>
                                @foreach (var jobCats in VacancyCategories)
                                {
                                    <MudTabPanel>
                                        <TabContent>
                                            <div class="customTabContainer">
                                                <div class="customTabContainerLeft">
                                                    <MudText>@jobCats</MudText>
                                                </div>
                                                <div class="customTabContainerRight">
                                                    <MudBadge Origin="Origin.CenterRight" Color="Color.Primary" Content="@GetVacancyCategoryCount(jobCats)"></MudBadge>
                                                </div>
                                            </div>
                                        </TabContent>
                                    </MudTabPanel>
                                }
                            </MudTabs>
                        </MudHidden>
                        <MudHidden Breakpoint="Breakpoint.Sm" Invert="true">
                            <MudTabs MinimumTabWidth="200px" Rounded="true" Elevation="4" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
                                <MudTabPanel Text="All"/>
                                @foreach (var jobCats in VacancyCategories)
                                {
                                    <MudTabPanel>
                                        <TabContent>
                                            <div class="customTabContainer">
                                                <div class="customTabContainerLeft">
                                                    <MudText>@jobCats</MudText>
                                                </div>
                                                <div class="customTabContainerRight">
                                                    <MudBadge Origin="Origin.CenterRight" Color="Color.Primary" Content="@GetVacancyCategoryCount(jobCats)"></MudBadge>
                                                </div>
                                            </div>
                                        </TabContent>
                                    </MudTabPanel>
                                }
                            </MudTabs>
                        </MudHidden>
                        <MudHidden Breakpoint="Breakpoint.Md" Invert="true">
                            <MudTabs Outlined="true" MinimumTabWidth="250px" Position="Position.Left" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
                                <MudTabPanel Text="All"/>
                                @foreach (var jobCats in VacancyCategories)
                                {
                                    <MudTabPanel>
                                        <TabContent>
                                            <div class="customTabContainer">
                                                <div class="customTabContainerLeft">
                                                    <MudText>@jobCats</MudText>
                                                </div>
                                                <div class="customTabContainerRight">
                                                    <MudBadge Origin="Origin.CenterRight" Color="Color.Primary" Content="@GetVacancyCategoryCount(jobCats)"></MudBadge>
                                                </div>
                                            </div>
                                        </TabContent>
                                    </MudTabPanel>
                                }
                            </MudTabs>
                        </MudHidden>
                        <MudHidden Breakpoint="Breakpoint.Lg" Invert="true">
                            <MudTabs Outlined="true" MinimumTabWidth="250px" Position="Position.Left" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
                                <MudTabPanel Text="All"/>
                                @foreach (var jobCats in VacancyCategories)
                                {
                                    <MudTabPanel>
                                        <TabContent>
                                            <div class="customTabContainer">
                                                <div class="customTabContainerLeft">
                                                    <MudText>@jobCats</MudText>
                                                </div>
                                                <div class="customTabContainerRight">
                                                    <MudBadge Origin="Origin.CenterRight" Color="Color.Primary" Content="@GetVacancyCategoryCount(jobCats)"></MudBadge>
                                                </div>
                                            </div>
                                        </TabContent>
                                    </MudTabPanel>
                                }
                            </MudTabs>
                        </MudHidden>
                        <MudHidden Breakpoint="Breakpoint.Xl" Invert="true">
                            <MudTabs Outlined="true" MinimumTabWidth="250px" Position="Position.Left" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
                                <MudTabPanel Text="All"/>
                                @foreach (var jobCats in VacancyCategories)
                                {
                                    <MudTabPanel>
                                        <TabContent>
                                            <div class="customTabContainer">
                                                <div class="customTabContainerLeft">
                                                    <MudText>@jobCats</MudText>
                                                </div>
                                                <div class="customTabContainerRight">
                                                    <MudBadge Origin="Origin.CenterRight" Color="Color.Primary" Content="@GetVacancyCategoryCount(jobCats)"></MudBadge>
                                                </div>
                                            </div>
                                        </TabContent>
                                    </MudTabPanel>
                                }
                            </MudTabs>
                        </MudHidden>
                        <MudHidden Breakpoint="Breakpoint.Xxl" Invert="true">
                            <MudTabs Outlined="true" MinimumTabWidth="250px" Position="Position.Left" ActivePanelIndexChanged="@(index => HandleTabSelection(index))">
                                <MudTabPanel Text="All"/>
                                @foreach (var jobCats in VacancyCategories)
                                {
                                    <MudTabPanel>
                                        <TabContent>
                                            <div class="customTabContainer">
                                                <div class="customTabContainerLeft">
                                                    <MudText>@jobCats</MudText>
                                                </div>
                                                <div class="customTabContainerRight">
                                                    <MudBadge Origin="Origin.CenterRight" Color="Color.Primary" Content="@GetVacancyCategoryCount(jobCats)"></MudBadge>
                                                </div>
                                            </div>
                                        </TabContent>
                                    </MudTabPanel>
                                }
                            </MudTabs>
                        </MudHidden>
                    </MudItem>
                    <MudItem xs="12">
                        <CascadingAuthenticationState>
                            <AuthorizeView>
                                <Authorized>
                                    @if (_applicationWithHiddenVacancyStatus == null || !_applicationWithHiddenVacancyStatus.Applied)
                                    {
                                        <MudCard>
                                            <MudCardContent>
                                                <MudText Typo="Typo.body2">
                                                    If you would like to nominate yourself, send us your СV.
                                                </MudText>
                                            </MudCardContent>
                                            <MudCardActions>
                                                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                                           OnClick="ApplyHiddenVacancy" FullWidth="true">
                                                    <MudText>Upload CV</MudText>
                                                </MudButton>
                                            </MudCardActions>
                                        </MudCard>
                                    }
                                    else
                                    {
                                        <MudCard>
                                            <MudCardContent>
                                                <MudText Typo="Typo.body2">
                                                    The status of your CV for your candidacy is <b>@_applicationWithHiddenVacancyStatus.Status.ToString()</b>
                                                </MudText>
                                            </MudCardContent>
                                               @if (_applicationWithHiddenVacancyStatus.Status == ApplicationStatusDto.ApplicationStatus.Expired
                                                                                         || _applicationWithHiddenVacancyStatus.Status == ApplicationStatusDto.ApplicationStatus.Rejected
                                                                                         || _applicationWithHiddenVacancyStatus.Status == ApplicationStatusDto.ApplicationStatus.Refused)
                                                                                {
                                               <MudCardActions>
                                                     <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                                                                                              OnClick="ApplyHiddenVacancy" FullWidth="true">
                                                                                                       <MudText>Upload New CV</MudText>
                                                                                                   </MudButton>
                                               </MudCardActions>
                                                                                }
                                        </MudCard>
                                    }
                                </Authorized>
                                <NotAuthorized>
                                    <MudCard>
                                        <MudCardContent>
                                            <MudText Typo="Typo.body2">
                                                If you would like to nominate yourself, sign in and send us your СV.
                                            </MudText>
                                        </MudCardContent>
                                        <MudCardActions>
                                            <MudButton Variant="Variant.Filled" OnClick="SignIn" Color="Color.Primary" FullWidth="true">
                                                <MudText>Sign In</MudText>
                                            </MudButton>
                                        </MudCardActions>
                                    </MudCard>

                                </NotAuthorized>
                            </AuthorizeView>
                        </CascadingAuthenticationState>
                    </MudItem>
                </MudGrid>
            </MudItem>
            @if (VacancyCategories.Count == 0)
            {
                <MudText Typo="Typo.h5" Style="margin:50px;">There are currently no job vacancies available. Please check back later :)</MudText>
            }
            else
            {
                <MudItem xs="12" md="9">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="Search" TextChanged="SearchVacancy" Label="Search" Variant="Variant.Outlined" OnAdornmentClick="SearchVacancy" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Info"/>
                        </MudItem>
                        @foreach (var Vacancy in GetVisibleVacancies())
                        {
                            <MudItem xs="12">
                                <a href="/@Route/@Vacancy.Slug">
                                    <MudCard Class="job-card">
                                        <MudCardContent>
                                            <MudText Style="color: #129fd7;" Typo="Typo.h5">
                                                <b>@Vacancy.Title</b>
                                            </MudText>
                                            <MudText Typo="Typo.body2" Style="color:rgb(128,128,128)">
                                                <small>
                                                    <b>Posted @CustomConverter.GetDisplayPostedDate(Vacancy.PublishDate)</b>
                                                </small>
                                            </MudText>
                                            <br/>
                                            <MudText Typo="Typo.h6">@Vacancy.ShortDescription</MudText>
                                            <MudGrid>
                                                @if (Vacancy.Duration != 0)
                                                {
                                                    <MudItem Style="color:rgb(128,128,128)">
                                                        <MudText Typo="Typo.caption">Duration <b>@Vacancy.Duration month(s)</b></MudText>
                                                    </MudItem>
                                                }
                                                @if (Vacancy.Deadline != default(DateTime))
                                                {
                                                    <MudItem>
                                                        @{
                                                            var deadlineResult = CustomConverter.GetDeadlineOrEndDateDisplayDate(Vacancy.Deadline);
                                                            var deadlineStyle = $"color:{deadlineResult.Color}";
                                                            <MudText Typo="Typo.caption" Style="@deadlineStyle">Deadline <b>@deadlineResult.DisplayDate</b></MudText>
                                                        }
                                                    </MudItem>
                                                }
                                                <MudItem>
                                                    @{
                                                        var endDateResult = CustomConverter.GetDeadlineOrEndDateDisplayDate(Vacancy.EndDate);
                                                        var endDateStyle = $"color:{endDateResult.Color}";
                                                        <MudText Typo="Typo.caption" Style="@endDateStyle">End date <b>@endDateResult.DisplayDate</b></MudText>
                                                    }
                                                </MudItem>
                                            </MudGrid>
                                        </MudCardContent>
                                    </MudCard>
                                </a>
                            </MudItem>
                        }
                        @if (GetTotalPages() > 1)
                        {
                            <MudItem xs="12" Class="d-flex justify-content-center">
                                <MudPagination Color="Color.Info" Variant="Variant.Outlined" Count="@GetTotalPages()" @bind-Selected="@_selected"/>
                            </MudItem>
                        }
                    </MudGrid>
                </MudItem>
            }
        </MudGrid>
    </MudContainer>
}

@code {
    private int _selected = 1;
    public string Search { get; set; }
    private bool showLoader = false;

    [Parameter]
    public List<string> VacancyCategories { get; set; }

    [Parameter]
    public List<VacancyClientResponse> Vacancies { get; set; }

    [Parameter]
    public string Route { get; set; }

    [Parameter]
    public List<VacancyClientResponse> FilteredVacancies { get; set; }

    private int activeIndex = 0;
    private string selectedCategoryText = "All Internships";
    private int ItemsPerPage = 5;

    private ApplicationWithHiddenVacancyStatus _applicationWithHiddenVacancyStatus;

    protected override async void OnAfterRender(bool firstRender)
    {
        _applicationWithHiddenVacancyStatus = await HiddenVacancyService.GetApplicationStatus();
        if (firstRender)
        {
            await Task.Delay(1000);
            showLoader = true;
            StateHasChanged();
        }
    }

    private void HandleTabSelection(int index)
    {
        activeIndex = index;

        if (index == 0)
        {
            FilteredVacancies = Vacancies;
        }
        else if (index > 0 && index <= VacancyCategories.Count)
        {
            selectedCategoryText = VacancyCategories[index - 1];
            FilteredVacancies = Vacancies.Where(j => j.Category == selectedCategoryText).ToList();
        }

    // Reset pagination on tab change
        _selected = 1;
    }

    private int GetVacancyCategoryCount(string category)
    {
        return Vacancies.Count(j => j.Category == category);
    }

    private void ApplySearchFilter(string query)
    {
        if (!string.IsNullOrEmpty(query))
        {
            Console.WriteLine(query);
            FilteredVacancies = Vacancies
                .Where(j => j.Title.Contains(Search, StringComparison.OrdinalIgnoreCase)
                            || j.ShortDescription.Contains(query, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            FilteredVacancies = Vacancies;
        }

    // Reset pagination on search
        _selected = 1;
    }

    private void SearchVacancy()
    {
        ApplySearchFilter(Search);
    }

    private List<VacancyClientResponse> GetVisibleVacancies()
    {
        int startIndex = (_selected - 1) * ItemsPerPage;
        return FilteredVacancies.Skip(startIndex).Take(ItemsPerPage).ToList();
    }

    private int GetTotalPages()
    {
        return (int)Math.Ceiling((double)FilteredVacancies.Count / ItemsPerPage);
    }

    private void ApplyHiddenVacancy()
    {
        NavigationManager.NavigateTo("/upload-cv");
    }

    private void SignIn()
    {
        NavigationManager.NavigateTo("/sign-in");
    }

}