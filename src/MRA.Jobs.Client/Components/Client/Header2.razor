@using MRA.Jobs.Client.Services
@using MRA.Jobs.Client.Enums
@inject NavigationManager NavigationManager
@inject LayoutService LayoutService
<MudThemeProvider @ref="@_mudThemeProvider" Theme="@LayoutService.CurrentTheme" IsDarkMode="@LayoutService.IsDarkMode" IsDarkModeChanged="LayoutService.SetDarkMode"/>
<MudToolBar>
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"/>

    <MudItem Style="padding-right:5px;">
        <MudImage src="images/srp_icon.png" Style="width: 50px"/>
    </MudItem>
    <MudItem Style="padding-left:0; margin-right: 40px;">
        <MudText Style="font-size: 21.5px;">
            <b>SILK ROAD</b>
        </MudText>
        <MudText Style="margin-top: -10px;">
            <small>
                <b>PROFESSIONALS</b>
            </small>
        </MudText>
    </MudItem>

    <MudButton Href="/" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Home)">
        <MudText>
            <b>Home</b>
        </MudText>
    </MudButton>
    <MudButton Href="/jobs" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Jobs)">
        <MudText>
            <b>Jobs</b>
        </MudText>
    </MudButton>
    <MudButton Href="/internships" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Internships)">
        <MudText>
            <b>Internships</b>
        </MudText>
    </MudButton>
    <MudButton Href="/trainings" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Trainings)">
        <MudText>
            <b>Trainings</b>
        </MudText>
    </MudButton>
    <MudButton Href="https://www.silkroadprofessionals.com/team/team/s" Target="_blank" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Team)">
        <MudText>
            <b>Team</b>
        </MudText>
    </MudButton>

    <MudSpacer/>
    <MudTooltip Duration="1000" Text="@(LayoutService.DarkModeToggle == DarkLightMode.System ? "Switch to Light Theme" : LayoutService.DarkModeToggle == DarkLightMode.Dark ? "Switch to system" : "Switch to Dark Theme")">
        <MudIconButton Icon="@(LayoutService.DarkModeToggle == DarkLightMode.System ? @Icons.Material.Filled.AutoMode : LayoutService.DarkModeToggle == DarkLightMode.Dark ? @Icons.Material.Rounded.LightMode : @Icons.Material.Outlined.DarkMode)" Color="Color.Inherit" OnClick="@ToggleDarkMode"/>
    </MudTooltip>
    <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit"/>
</MudToolBar>

@code {
    private DocPages currentPage;
    private MudThemeProvider _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await ApplyUserPreferences();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private async Task ApplyUserPreferences()
    {
        var defaultDarkMode = await _mudThemeProvider.GetSystemPreference();
        await LayoutService.ApplyUserPreferences(defaultDarkMode);
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        await LayoutService.OnSystemPreferenceChanged(newValue);
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        base.OnInitialized();
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        currentPage = LayoutService.GetDocsBasePage(NavigationManager.Uri);
        StateHasChanged();
    }

    private string GetActiveClass(DocPages page)
    {
        return page == currentPage ? "mud-chip-text mud-chip-color-primary mx-1 px-3" : "mx-1 px-3";
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private async Task ToggleDarkMode()
    {
        await LayoutService.ToggleDarkMode();
    //    NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        StateHasChanged();
    }

}