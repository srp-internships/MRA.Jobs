@using MRA.Jobs.Client.Services
@using MRA.Jobs.Client.Enums
@using MRA.Jobs.Client.wwwroot.resources
@using AltairCA.Blazor.WebAssembly.Cookie
@using Blazorise
@using MRA.Identity.Application.Contract.Profile.Responses
@using MRA.Jobs.Client.Services.Profile
@using MRA.Jobs.Client.Components.Buttons
@using Anchor = MudBlazor.Anchor
@using Breakpoint = MudBlazor.Breakpoint
@using Color = MudBlazor.Color
@using DividerType = MudBlazor.DividerType
@using Size = MudBlazor.Size
@inject NavigationManager NavigationManager
@inject LayoutService LayoutService
@inject AuthenticationStateProvider AuthProvider
@inject IAltairCABlazorCookieUtil CookieUtil
@inject IUserProfileService UserProfileService

<MudToolBar Class="toolbar-fixed-blur">
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudIconButton Icon="@Icons.Material.Filled.Notes" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.Xs">
        <MudItem Style="padding-right:5px;">
            <MudImage src="images/srp_icon.png" Style="width: 50px"/>
        </MudItem>
        <MudItem Style="padding-left:0; margin-right: 40px;">
            <MudText Style="font-size: 21.5px;">
                <b>SILK ROAD</b>
            </MudText>
            <MudText Style="margin-top: -10px;">
                <small>
                    <b>PROFESSIONALS</b>
                </small>
            </MudText>
        </MudItem>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.SmAndUp">
        <MudItem Style="padding-right:5px;">
            <MudImage src="images/srp_icon.png" Style="width: 30px"/>
        </MudItem>
        <MudItem Style="padding-left:0; margin-right: 40px;">
            <MudText Style="font-size: 21.5px;">
                <b>SRP</b>
            </MudText>
        </MudItem>
    </MudHidden>

    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudButton Href="/" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Home)">
            <MudText>
                <b>@ContentService["Header:Home"]</b>
            </MudText>
        </MudButton>
        <MudButton Href="/jobs" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Jobs)">
            <MudText>
                <b>@ContentService["Header:Jobs"]</b>
            </MudText>
        </MudButton>
        <MudButton Href="/internships" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Internships)">
            <MudText>
                <b>@ContentService["Header:Internships"]</b>
            </MudText>
        </MudButton>
        <MudButton Href="/trainings" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Trainings)">
            <MudText>
                <b>@ContentService["Header:Trainings"]</b>
            </MudText>
        </MudButton>
        <MudButton Href="https://www.silkroadprofessionals.com/team/team/" Target="_blank" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Team)">
            <MudText>
                <b>@ContentService["Header:Team"]</b>
            </MudText>
        </MudButton>
        <MudButton Href="/contact" Color="Color.Inherit" Variant="Variant.Text" Class="@GetActiveClass(DocPages.Contact)">
            <MudText>
                <b>Contact</b>
            </MudText>
        </MudButton>
    </MudHidden>
    <MudSpacer/>
    <MudHidden Breakpoint="Breakpoint.Xs">
        <MudDivider Vertical="true" DividerType="DividerType.Middle" FlexItem="true" Class="mx-4 my-4"/>

        <ToolBarSettingsButtons/>
    </MudHidden>

    <CascadingAuthenticationState>
        <AuthorizeView>
            <Authorized>
                <MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter">
                    <ActivatorContent>
                        @if (LayoutService.user == null)
                        {
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small"/>
                        }
                        else
                        {
                            <MudChip>
                                <AvatarContent>
                                    <MudAvatar>@LayoutService.user.FirstName[0].ToString().ToUpper()@LayoutService.user.LastName[0].ToString().ToUpper()</MudAvatar>
                                </AvatarContent>
                                <ChildContent>@LayoutService.user.FirstName</ChildContent>
                            </MudChip>
                        }
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Rounded.AccountCircle" Href="/profile">@ContentService["UserButton:Profile"]</MudMenuItem>
                        <MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Rounded.Checklist" Href="/applications">@ContentService["UserButton:Applications"]</MudMenuItem>
                        <MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Rounded.Logout" OnClick="@Logout">@ContentService["UserButton:Logout"]</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </Authorized>
            <NotAuthorized>
                <MudMenu >
                    <ActivatorContent>
                        <MudChip Icon="@Icons.Material.Filled.Person">Sign In</MudChip>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Href="/sign-in">@ContentService["UserButton:Sign In"]</MudMenuItem>
                        <MudMenuItem Href="/sign-up">@ContentService["UserButton:Sign Up"]</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </NotAuthorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
</MudToolBar>

<MudDrawer @bind-Open="@_open" Anchor="Anchor.Start" Elevation="0" Variant="@DrawerVariant.Temporary"
           ClipMode="DrawerClipMode.Docked">
    <MudToolBar Dense="true" Class="docs-gray-bg">
        <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer"/>
        <MudSpacer/>
        <ToolBarSettingsButtons/>
    </MudToolBar>

    <MudNavMenu Rounded="true" Dense="true" Color="Color.Primary" Class="pa-2">
        <MudNavLink Match="NavLinkMatch.All" Href="/">@ContentService["Header:Home"]</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/jobs">@ContentService["Header:Jobs"]</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/internships">@ContentService["Header:Internships"]</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/trainings">@ContentService["Header:Trainings"]</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="https://www.silkroadprofessionals.com/team/team/" Target="_blank">@ContentService["Header:Team"]</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All" Href="/contact">Contact</MudNavLink>

    </MudNavMenu>
</MudDrawer>

@code {

    bool _open = false;

    void ToggleDrawer()
    {
        _open = !_open;
    }

    private DocPages currentPage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            try
            {
                LayoutService.user = await UserProfileService.Get();
            }
            catch (Exception e)
            {
            }
            StateHasChanged();
        }
    }


    protected override void OnInitialized()
    {
        currentPage = LayoutService.GetDocsBasePage(NavigationManager.Uri);
      
        StateHasChanged();
        NavigationManager.LocationChanged += HandleLocationChanged;
        base.OnInitialized();
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        currentPage = LayoutService.GetDocsBasePage(NavigationManager.Uri);
        StateHasChanged();
    }

    private string GetActiveClass(DocPages page)
    {
        return page == currentPage ? "mud-chip-text mud-chip-color-primary mx-1 px-3" : "mx-1 px-3";
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private async Task Logout()
    {
        await CookieUtil.RemoveAsync("authToken");
        await AuthProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/");
    }

}