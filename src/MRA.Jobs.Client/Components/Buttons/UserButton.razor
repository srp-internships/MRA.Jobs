@using AltairCA.Blazor.WebAssembly.Cookie
@using MRA.Jobs.Client.Identity
@using MRA.Jobs.Client.Services.Profile
@inject AuthenticationStateProvider AuthProvider
@inject IAltairCABlazorCookieUtil CookieUtil
@inject NavigationManager NavigationManager
@inject LayoutService LayoutService
@inject IUserProfileService UserProfileService
@inject IConfiguration configuration

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized Context="authorizedContext">
            <MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter" LockScroll="true">
                <ActivatorContent>
                    @if (LayoutService.User == null)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
                    }
                    else
                    {
                        @if (!string.IsNullOrEmpty(LayoutService.User.FirstName) && !string.IsNullOrEmpty(LayoutService.User.LastName))
                        {
                            <MudChip>
                                <AvatarContent>
                                    <MudAvatar>
                                        @LayoutService.User.FirstName[0].ToString().ToUpper()@LayoutService.User.LastName[0].ToString().ToUpper()
                                    </MudAvatar>
                                </AvatarContent>
                                <ChildContent>@LayoutService.User.FirstName</ChildContent>
                            </MudChip>
                        }
                        else
                        {
                            <MudChip>
                                <AvatarContent>
                                    <MudAvatar>
                                        @LayoutService.User.UserName[0].ToString().ToUpper()
                                    </MudAvatar>
                                </AvatarContent>
                                <ChildContent>@LayoutService.User.UserName[..5]</ChildContent>
                            </MudChip>
                        }
                    }
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Rounded.AccountCircle" Href=@($"{configuration["IdentityClient"]}")>@ContentService["UserButton:Profile"]</MudMenuItem>
                        <MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Rounded.Checklist" Href="/applications">@ContentService["UserButton:Applications"]</MudMenuItem>
                        <MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Rounded.Logout" OnClick="@Logout" OnTouch="@Logout">@ContentService["UserButton:Logout"]</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </Authorized>
            <NotAuthorized Context="notAuthorizedContext">
                <MudMenu>
                    <ActivatorContent>
                        <MudChip Icon="@Icons.Material.Filled.Person">@ContentService["UserButton:Sign In"]</MudChip>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Href="@($"{configuration["IdentityClient"]}/login?callback={NavigationManager.BaseUri}")">@ContentService["UserButton:Sign In"]</MudMenuItem>
                        <MudMenuItem Href="@($"{configuration["IdentityClient"]}/registration?callback={NavigationManager.BaseUri}")">@ContentService["UserButton:Sign Up"]</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </NotAuthorized>
        </AuthorizeView>
    </CascadingAuthenticationState>


    @code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LayoutService.User = await UserProfileService.Get();
            StateHasChanged();
        }
    }


    private async Task Logout()
    {
        await CookieUtil.RemoveAsync("authToken");
        await AuthProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo($"{configuration["IdentityCLient"]}/logout");
    }

}