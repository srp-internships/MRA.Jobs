@using MRA.Jobs.Application.Contracts.Applications.Commands.CreateApplication
@using MRA.Jobs.Application.Contracts.Dtos.Responses
@using MRA.Jobs.Application.Contracts.JobVacancies.Queries.GetJobVacancyBySlug
@using MRA.Jobs.Application.Contracts.JobVacancies.Responses
@using MRA.Jobs.Client.Services.NoVacancies
@using Microsoft.FeatureManagement
@inject NavigationManager NavigationManager
@inject IContentService ContentService
@inject IConfiguration Configuration
@inject INoVacancyService NoVacancyService
@inject ISnackbar Snackbar
@inject IFeatureManager FeatureManager
@if (_isNoVacancyApplyButtonEnabled)
{
	<div style="position: fixed; bottom: 76px; right: 16px; z-index: 999;">
		@if (_loading)
		{
			<MudButton OnClick="@OpenDialog" Variant="Variant.Filled" Color="Color.Primary" Disabled="true">
				<MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
				<MudText>@ContentService["SendCV:Title"]</MudText>
				</MudButton>
		}
		else
		{
			<MudButton OnClick="@OpenDialog" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.UploadFile">
				<MudText>@ContentService["SendCV:Title"]</MudText>
				</MudButton>
		}

	</div>
}
<MudDialog IsVisible="_isOpen" Style="width: 400px;"
		   Options="@(new DialogOptions() { DisableBackdropClick = true })">
	<DialogContent>
		@if (_questionsResponses.Any() && _vacancy.VacancyQuestions != null)
		{
			<MudText Typo="Typo.h6">@ContentService["SendCV:Title"]</MudText>
			<EditForm Model="@_application">
				<FluentValidationValidator />

				@foreach (var question in _vacancy.VacancyQuestions)
				{
					<MudTextField Label=@(ContentService[$"SendCV:{question.Question}"] + " *") @bind-Value="@_questionsResponses[question]" Variant="Variant.Outlined" />
				}
				<MudTextField T="string" Lines="3" Label="@(ContentService["SendCV:CoverLetter"] + " *")" Variant="@Variant.Outlined" @bind-Value="@_application.CoverLetter"
							  For="@(() => _application.CoverLetter)" />

				<MudFileUpload T="IBrowserFile" OnFilesChanged="args => _cv = args.File" Accept="@Configuration["CvSettings:ExceptedFormats"]">
					<ButtonTemplate Context="anotherContext">
						<MudButton HtmlTag="label"
								   Variant="Variant.Filled"
								   Color="Color.Primary"
								   StartIcon="@Icons.Material.Filled.CloudUpload"
								   for="@anotherContext">
							@ContentService["VacancyApplication:Upload your CV"]
						</MudButton>
					</ButtonTemplate>
				</MudFileUpload>


			</EditForm>
		}
		else
		{
			<MudText>@ContentService["ServerIsNotResponding"]</MudText>
		}
	</DialogContent>
	<DialogActions>
		@if (_questionsResponses.Any())
		{
			<MudButton Color="Color.Primary" Class="ml-auto" OnClick="@CreateApplication">
				@if (_processing)
				{
					<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
					<MudText Class="ms-2">@ContentService["VacancyApplication:Processing"]</MudText>
				}
				else
				{
					<MudText>@ContentService["VacancyApplication:Apply"]</MudText>
				}
			</MudButton>
			<MudButton OnClick="@CloseDialog">
				<MudText>@ContentService["SendCV:Close"]</MudText>
				</MudButton>
		}
		else
		{
			<MudButton OnClick="@CloseDialog" Color="Color.Primary">
				<MudText>@ContentService["SendCV:Close"]</MudText>
				</MudButton>
		}
	</DialogActions>
</MudDialog>

	@code {

	private bool _loading;
	private bool _isOpen;

	private async Task OpenDialog()
	{
		_loading = true;
		await Load();
		_isOpen = true;
		_loading = false;
		StateHasChanged();
	}

	private void CloseDialog()
	{
		_isOpen = false;
		StateHasChanged();
		Clear();
	}

	private bool _isNoVacancyApplyButtonEnabled;

	private IBrowserFile _cv;
	private bool _processing = false;

	JobVacancyDetailsDto _vacancy = new();

	private CreateApplicationCommand _application;
	private Dictionary<VacancyQuestionDto, string> _questionsResponses = new();

	protected override async Task OnInitializedAsync()
	{
		await Load();
		_isNoVacancyApplyButtonEnabled = await FeatureManager.IsEnabledAsync(FeatureFlags.NoVacancyApplyButton);
	}

	private async Task Load()
	{

		_vacancy = await NoVacancyService.GetNoVacancyAsync();
		if (_vacancy.Slug == null)
			return;

		Clear();
	}

	private void Clear()
	{
		_cv = null;
		_application = new CreateApplicationCommand();
		_questionsResponses.Clear();

		if (_vacancy?.VacancyQuestions == null)
			return;

		foreach (var question in _vacancy.VacancyQuestions)
		{
			_questionsResponses.Add(question, "");
		}
	}


	private async Task CreateApplication()
	{
		if (_cv == null)
		{
			Snackbar.Add(ContentService["SendCV:IfFileNull"], Severity.Error);
			return;
		}
		if (string.IsNullOrWhiteSpace(_application.CoverLetter) || _cv == null)
		{
			return; // Do not proceed with submission if any required fields are empty.
		}

		var vacancyResponses = _questionsResponses.Select(val => new VacancyResponseDto()
			{
				VacancyQuestion = new VacancyQuestionDto { Question = val.Key.Question },
				Response = val.Value
			}).ToList();

		_application.VacancyResponses = vacancyResponses;
		_processing = true;
		await NoVacancyService.CreateApplicationNoVacancyAsync(_application, _cv);
		_processing = false;
		CloseDialog();
	}

}