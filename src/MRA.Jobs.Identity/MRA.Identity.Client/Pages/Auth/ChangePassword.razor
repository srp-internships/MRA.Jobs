@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IContentService ContentService

<h3>@ContentService["ResetPassword:Changepassword"] </h3>
<br />
<MudGrid>
    <MudItem xs="12" sm="12" md="8" lg="6">
        <EditForm Model="command" OnInvalidSubmit="Submit">
            <FluentValidationValidator />
            <MudCard Class="rounded-lg mud-evaluation-4">
                <MudCardContent>
                    <MudText>@ContentService["Profile:Tochangeyourpassword,enteryouroldpassword,andthencreateanew,strongpassword."]</MudText>
                        <MudTextField @bind-Value="@command.OldPassword" Label="@ContentService["Profile:OldPassword"]" Variant="Variant.Outlined"
                                      InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                                      OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" For="@(() => command.OldPassword)" />
                        <MudTextField @bind-Value="@command.NewPassword" Label="@ContentService["ResetPassword:NewPassword"]" Variant="Variant.Outlined"
                                      InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                                      OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" For="@(() => command.NewPassword)" />
                        <MudTextField @bind-Value="@command.ConfirmPassword" Label="@ContentService["SignUp:ConfirmPassword"]" Variant="Variant.Outlined"
                                      InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                                      OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" For="@(() => command.ConfirmPassword)" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Color="Color.Primary" Variant="Variant.Filled"
                                   ButtonType="ButtonType.Submit" OnClick="Submit" FullWidth="true">
                            <MudText>@ContentService["ResetPassword:Changepassword"]</MudText>
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudItem>
    </MudGrid>

    @code {

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("");
            return;
        }
    }

    ChangePasswordUserCommand command = new ChangePasswordUserCommand();
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task Submit()
    {
        var response = await AuthService.ChangePassword(command);
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add((await response.Content.ReadFromJsonAsync<CustomProblemDetails>()).Detail, Severity.Error);
        }
        else
        {
            Snackbar.Add("Change password successfully", Severity.Success);
            command = new ChangePasswordUserCommand();
        }

        StateHasChanged();
    }

}