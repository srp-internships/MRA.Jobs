@using Microsoft.FeatureManagement
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject LayoutService LayoutService
@inject IContentService ContentService
@inject IFeatureManager FeatureManager
@if (_en || _ru || _tj)
{
    <MudTooltip Duration="1000" Text="@ContentService["Profile:SelectLanguage"]">
        <MudMenu EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Label="@LayoutService.Lang"
                 Dense="true" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                 LockScroll="true">
            @if (_en)
            {
                <MudMenuItem OnClick="@(() => SelectLanguage("En"))" OnTouch="@(() => SelectLanguage("En"))">En</MudMenuItem>
            }
            @if (_ru)
            {
                <MudMenuItem OnClick="@(() => SelectLanguage("Ru"))" OnTouch="@(() => SelectLanguage("Ru"))">Ru</MudMenuItem>
            }
            @if (_tj)
            {
                <MudMenuItem OnClick="@(() => SelectLanguage("Tj"))" OnTouch="@(() => SelectLanguage("Tj"))">Tj</MudMenuItem>
            }
        </MudMenu>
    </MudTooltip>
}
@if (_themeSwitcher)
{
    <MudTooltip Duration="1000" Text="@(LayoutService.DarkModeToggle == DarkLightMode.System ? ContentService["Profile:SwitchtoLightTheme"] : LayoutService.DarkModeToggle == DarkLightMode.Dark ? ContentService["Profile:Switchtosystem"] : ContentService["Profile:SwitchtoDarkTheme"])">
        <MudIconButton Icon="@(LayoutService.DarkModeToggle == DarkLightMode.System ? @Icons.Material.Filled.AutoMode : LayoutService.DarkModeToggle == DarkLightMode.Dark ? @Icons.Material.Rounded.LightMode : @Icons.Material.Outlined.DarkMode)" Color="Color.Inherit" OnClick="@ToggleDarkMode"/>
    </MudTooltip>
}

@code {
    private bool _en;
    private bool _ru;
    private bool _tj;
    private bool _themeSwitcher;


    protected override async Task OnInitializedAsync()
    {
        _en = await FeatureManager.IsEnabledAsync(FeatureFlags.En);
        _ru = await FeatureManager.IsEnabledAsync(FeatureFlags.Ru);
        _tj = await FeatureManager.IsEnabledAsync(FeatureFlags.Tj);
        _themeSwitcher = await FeatureManager.IsEnabledAsync(FeatureFlags.ThemeSwitcher);

        if (!_themeSwitcher)
        {
            LayoutService.SetNoTheme();
        }

        LayoutService.Lang = await ContentService.GetCurrentCulture();
        StateHasChanged();
    }

    private async void SelectLanguage(string lang)
    {
        await LayoutService.ChangeLanguage(lang);
        StateHasChanged();
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task ToggleDarkMode()
    {
        await LayoutService.ToggleDarkMode();
        StateHasChanged();
    }

}