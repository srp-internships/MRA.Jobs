@using MRA.Identity.Application.Contract.Messages.Commands
@using MRA.Identity.Client.Services.Message
@inject ISnackbar Snackbar
@inject IMessageService messageService
<MudDialog>
    <DialogContent>
        <EditForm Model="@message">
            <FluentValidationValidator @ref="_fluentValidationValidator" />

            <MudTextField @bind-Value="message.Phone" Label="@ContentService["SignUp:Phone"]" For="@(()=>message.Phone)" />
            <MudTextField T="string" Lines="5" Variant="Variant.Outlined" @bind-Value="message.Text" Label="@ContentService["Message:Message"]" For="@(()=>message.Text)"/>
            <MudTextField T="string" Lines="5" Variant="Variant.Outlined" @bind-Value="message.Comment" Label="@ContentService["Message:Comment"]" />

            <br />
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="Submit">@ContentService["Message:Send"]</MudButton>
        </EditForm>
    </DialogContent>

</MudDialog>
    @code {
    private FluentValidationValidator _fluentValidationValidator;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private SendMessageCommand message = new();

    private async Task Submit()
    {
        if (await _fluentValidationValidator!.ValidateAsync())
        {
            var response = await messageService.SendMessageAsync(message);
            var resText = await response.Content.ReadAsStringAsync();
            if (response.IsSuccessStatusCode && resText == "true")
            {
                Snackbar.Add("Message sent successfully", Severity.Info);
            } else
            {
                Snackbar.Add("Unable to send message, something went wront", Severity.Info);
            }
            MudDialog.Close();
        }
        
    }
    void Cancel() => MudDialog.Cancel();
}