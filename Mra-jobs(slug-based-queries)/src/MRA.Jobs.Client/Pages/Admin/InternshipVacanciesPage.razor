@page "/dashboard/internship"
@layout Dashboard
@using MRA.Jobs.Application.Contracts.InternshipVacancies.Responses;
@using MRA.Jobs.Application.Contracts.VacancyCategories.Responses;
@using MRA.Jobs.Client.Components.Dialogs;
@using MRA.Jobs.Client.Services.InternshipsServices;

@inject IInternshipService internshipService
@inject ICategoryService categoryService

<h3>InternshipVacanciesPage</h3>

@if (categories == null)
{
	<div>loading....</div>
}
else
{
	<MatAccordion>
		<MatExpansionPanel @bind-Expanded="@panelOpenState">
			<MatExpansionPanelSummary>
				<MatExpansionPanelHeader>Inserting a new Job</MatExpansionPanelHeader>
			</MatExpansionPanelSummary>
			<MatExpansionPanelDetails Style="display: flex;flex-direction: column;">
				<MatTextField @bind-Value="@internshipService.createCommand.Title" Label="Title"></MatTextField>
				<MatTextField @bind-Value="@internshipService.createCommand.ShortDescription" Label="ShortDescription" TextArea></MatTextField>
				<MatTextField @bind-Value="@internshipService.createCommand.Description" Label="Description" TextArea></MatTextField>
				<MatTextField @bind-Value="@internshipService.createCommand.ApplicationDeadline" Format="MM/dd/yy H:mm:ss" Label="ApplicationDeadline"></MatTextField>
				<MatTextField @bind-Value="@internshipService.createCommand.Duration" Label="Duration"></MatTextField>
				<MatTextField @bind-Value="@internshipService.createCommand.Stipend" Label="Stipend"></MatTextField>
				<MatSelectValue @bind-Value="@internshipService.createCommand.CategoryId" Items="@categories" ValueSelector="@(i=>i.Id)">
					<ItemTemplate>
						<span>@context?.Name</span>
					</ItemTemplate>
				</MatSelectValue>
				<MatDatePicker @bind-Value="internshipService.createCommand.EndDate" Format="MM/dd/yy H:mm:ss" Label="EndDate"></MatDatePicker>
				<MatDatePicker @bind-Value="internshipService.createCommand.PublishDate" Format="MM/dd/yy H:mm:ss" Label="PublishDate"></MatDatePicker>
				<MatButton Type="submit" @onclick="@HandleSubmit" Id="btnInsert" hidden="@isInserting">Insert</MatButton>
				<MatButton Type="submit" @onclick="@HandleUpdate" Id="btnUpdate" hidden="@isUpdating">Update</MatButton>
				<MatButton Type="submit" @onclick="@HandleCancel" Id="btnUpdate">Cancel</MatButton>

			</MatExpansionPanelDetails>
		</MatExpansionPanel>
	</MatAccordion>
	<DeleteConfirmation @bind-IsOpen="@isDialogOpen" OnConfirm="DeleteItem" />
	<MatTable Items="@interships" class="mat-elevation-z5" ShowPaging="true" UseSortHeaderRow="true">
		<MatTableHeader>
			<th>Title</th>
			<th>ShortDescription</th>
			<th>Category</th>
			<th>PublishDate</th>
			<th>EndDate</th>
			<th>ApplicationDeadline</th>
			<th>Duration</th>
			<th>Stipend</th>
			<th></th>
			<th></th>
		</MatTableHeader>
		<MatTableRow>
			<td>@context.Title</td>
			<td>@context.ShortDescription</td>
			<td>@context.Category</td>
			<td>@context.PublishDate</td>
			<td>@context.EndDate</td>
			<td>@context.ApplicationDeadline</td>
			<td>@context.Duration</td>
			<td>@context.Stipend</td>
			<td><MatButton @onclick="()=>OnDeleteClick(context.Id)" Style="color:#2094CC" Icon="delete">Delete</MatButton></td>
			<td><MatButton @onclick="()=>OnEditClick(context.Id)" Style="color:#2094CC" Icon="edit">Edit</MatButton></td>
		</MatTableRow>
	</MatTable>
}


@code {
	bool panelOpenState;
	bool isInserting;
	bool isUpdating = true;
	Guid UpdateId;

	private List<CategoryResponse> categories;
	private List<InternshipVacancyListResponce> interships;

	protected override async Task OnInitializedAsync()
	{

		await LoadData();
	}

	private bool isDialogOpen = false;
	private Guid itemIdToDelete;

	void OnDeleteClick(Guid id)
	{
		itemIdToDelete = id;
		isDialogOpen = true;
	}

	private async Task DeleteItem()
	{
		await internshipService.Delete(itemIdToDelete);
		isDialogOpen = false;
		await LoadData();
	}

	private async Task OnEditClick(Guid id)
	{
		var vacancy = await internshipService.GetById(id);
		if (vacancy != null)
		{
			internshipService.createCommand.Title = vacancy.Title;
			internshipService.createCommand.ShortDescription = vacancy.ShortDescription;
			internshipService.createCommand.Description = vacancy.Description;
			internshipService.createCommand.ApplicationDeadline = vacancy.ApplicationDeadline;
			internshipService.createCommand.Stipend = vacancy.Stipend;
			internshipService.createCommand.Duration = vacancy.Duration;
			internshipService.createCommand.EndDate = vacancy.EndDate;
			internshipService.createCommand.PublishDate = vacancy.PublishDate;
			internshipService.createCommand.CategoryId = vacancy.CategoryId;
			isInserting = true;
			isUpdating = false;
			panelOpenState = true;
			UpdateId = id;
		}
	}

	private async Task LoadData()
	{
		interships = await internshipService.GetAll();
		categories = await categoryService.GetAllCategory();
	}

	private async Task HandleSubmit()
	{
		await internshipService.Create();
		await LoadData();
		Clear();
	}

	private async Task HandleUpdate()
	{
		await internshipService.Update(UpdateId);
		await LoadData();
		Clear();
	}

	void HandleCancel()
	{
		Clear();
	}

	private void Clear()
	{
		internshipService.createCommand.Title = string.Empty;
		internshipService.createCommand.ShortDescription = string.Empty;
		internshipService.createCommand.Description = string.Empty;
		internshipService.createCommand.ApplicationDeadline = DateTime.Now;
		internshipService.createCommand.Stipend = 0;
		internshipService.createCommand.Duration = 0;
		internshipService.createCommand.EndDate = DateTime.Now;
		internshipService.createCommand.PublishDate = DateTime.Now;
		isInserting = false;
		isUpdating = true;
		panelOpenState = false;
		UpdateId = Guid.NewGuid();
	}
}
