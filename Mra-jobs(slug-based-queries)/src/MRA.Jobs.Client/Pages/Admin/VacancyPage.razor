@page "/dashboard/jobs"
@layout Dashboard
@using MRA.Jobs.Application.Contracts.JobVacancies.Responses;
@using MRA.Jobs.Application.Contracts.VacancyCategories.Responses;
@using MRA.Jobs.Domain.Enums;
@using MRA.Jobs.Client.Components.Dialogs;

@inject IVacancyService VService
@inject ICategoryService CService

<h3>Vacancy</h3>
@if (_category == null)
{
	<div>Loading</div>
}
else
{
	<MatAccordion>
		<MatExpansionPanel @bind-Expanded="@panelOpenState">
			<MatExpansionPanelSummary>
				<MatExpansionPanelHeader>Inserting a new Job</MatExpansionPanelHeader>
			</MatExpansionPanelSummary>
			<MatExpansionPanelDetails Style="display: flex;flex-direction: column;">
				<MatTextField @bind-Value="@VService.creatingNewJob.Title" Label="Title"></MatTextField>
				<MatTextField @bind-Value="@VService.creatingNewJob.ShortDescription" Label="ShortDescription" TextArea></MatTextField>
				<MatTextField @bind-Value="@VService.creatingNewJob.Description" Label="Description" TextArea></MatTextField>
				<MatTextField @bind-Value="@VService.creatingNewJob.RequiredYearOfExperience" Label="RequiredYearOfExperience"></MatTextField>
				<MatSelectItem @bind-Value="VService.creatingNewJob.WorkSchedule" Items="@value2Items">
				</MatSelectItem>
				<p>
					Selected value: @work
				</p>

				<MatSelectValue @bind-Value="VService.creatingNewJob.CategoryId" Items="@_category" ValueSelector="@(i=>i.Id)">
					<ItemTemplate>
						<span>@context?.Name</span>
					</ItemTemplate>
				</MatSelectValue>
				<MatDatePicker @bind-Value="VService.creatingNewJob.EndDate" Format="MM/dd/yy H:mm:ss" Label="EndDate"></MatDatePicker>
				<MatDatePicker @bind-Value="VService.creatingNewJob.PublishDate" Format="MM/dd/yy H:mm:ss" Label="PublishDate"></MatDatePicker>
				<MatButton Type="submit" @onclick="@HandleSubmit" Id="btnInsert" hidden="@isInserting">Insert</MatButton>
				<MatButton Type="submit" @onclick="@HandleUpdate" Id="btnUpdate" hidden="@isUpdating">Update</MatButton>
				<MatButton Type="submit" @onclick="@HandleCancel" Id="btnUpdate">Cancel</MatButton>

			</MatExpansionPanelDetails>
		</MatExpansionPanel>
	</MatAccordion>
	<DeleteConfirmation @bind-IsOpen="@isDialogOpen" OnConfirm="DeleteItem" />
	<MatTable Items="@vacancies" class="mat-elevation-z5" ShowPaging="true" UseSortHeaderRow="true">
		<MatTableHeader>
			<th>Title</th>
			<th>ShortDescription</th>
			<th>Category</th>
			<th>PublishDate</th>
			<th>EndDate</th>
			<th>WorkSchedule</th>
			<th></th>
			<th></th>
		</MatTableHeader>
		<MatTableRow>
			<td>@context.Title</td>
			<td>@context.ShortDescription</td>
			<td>@context.Category</td>
			<td>@context.PublishDate</td>
			<td>@context.EndDate</td>
			<td>@context.WorkSchedule</td>
			<td><MatButton @onclick="()=>OnDeleteClick(context.Id)" Style="color:#2094CC" Icon="delete">Delete</MatButton></td>
			<td>	<MatButton @onclick="()=>OnEditClick(context.Id)" Style="color:#2094CC" Icon="edit">Edit</MatButton></td>
		</MatTableRow>
	</MatTable>

}

@code {
	WorkSchedule work;
	WorkSchedule[] value2Items = Enum.GetValues(typeof(WorkSchedule)).Cast<WorkSchedule>().ToArray();

	private List<CategoryResponse> _category;
	private List<JobVacancyListDTO> vacancies;
	private bool isDialogOpen = false;
	private Guid itemIdToDelete;
	bool panelOpenState;
	private bool isInserting = false;
	private bool isUpdating = true;
	private Guid UpdateId;

	void OnDeleteClick(Guid id)
	{
		itemIdToDelete = id;
		isDialogOpen = true;
	}

	private async Task DeleteItem()
	{
		await VService.OnDelete(itemIdToDelete);
		isDialogOpen = false;
		await LoadData();
	}

	protected override async Task OnInitializedAsync()
	{
		_category = await VService.GetAllCategory();
		vacancies = await VService.GetJobs();
	}

	private async Task HandleSubmit()
	{
		await VService.OnSaveCreateClick();
		await LoadData();
		Clear();
	}

	private async Task LoadData()
	{
		vacancies = await VService.GetJobs();
	}


	public async Task OnEditClick(Guid id)
	{
		// Получение данных о выбранной вакансии
		var vacancy = await VService.GetById(id);
		if (vacancy != null)
		{
			// Отображение данных о выбранной вакансии в форме
			VService.creatingNewJob.Title = vacancy.Title;
			VService.creatingNewJob.ShortDescription = vacancy.ShortDescription;
			VService.creatingNewJob.Description = vacancy.Description;
			VService.creatingNewJob.RequiredYearOfExperience = vacancy.RequiredYearOfExperience;
			VService.creatingNewJob.WorkSchedule = vacancy.WorkSchedule;
			if (vacancy.CategoryId.HasValue)
			{
				VService.creatingNewJob.CategoryId = vacancy.CategoryId.Value;
			}
			VService.creatingNewJob.EndDate = vacancy.EndDate;
			VService.creatingNewJob.PublishDate = vacancy.PublishDate;
			// Открытие панели формы
			panelOpenState = true;
			isInserting = true;
			isUpdating = false;
			UpdateId = id;
		}
	}

	private async Task HandleUpdate()
	{
		await VService.UpdateJobVacancy(UpdateId);
		await LoadData();
		Clear();
	}

	void HandleCancel()
	{
		Clear();
	}

	private void Clear()
	{
		VService.creatingNewJob.Title = string.Empty;
		VService.creatingNewJob.ShortDescription = string.Empty;
		VService.creatingNewJob.Description = string.Empty;
		VService.creatingNewJob.RequiredYearOfExperience = 0;
		VService.creatingNewJob.WorkSchedule = 0;
		VService.creatingNewJob.EndDate = DateTime.Now;
		VService.creatingNewJob.PublishDate = DateTime.Now;
		isInserting = false;
		isUpdating = true;
		UpdateId = Guid.NewGuid();
	}
}
